(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Ephemeris"] = factory();
	else
		root["Ephemeris"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Ephemeris.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Ephemeris.js":
/*!**************************!*\
  !*** ./src/Ephemeris.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Ephemeris; });\n/* harmony import */ var _utilities_kepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities/kepler */ \"./src/utilities/kepler.js\");\n/* harmony import */ var _classes_Body__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/Body */ \"./src/classes/Body.js\");\n/* harmony import */ var _classes_Sol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Sol */ \"./src/classes/Sol.js\");\n/* harmony import */ var _classes_Luna__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./classes/Luna */ \"./src/classes/Luna.js\");\n/* harmony import */ var _classes_Earth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./classes/Earth */ \"./src/classes/Earth.js\");\n/* harmony import */ var _classes_HeliocentricOrbitalBody__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./classes/HeliocentricOrbitalBody */ \"./src/classes/HeliocentricOrbitalBody.js\");\n/* harmony import */ var _classes_Star__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./classes/Star */ \"./src/classes/Star.js\");\n/* harmony import */ var _classes_Observer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./classes/Observer */ \"./src/classes/Observer.js\");\n/* harmony import */ var _utilities_validators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utilities/validators */ \"./src/utilities/validators.js\");\n\n\n\n\n\n\n\n\n\n\nclass Ephemeris {\n  constructor({\n    year=0, month=0, day=0, hours=0, minutes=0, seconds=0,\n    latitude=0.00, longitude=0.00, height=0.00,\n    key=undefined,\n    moonQuarterApproximationValue=1.5,\n    calculateMotion=true\n  }={}) {\n    // Assumes UTC time\n    // * int year (> 0 C.E.)\n    // * int month (0 - 11 || 0 = January, 11 = December)\n    // * int day (1 - 31)\n    // * int hours (0 - 23)\n    // * int minutes (0 - 59)\n    // * int seconds (0 - 59)\n    // * float latitude (-90 - +90)\n    // * float longitude (-180 - +180)\n    // * float height\n    // * string OR array[string] key - ex: pass in \"venus\" or [\"mercury\", \"venus\"] or leave blank for all\n\n    this._key = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_8__[\"validateKey\"])(key)\n    this._calculateMotion = calculateMotion\n    this._moonQuarterApproximationValue = moonQuarterApproximationValue\n\n    this.Observer = new _classes_Observer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]({latitude: latitude, longitude: longitude, height: height, year: year, month: month, day: day, hours: hours, minutes: minutes, seconds: seconds })\n\n    this.Earth = new _classes_Earth__WEBPACK_IMPORTED_MODULE_4__[\"default\"](new _classes_Body__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('earth'), this.Observer.Date)\n\n    this.Results = this.CalculateKeys()\n\n    // Add each result as a key to the ephemeris object\n    this.Results.forEach(result => {\n      this[result.key] = result\n    })\n\n    this.CalculateKeys = this.CalculateKeys.bind(this)\n    this.CalculateBody = this.CalculateBody.bind(this)\n  }\n\n  CalculateKeys() {\n    return !!this._key && this._key.length ? // if key array\n      _classes_Body__WEBPACK_IMPORTED_MODULE_1__[\"default\"].KeysExceptEarth.filter(b => this._key.includes(b.key)).map(b => this.CalculateBody(b.key)) :\n      _classes_Body__WEBPACK_IMPORTED_MODULE_1__[\"default\"].KeysExceptEarth.map(b => this.CalculateBody(b.key))\n  }\n\n  CalculateBody(bodyKey) {\n    const body = new _classes_Body__WEBPACK_IMPORTED_MODULE_1__[\"default\"](bodyKey)\n    switch(body.type) {\n      case 'sun':\n        return new _classes_Sol__WEBPACK_IMPORTED_MODULE_2__[\"default\"](body, this.Earth, this.Observer)\n      case 'luna':\n        return new _classes_Luna__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({body: body, earthBody: this.Earth, observer: this.Observer, quarterApproximationValue: this._moonQuarterApproximationValue})\n      case 'heliocentric':\n        return new _classes_HeliocentricOrbitalBody__WEBPACK_IMPORTED_MODULE_5__[\"default\"](body, this.Earth, this.Observer, this._calculateMotion)\n      case 'star':\n        return new _classes_Star__WEBPACK_IMPORTED_MODULE_6__[\"default\"](body, this.Earth, this.Observer)\n      default:\n        throw new Error(`Celestial body with key: \"${bodyKey}\" or type \"${body.type}\" not found.`)\n        break\n    }\n  }\n\n  static CalculateDailyBody({startYear=0, startMonth=0, startDay=0, endYear=0, endMonth=0, endDay=0, hours=12, minutes=0, latitude=0.00, longitude=0.00, key=null}={}) {\n    // Returns an array of ephemerii from startDate to endDate for 12pm noon UTC of each day\n    // of the specific body\n    const startDate = new Date(Date.UTC(startYear, startMonth, startDay, hours, minutes, 0))\n    const endDate = new Date(Date.UTC(endYear, endMonth, endDay, hours, minutes, 0))\n    const datesArray = []\n\n    let currentDate = new Date(startDate)\n    while(currentDate <= endDate) {\n      datesArray.push(new Date(currentDate))\n      currentDate = new Date(currentDate.setDate(currentDate.getDate() + 1))\n    }\n\n    const ephemerisArray = datesArray.map(date => {\n      return new Ephemeris(\n        {\n          year: date.getFullYear(),\n          month: date.getMonth(),\n          day: date.getDate(),\n          hours: date.getHours(),\n          minutes: date.getMinutes(),\n          seconds: date.getSeconds(),\n          latitude: latitude,\n          longitude: longitude,\n          key: key\n        }\n      )\n    })\n\n    return ephemerisArray\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/Ephemeris.js?");

/***/ }),

/***/ "./src/classes/Body.js":
/*!*****************************!*\
  !*** ./src/classes/Body.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Body; });\n/* harmony import */ var _constants_celestialBodies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/celestialBodies */ \"./src/constants/celestialBodies.js\");\n\n\nclass Body {\n  constructor(key) {\n    this._key = key\n\n    this.locals = {}\n    this.locals.dp = [] // correction vector, saved for display\n    this.locals.dradt = null; // approx motion of right ascension of object in radians p day\n  \tthis.locals.ddecdt = null; // approx motion of declination of object in radians p day\n    this.locals.EO = 0.0;  /* earth-sun distance */\n  \tthis.locals.SE = 0.0;  /* object-sun distance */\n  \tthis.locals.SO = 0.0;  /* object-earth distance */\n  \tthis.locals.pq = 0.0;\t/* cosine of sun-object-earth angle */\n  \tthis.locals.ep = 0.0;\t/* -cosine of sun-earth-object angle */\n  \tthis.locals.qe = 0.0;\t/* cosine of earth-sun-object angle */\n\n    this.aberration = {}\n    this.lightTime = {}\n    this.position = {}\n    this.distance = undefined\n    this.epoch = undefined\n    this.semiAxis = 0.0\n    this.semiDiameter = undefined\n\n    this._body = _constants_celestialBodies__WEBPACK_IMPORTED_MODULE_0__[\"celestialBodies\"].find(b => b.key === this._key)\n\n    Object.keys(this._body).forEach(key => {\n      this[key] = this._body[key]\n    })\n  }\n\n  static get KeysExceptEarth() {\n    return _constants_celestialBodies__WEBPACK_IMPORTED_MODULE_0__[\"celestialBodies\"].filter(body => body.key !== 'earth')\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Body.js?");

/***/ }),

/***/ "./src/classes/Earth.js":
/*!******************************!*\
  !*** ./src/classes/Earth.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Earth; });\n/* harmony import */ var _utilities_kepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/kepler */ \"./src/utilities/kepler.js\");\n\n\nclass Earth {\n  constructor(body, date) {\n\n    this._body = this.calculateBody(body, date.julian)\n\n    Object.keys(this._body).forEach(key => {\n      this[key] = this._body[key]\n    })\n\n    this.calculateBody = this.calculateBody.bind(this)\n  }\n\n  calculateBody(body, julianDate) {\n    return _utilities_kepler__WEBPACK_IMPORTED_MODULE_0__[\"kepler\"].calc(julianDate, body)\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Earth.js?");

/***/ }),

/***/ "./src/classes/HeliocentricOrbitalBody.js":
/*!************************************************!*\
  !*** ./src/classes/HeliocentricOrbitalBody.js ***!
  \************************************************/
/*! exports provided: default, planet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return HeliocentricOrbitalBody; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"planet\", function() { return planet; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/aberration */ \"./src/utilities/aberration.js\");\n/* harmony import */ var _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/altaz */ \"./src/utilities/altaz.js\");\n/* harmony import */ var _utilities_constellation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/constellation */ \"./src/utilities/constellation.js\");\n/* harmony import */ var _utilities_deflection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/deflection */ \"./src/utilities/deflection.js\");\n/* harmony import */ var _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _utilities_kepler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/kepler */ \"./src/utilities/kepler.js\");\n/* harmony import */ var _utilities_light__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/light */ \"./src/utilities/light.js\");\n/* harmony import */ var _utilities_lonlat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/lonlat */ \"./src/utilities/lonlat.js\");\n/* harmony import */ var _utilities_nutation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/nutation */ \"./src/utilities/nutation.js\");\n/* harmony import */ var _utilities_precess__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/precess */ \"./src/utilities/precess.js\");\n/* harmony import */ var _utilities_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utilities/util */ \"./src/utilities/util.js\");\n/* harmony import */ var _utilities_motion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/motion */ \"./src/utilities/motion.js\");\n/* harmony import */ var _Ephemeris__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../Ephemeris */ \"./src/Ephemeris.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass HeliocentricOrbitalBody {\n  constructor(body, earthBody, observer, calculateMotion) {\n    this._earthBody = earthBody\n    this._observer = observer\n    this._calculateMotion = calculateMotion\n    this._body = this.calculateBody(body, this._earthBody, this._observer)\n    Object.keys(this._body).filter(k => k !== '_body').forEach(key => {\n      this[key] = this._body[key]\n    })\n\n    this.calculateBody = this.calculateBody.bind(this)\n    this.reduceBody = this.reduceBody.bind(this)\n    this.calculateMotion = this.calculateMotion.bind(this)\n\n    if (calculateMotion) {\n      this.calculateMotion(body, observer)\n    }\n  }\n\n  calculateBody(body, earthBody, observer) {\n    if (!body.semiAxis) {\n  \t\tbody.semiAxis = body.perihelionDistance / (1 - body.eccentricity);\n  \t}\n\n  \t/* calculate heliocentric position of the object */\n  \tbody = _utilities_kepler__WEBPACK_IMPORTED_MODULE_6__[\"kepler\"].calc(observer.Date.julian, body); // NOTE mutates body\n  \t/* apply correction factors and print apparent place */\n  \treturn this.reduceBody(body, body.position.rect, earthBody.position.rect, earthBody, observer);\n  }\n\n  calculateMotion(body, observer) {\n    // const yesterday = new Date(observer.Date.utc)\n    // yesterday.setDate(observer.Date.utc.getDate() - 1)\n    this.motion = {}\n    this.motion.apparentLongitude = {}\n    // this.motion.apparentLongitude.yesterday = new Ephemeris(\n    //   {\n    //     year:yesterday.getFullYear(),\n    //     month: yesterday.getMonth(),\n    //     day: yesterday.getDate(),\n    //     hours: yesterday.getHours(),\n    //     minutes: yesterday.getMinutes(),\n    //     seconds: yesterday.getSeconds(),\n    //     latitude: observer.latitude,\n    //     longitude: observer.longitude,\n    //     height: observer.height,\n    //     key: body.key,\n    //     calculateMotion: false\n    //   }\n    // )[body.key].position.apparentLongitude\n    //\n    // const yesterdayDifference = util.getModuloDifference(this.position.apparentLongitude, this.motion.apparentLongitude.yesterday, 360)\n    //\n    // this.motion.apparentLongitude.yesterdayDifference = util.correctRealModuloNumber(yesterdayDifference, this.position.apparentLongitude, this.motion.apparentLongitude.yesterday, 360)\n\n    const nextMinute = new Date(observer.Date.utc)\n    nextMinute.setUTCMinutes(observer.Date.utc.getUTCMinutes() + 1)\n    this.motion.nextMinuteApparentLongitude = new _Ephemeris__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\n      {\n        year:nextMinute.getUTCFullYear(),\n        month: nextMinute.getUTCMonth(),\n        day: nextMinute.getUTCDate(),\n        hours: nextMinute.getUTCHours(),\n        minutes: nextMinute.getUTCMinutes(),\n        seconds: nextMinute.getUTCSeconds(),\n        latitude: observer.latitude,\n        longitude: observer.longitude,\n        height: observer.height,\n        key: body.key,\n        calculateMotion: false\n      }\n    )[body.key].position.apparentLongitude\n\n    const nextMinuteDifference = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].getModuloDifference(this.motion.nextMinuteApparentLongitude, this.position.apparentLongitude, 360)\n\n    this.motion.nextMinuteApparentLongitudeDifference = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].correctRealModuloNumber(nextMinuteDifference, this.motion.nextMinuteApparentLongitude, this.position.apparentLongitude, 360)\n\n    this.motion.isRetrograde = !!(this.motion.nextMinuteApparentLongitudeDifference < 0)\n\n    console.log(this._observer.Date.utc,\n      this.position.apparentLongitude,\n      this.motion.nextMinuteApparentLongitude, this.motion.nextMinuteApparentLongitudeDifference,\n    this.motion.isRetrograde)\n\n    // this.motion.centuryAverageMotion = calculateCenturyAverageMotion(body.key, observer.Date.utc)\n  }\n\n  reduceBody(body, q, e, earthBody, observer) {\n  \tvar p = [], temp = [], polar = []; // double\n  \tvar a, b, r, s, x; // double\n  \tvar i; // int\n\n  \t/* Save the geometric coordinates at TDT\n  \t */\n  \tfor ( i=0; i<3; i++ ) {\n  \t\ttemp[i] = q[i];\n  \t}\n\n  \t/* Display ecliptic longitude and latitude, precessed to equinox\n  \t of date.  */\n  \tbody.equinoxEclipticLonLat = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_8__[\"lonlat\"].calc(q, observer.Date, polar, 1 );\n\n  \t/* Adjust for light time (planetary aberration)\n  \t */\n  \t_utilities_light__WEBPACK_IMPORTED_MODULE_7__[\"light\"].calc( body, q, e, earthBody, observer); // NOTE mutates body\n\n  \t/* Find Euclidean vectors between earth, object, and the sun\n  \t */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] = q[i] - e[i];\n  \t}\n\n  \tbody = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].angles( p, q, e, body );\n\n  \ta = 0.0;\n  \tfor( i=0; i<3; i++ ) {\n  \t\tb = temp[i] - e[i];\n  \t\ta += b * b;\n  \t}\n  \ta = Math.sqrt(a);\n  \tbody.position.trueGeocentricDistance = a; /* was EO */\n  \tbody.position.equatorialDiameter = 2.0*body.semiDiameter / body.locals.EO;\n\n  \t/* Calculate radius.\n  \t */\n  \tr = 0.0;\n  \tx = 0.0;\n  \tfor( i=0; i<3; i++ ) {\n  \t\tx = p[i];\n  \t\tr += x * x;\n  \t}\n  \tr = Math.sqrt(r);\n\n  \t/* Calculate visual magnitude.\n  \t * \"Visual\" refers to the spectrum of visible light.\n  \t * Phase = 0.5(1+pq) = geometric fraction of disc illuminated.\n  \t * where pq = cos( sun-object-earth angle )\n  \t * The magnitude is\n  \t *    V(1,0) + 2.5 log10( SE^2 SO^2 / Phase)\n  \t * where V(1,0) = elemnt->mag is the magnitude at 1au from\n  \t * both earth and sun and 100% illumination.\n  \t */\n  \ta = 0.5 * (1.0 + body.locals.pq);\n  \t/* Fudge the phase for light leakage in magnitude estimation.\n  \t * Note this phase term estimate does not reflect reality well.\n  \t * Calculated magnitudes of Mercury and Venus are inaccurate.\n  \t */\n  \tb = 0.5 * (1.01 + 0.99*body.locals.pq);\n  \ts = body.magnitude + 2.1715 * Math.log( body.locals.EO * body.locals.SO ) - 1.085 * Math.log(b);\n  \tbody.position.approxVisual = {\n  \t\tmagnitude: s,\n  \t\tphase: a\n  \t};\n\n  \t/* Find unit vector from earth in direction of object\n  \t */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] /= body.locals.EO;\n  \t\ttemp[i] = p[i];\n  \t}\n\n  \t/* Report astrometric position\n  \t */\n  \tbody.position.astrometricJ2000 = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd (p, polar );\n\n  \t/* Also in 1950 coordinates\n  \t */\n  \ttemp = _utilities_precess__WEBPACK_IMPORTED_MODULE_10__[\"precess\"].calc ( temp, _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"], -1 );\n  \tbody.position.astrometricB1950 = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd (temp, polar );\n\n  \t/* Correct position for light deflection\n  \t */\n  \tbody.position.deflection = _utilities_deflection__WEBPACK_IMPORTED_MODULE_4__[\"deflection\"].calc ( p, q, e, body ); // relativity\n\n  \t/* Correct for annual aberration\n  \t */\n  \tbody.position.aberration = _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__[\"aberration\"].calc(p, earthBody, observer, body);\n\n  \t/* Precession of the equinox and ecliptic\n  \t * from J2000.0 to ephemeris date\n  \t */\n  \tp = _utilities_precess__WEBPACK_IMPORTED_MODULE_10__[\"precess\"].calc( p, observer.Date.julian, -1 );\n\n  \t/* Ajust for nutation\n  \t * at current ecliptic.\n  \t */\n\n  \t// const epsilonObject = new Epsilon(observer.Date.julian); // NOTE - has no affect on result\n  \tbody.position.nutation = _utilities_nutation__WEBPACK_IMPORTED_MODULE_9__[\"nutation\"].calc ( observer.Date, p ); // NOTE mutates p\n\n  \t/* Display the final apparent R.A. and Dec.\n  \t * for equinox of date.\n  \t */\n  \tbody.position.constellation = _utilities_constellation__WEBPACK_IMPORTED_MODULE_3__[\"constellation\"].calc (p, observer.Date);\n  \tbody.position.apparent = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd(p, polar);\n\n  \t/* Geocentric ecliptic longitude and latitude.  */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] *= body.locals.EO;\n  \t}\n  \tbody.position.apparentGeocentric = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_8__[\"lonlat\"].calc ( p, observer.Date, temp, 0 );\n  \tbody.position.apparentLongitude = body.position.apparentGeocentric [0] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"];\n  \tbody.position.apparentLongitudeString =\n  \t\tbody.position.apparentGeocentric [3].degree + '\\u00B0' +\n  \t\tbody.position.apparentGeocentric [3].minutes + '\\'' +\n  \t\tMath.floor (body.position.apparentGeocentric [3].seconds) + '\"'\n  \t;\n\n  \tbody.position.apparentLongitude30String =\n  \t\t_utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].mod30(body.position.apparentGeocentric [3].degree) + '\\u00B0' +\n  \t\tbody.position.apparentGeocentric [3].minutes + '\\'' +\n  \t\tMath.floor(body.position.apparentGeocentric [3].seconds) + '\"'\n  \t;\n\n  \tbody.position.geocentricDistance = r;\n\n  \t/* Go do topocentric reductions.\n  \t */\n  \tpolar[2] = body.locals.EO;\n  \tbody.position.altaz = _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__[\"altaz\"].calc(polar, observer.Date, body, observer);\n\n    return body\n  }\n}\n\nconst planet = {};\n\nplanet.calc = (body, earthBody, observer) => {\n\tbody = planet.prepare(body);\n\n\t/* calculate heliocentric position of the object */\n\tbody = _utilities_kepler__WEBPACK_IMPORTED_MODULE_6__[\"kepler\"].calc(observer.Date.julian, body); // NOTE mutates body\n\t/* apply correction factors and print apparent place */\n\treturn planet.reduce(body, body.position.rect, earthBody.position.rect, earthBody, observer);\n};\n\n/* The following program reduces the heliocentric equatorial\n * rectangular coordinates of the earth and object that\n * were computed by kepler() and produces apparent geocentric\n * right ascension and declination.\n */\nplanet.reduce = (body, q, e, earthBody, observer) => {\n\tvar p = [], temp = [], polar = []; // double\n\tvar a, b, r, s, x; // double\n\tvar i; // int\n\n\t/* Save the geometric coordinates at TDT\n\t */\n\tfor ( i=0; i<3; i++ ) {\n\t\ttemp[i] = q[i];\n\t}\n\n\t/* Display ecliptic longitude and latitude, precessed to equinox\n\t of date.  */\n\tbody.equinoxEclipticLonLat = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_8__[\"lonlat\"].calc(q, observer.Date, polar, 1 );\n\n\t/* Adjust for light time (planetary aberration)\n\t */\n\t_utilities_light__WEBPACK_IMPORTED_MODULE_7__[\"light\"].calc( body, q, e, earthBody, observer); // NOTE mutates body\n\n\t/* Find Euclidean vectors between earth, object, and the sun\n\t */\n\tfor( i=0; i<3; i++ ) {\n\t\tp[i] = q[i] - e[i];\n\t}\n\n\tbody = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].angles( p, q, e, body );\n\n\ta = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tb = temp[i] - e[i];\n\t\ta += b * b;\n\t}\n\ta = Math.sqrt(a);\n\tbody.position.trueGeocentricDistance = a; /* was EO */\n\tbody.position.equatorialDiameter = 2.0*body.semiDiameter / body.locals.EO;\n\n\t/* Calculate radius.\n\t */\n\tr = 0.0;\n\tx = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tx = p[i];\n\t\tr += x * x;\n\t}\n\tr = Math.sqrt(r);\n\n\t/* Calculate visual magnitude.\n\t * \"Visual\" refers to the spectrum of visible light.\n\t * Phase = 0.5(1+pq) = geometric fraction of disc illuminated.\n\t * where pq = cos( sun-object-earth angle )\n\t * The magnitude is\n\t *    V(1,0) + 2.5 log10( SE^2 SO^2 / Phase)\n\t * where V(1,0) = elemnt->mag is the magnitude at 1au from\n\t * both earth and sun and 100% illumination.\n\t */\n\ta = 0.5 * (1.0 + body.locals.pq);\n\t/* Fudge the phase for light leakage in magnitude estimation.\n\t * Note this phase term estimate does not reflect reality well.\n\t * Calculated magnitudes of Mercury and Venus are inaccurate.\n\t */\n\tb = 0.5 * (1.01 + 0.99*body.locals.pq);\n\ts = body.magnitude + 2.1715 * Math.log( body.locals.EO * body.locals.SO ) - 1.085 * Math.log(b);\n\tbody.position.approxVisual = {\n\t\tmagnitude: s,\n\t\tphase: a\n\t};\n\n\t/* Find unit vector from earth in direction of object\n\t */\n\tfor( i=0; i<3; i++ ) {\n\t\tp[i] /= body.locals.EO;\n\t\ttemp[i] = p[i];\n\t}\n\n\t/* Report astrometric position\n\t */\n\tbody.position.astrometricJ2000 = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd (p, polar );\n\n\t/* Also in 1950 coordinates\n\t */\n\ttemp = _utilities_precess__WEBPACK_IMPORTED_MODULE_10__[\"precess\"].calc ( temp, _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"], -1 );\n\tbody.position.astrometricB1950 = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd (temp, polar );\n\n\t/* Correct position for light deflection\n\t */\n\tbody.position.deflection = _utilities_deflection__WEBPACK_IMPORTED_MODULE_4__[\"deflection\"].calc ( p, q, e, body ); // relativity\n\n\t/* Correct for annual aberration\n\t */\n\tbody.position.aberration = _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__[\"aberration\"].calc(p, earthBody, observer, body);\n\n\t/* Precession of the equinox and ecliptic\n\t * from J2000.0 to ephemeris date\n\t */\n\tp = _utilities_precess__WEBPACK_IMPORTED_MODULE_10__[\"precess\"].calc( p, observer.Date.julian, -1 );\n\n\t/* Ajust for nutation\n\t * at current ecliptic.\n\t */\n\n\t// const epsilonObject = new Epsilon(observer.Date.julian); // NOTE - has no affect on result\n\tbody.position.nutation = _utilities_nutation__WEBPACK_IMPORTED_MODULE_9__[\"nutation\"].calc ( observer.Date, p ); // NOTE mutates p\n\n\t/* Display the final apparent R.A. and Dec.\n\t * for equinox of date.\n\t */\n\tbody.position.constellation = _utilities_constellation__WEBPACK_IMPORTED_MODULE_3__[\"constellation\"].calc (p, observer.Date);\n\tbody.position.apparent = _utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].showrd(p, polar);\n\n\t/* Geocentric ecliptic longitude and latitude.  */\n\tfor( i=0; i<3; i++ ) {\n\t\tp[i] *= body.locals.EO;\n\t}\n\tbody.position.apparentGeocentric = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_8__[\"lonlat\"].calc ( p, observer.Date, temp, 0 );\n\tbody.position.apparentLongitude = body.position.apparentGeocentric [0] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"];\n\tbody.position.apparentLongitudeString =\n\t\tbody.position.apparentGeocentric [3].degree + '\\u00B0' +\n\t\tbody.position.apparentGeocentric [3].minutes + '\\'' +\n\t\tMath.floor (body.position.apparentGeocentric [3].seconds) + '\"'\n\t;\n\n\tbody.position.apparentLongitude30String =\n\t\t_utilities_util__WEBPACK_IMPORTED_MODULE_11__[\"util\"].mod30(body.position.apparentGeocentric [3].degree) + '\\u00B0' +\n\t\tbody.position.apparentGeocentric [3].minutes + '\\'' +\n\t\tMath.floor(body.position.apparentGeocentric [3].seconds) + '\"'\n\t;\n\n\tbody.position.geocentricDistance = r;\n\n\t/* Go do topocentric reductions.\n\t */\n\tpolar[2] = body.locals.EO;\n\tbody.position.altaz = _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__[\"altaz\"].calc(polar, observer.Date, body, observer);\n\n  return body\n};\n\nplanet.prepare = body => {\n\tif (!body.semiAxis) {\n\t\tbody.semiAxis = body.perihelionDistance / (1 - body.eccentricity);\n\t}\n\n  return body\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/HeliocentricOrbitalBody.js?");

/***/ }),

/***/ "./src/classes/Luna.js":
/*!*****************************!*\
  !*** ./src/classes/Luna.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Luna; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/aberration */ \"./src/utilities/aberration.js\");\n/* harmony import */ var _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/altaz */ \"./src/utilities/altaz.js\");\n/* harmony import */ var _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _utilities_gplan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/gplan */ \"./src/utilities/gplan.js\");\n/* harmony import */ var _utilities_lonlat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/lonlat */ \"./src/utilities/lonlat.js\");\n/* harmony import */ var _utilities_precess__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/precess */ \"./src/utilities/precess.js\");\n/* harmony import */ var _utilities_nutation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/nutation */ \"./src/utilities/nutation.js\");\n/* harmony import */ var _utilities_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/util */ \"./src/utilities/util.js\");\n/* harmony import */ var _utilities_luna__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/luna */ \"./src/utilities/luna.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass Luna {\n  constructor({body, earthBody, observer, quarterApproximationValue=1.5}={}) {\n    this.ra = 0.0 /* Right Ascension */\n    this.dec = 0.0 /* Declination */\n\n    this.quarterApproximationValue = quarterApproximationValue\n\n    this._body = this.calculateBody(body, earthBody, observer)\n\n    Object.keys(this._body).forEach(key => {\n      this[key] = this._body[key]\n    })\n\n    this.orbit = this.calculateOrbit(observer.Date.julian)\n\n    this.calculateBody = this.calculateBody.bind(this)\n    this.calcll = this.calcll.bind(this)\n    this.calculateOrbit = this.calculateOrbit.bind(this)\n    this.calculateMeanAscendingNode = this.calculateMeanAscendingNode.bind(this)\n    this.calculateMeanDescendingNode = this.calculateMeanDescendingNode.bind(this)\n  }\n\n  static GetPhaseQuarterString(quarterIndex) {\n    switch(quarterIndex) {\n      case 0:\n        return \"New Moon\"\n      case 1:\n        return \"First Quarter\"\n      case 2:\n        return \"Full Moon\"\n      case 3:\n        return \"Last Quarter\"\n      default:\n        throw new Error(`Quarter Index: ${quarterIndex} not valid (must be beteen 0 - 3)`)\n    }\n  }\n\n  static GetShapeString({illuminatedFraction=0.00}={}) {\n    if (illuminatedFraction >= 0 && illuminatedFraction < 0.5) return \"Crescent\"\n    if (illuminatedFraction >= 0.5 && illuminatedFraction < 1) return \"Gibbous\"\n  }\n\n  static GetShapeDirectionString({phaseDecimal=0.00}={}) {\n    if (phaseDecimal >= 0 && phaseDecimal < 0.5) return \"Waxing\"\n    if (phaseDecimal >= 0.5 && phaseDecimal < 1) return \"Waning\"\n  }\n\n  static GetWithinQuarterApproximation({phaseDaysBefore=0.00, phaseDaysPast=0.00, halfRangeLength=this.quarterApproximationValue}={}) {\n    return (!!phaseDaysBefore && phaseDaysBefore <= halfRangeLength) || (!!phaseDaysPast && phaseDaysPast <= halfRangeLength)\n  }\n\n  static GetQuarterApproximationString({quarterIndex=0, phaseDaysBefore=0.00, phaseDaysPast=0.00, halfRangeLength=1.5}={}) {\n    if (!(!!phaseDaysBefore || !!phaseDaysPast) || (!!phaseDaysBefore && phaseDaysBefore > halfRangeLength) || (!!phaseDaysPast && phaseDaysPast > halfRangeLength)) {\n      return\n    }\n\n    const closestQuarterIndex = (!!phaseDaysBefore && phaseDaysBefore <= halfRangeLength) ? _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(quarterIndex + 1, 4) : _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(quarterIndex, 4)\n\n    return `${Luna.GetPhaseQuarterString(closestQuarterIndex)}`\n  }\n\n  static GetQuarterApproximationDirectionString({phaseDaysBefore=0.00, phaseDaysPast=0.00, halfRangeLength=1.5}={}) {\n    if (!!phaseDaysBefore && phaseDaysBefore <= halfRangeLength) return \"Entering\"\n    if (!!phaseDaysPast && phaseDaysPast <= halfRangeLength) return \"Leaving\"    \n  }\n\n  calculateBody(body, earthBody, observer) {\n    var i, prtsav; // int\n  \tvar ra0, dec0; // double\n  \tvar x, y, z, lon0; // double\n  \tvar pp = [], qq = [], pe = [], re = [], moonpp = [], moonpol = []; // double\n\n  \tbody.position = {\n  \t\tpolar: [],\n  \t\trect: []\n  \t};\n\n  \t/* Geometric equatorial coordinates of the earth.  */\n  \tfor (i = 0; i < 3; i++) {\n  \t\tre[i] = earthBody.position.rect [i];\n  \t}\n\n  \t/* Run the orbit calculation twice, at two different times,\n  \t * in order to find the rate of change of R.A. and Dec.\n  \t */\n\n  \t/* Calculate for 0.001 day ago\n  \t */\n\n\n  \tthis.calcll(observer.Date.julian - 0.001, moonpp, moonpol, body, earthBody, observer); // TDT - 0.001\n  \tra0 = this.ra;\n  \tdec0 = this.dec;\n  \tlon0 = moonpol[0];\n  \t/* Calculate for present instant.\n  \t */\n  \tbody.position.nutation = this.calcll(observer.Date.julian, moonpp, moonpol, body, earthBody, observer).nutation;\n\n  \tbody.position.geometric = {\n  \t\tlongitude: _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * body.position.polar[0],\n  \t\tlatitude: _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * body.position.polar[1],\n  \t\tdistance: _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * body.position.polar[2]\n  \t};\n\n  \t/**\n  \t * The rates of change.  These are used by altaz () to\n  \t * correct the time of rising, transit, and setting.\n  \t */\n  \tbody.locals.dradt = this.ra - ra0;\n  \tif (body.locals.dradt >= Math.PI)\n  \t\tbody.locals.dradt = body.locals.dradt - 2.0 * Math.PI;\n  \tif (body.locals.dradt <= -Math.PI)\n  \t\tbody.locals.dradt = body.locals.dradt + 2.0 * Math.PI;\n  \tbody.locals.dradt = 1000.0 * body.locals.dradt;\n  \tbody.locals.ddecdt = 1000.0*(this.dec-dec0);\n\n  \t/* Rate of change in longitude, degrees per day\n  \t * used for phase of the moon\n  \t */\n  \tlon0 = 1000.0*_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"]*(moonpol[0] - lon0);\n\n  \t/* Get apparent coordinates for the earth.  */\n  \tz = re [0] * re [0] + re [1] * re [1] + re [2] * re [2];\n  \tz = Math.sqrt(z);\n  \tfor (i = 0; i < 3; i++) {\n  \t\tre[i] /= z;\n  \t}\n\n  \t/* aberration of light. */\n  \tbody.position.annualAberration = _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__[\"aberration\"].calc(re, earthBody, observer, body);\n\n  \t/* pe[0] -= STR * (20.496/(RTS*pe[2])); */\n  \tre = _utilities_precess__WEBPACK_IMPORTED_MODULE_6__[\"precess\"].calc(re, observer.Date.julian, -1);\n  \t_utilities_nutation__WEBPACK_IMPORTED_MODULE_7__[\"nutation\"].calc(observer.Date, re); // NOTE mutates re\n\n  \tfor (i = 0; i < 3; i++) {\n  \t\tre[i] *= z;\n  \t}\n\n  \tpe = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_5__[\"lonlat\"].calc( re, observer.Date, pe, 0 );\n\n  \t/* Find sun-moon-earth angles */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tqq[i] = re[i] + moonpp[i];\n  \t}\n  \tbody = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].angles( moonpp, qq, re, body );\n\n  \t/* Display answers\n  \t */\n\n  \tbody.position.apparentGeocentric = {\n  \t\tlongitude: moonpol [0],\n  \t\tdLongitude: _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * moonpol [0],\n  \t\tlatitude: moonpol [1],\n  \t\tdLatitude: _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * moonpol [1],\n  \t\tdistance: moonpol [2] / _constants__WEBPACK_IMPORTED_MODULE_0__[\"REARTH\"]\n  \t};\n  \tbody.position.apparentLongitude = body.position.apparentGeocentric.dLongitude;\n  \tvar dmsLongitude = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].dms(body.position.apparentGeocentric.longitude);\n  \tbody.position.apparentLongitudeString =\n  \t\tdmsLongitude.degree + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.apparentLongitude30String =\n  \t\t_utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod30 (dmsLongitude.degree) + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.geocentricDistance = moonpol [2] / _constants__WEBPACK_IMPORTED_MODULE_0__[\"REARTH\"];\n\n  \tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"REARTH\"]/moonpol[2];\n  \tbody.position.dHorizontalParallax = Math.asin (x);\n  \tbody.position.horizontalParallax = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].dms (Math.asin (x));\n\n  \tx = 0.272453 * x + 0.0799 / _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]; /* AA page L6 */\n  \tbody.position.dSemidiameter = x;\n  \tbody.position.Semidiameter = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].dms (x);\n\n  \tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * Math.acos(-body.locals.ep);\n  \t/*\tx = 180.0 - RTD * arcdot (re, pp); */\n  \tbody.position.sunElongation = x;\n  \tx = 0.5 * (1.0 + body.locals.pq);\n  \tbody.position.illuminatedFraction = x;\n\n  \t/* Find phase of the Moon by comparing Moon's longitude\n  \t * with Earth's longitude.\n  \t *\n  \t * The number of days before or past indicated phase is\n  \t * estimated by assuming the true longitudes change linearly\n  \t * with time.  These rates are estimated for the date, but\n  \t * do not stay body.  The error can exceed 0.15 day in 4 days.\n  \t */\n  \tx = moonpol[0] - pe[0];\n  \tx = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].modtp ( x ) * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"];\t/* difference in longitude */\n  \ti = Math.floor (x/90);\t/* number of quarters */\n    // phaseDecimal - 0.0 - 1.0 float representation of phase.\n    body.position.phaseDecimal = ((x / 360) + 0.5) % 1 // 0-0.24 = New, 0.25 - 0.49 = First Quarter, 0.5 - 0.74 = Full, 0.75 - 0.99 = Last Quarter\n\n    x = (x - i*90.0);\t/* phase angle mod 90 degrees */\n\n  \t/* days per degree of phase angle */\n  \tz = moonpol[2]/(12.3685 * 0.00257357);\n\n  \tif( x > 45.0 ) {\n  \t\ty = -(x - 90.0)*z;\n  \t\tbody.position.phaseDaysBefore = y;\n  \t} else {\n  \t\ty = x*z;\n  \t\tbody.position.phaseDaysPast = y;\n  \t}\n\n    body.position.phaseDaysDistance = y\n\n    i = (i+2) % 4;\n  \tbody.position.phaseQuarter = i;\n    body.position.phaseQuarterString = Luna.GetPhaseQuarterString(i);\n\n    body.position.shapeString = Luna.GetShapeString({illuminatedFraction: body.position.illuminatedFraction})\n\n    body.position.shapeDirectionString = Luna.GetShapeDirectionString({phaseDecimal: body.position.phaseDecimal})\n\n    body.position.withinQuarterApproximation = Luna.GetWithinQuarterApproximation({\n      quarterIndex: body.position.phaseQuarter,\n      phaseDaysBefore: body.position.phaseDaysBefore,\n      phaseDaysPast: body.position.phaseDaysPast,\n      halfRangeLength: this.quarterApproximationValue\n    })\n    body.position.quarterApproximationString = Luna.GetQuarterApproximationString({\n      quarterIndex: body.position.phaseQuarter,\n      phaseDaysBefore: body.position.phaseDaysBefore,\n      phaseDaysPast: body.position.phaseDaysPast,\n      halfRangeLength: this.quarterApproximationValue\n    })\n\n    body.position.quarterApproximationDirectionString = Luna.GetQuarterApproximationDirectionString({\n      phaseDaysBefore: body.position.phaseDaysBefore,\n      phaseDaysPast: body.position.phaseDaysPast,\n      halfRangeLength: this.quarterApproximationValue\n    })\n\n  \tbody.position.apparent = {\n  \t\tdRA: this.ra,\n  \t\tdDec: this.dec,\n  \t\tra: _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].hms (this.ra),\n  \t\tdec: _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].dms (this.dec)\n  \t};\n\n  \t/* Compute and display topocentric position (altaz.c)\n  \t */\n  \tpp[0] = this.ra;\n  \tpp[1] = this.dec;\n  \tpp[2] = moonpol[2];\n  \tbody.position.altaz = _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__[\"altaz\"].calc(pp, observer.Date, body, observer);\n\n    return body\n  }\n\n  calcll(julianDate, rect, pol, body, earthBody, observer, result) {\n  \tvar cosB, sinB, cosL, sinL, y, z; // double\n  \tvar qq = [], pp = []; // double\n  \tvar i; // int\n\n  \tresult = result || {};\n\n  \t/* Compute obliquity of the ecliptic, coseps, and sineps.  */\n  \tconst epsilonObject = new _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_3__[\"default\"](julianDate);\n  \t/* Get geometric coordinates of the Moon.  */\n    const lp_equinox = Object(_utilities_gplan__WEBPACK_IMPORTED_MODULE_4__[\"get_lp_equinox\"])(julianDate)\n  \trect = Object(_utilities_gplan__WEBPACK_IMPORTED_MODULE_4__[\"gPlanMoon\"])(julianDate, rect, pol, lp_equinox);\n  \t/* Post the geometric ecliptic longitude and latitude, in radians,\n  \t * and the radius in au.\n  \t */\n  \tbody.position.polar[0] = pol[0];\n  \tbody.position.polar[1] = pol[1];\n  \tbody.position.polar[2] = pol[2];\n  \t/* Light time correction to longitude,\n  \t * about 0.7\".\n  \t */\n  \tpol[0] -= 0.0118 * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"REARTH\"] / pol[2];\n\n  \t/* convert to equatorial system of date */\n  \tcosB = Math.cos(pol[1]);\n  \tsinB = Math.sin(pol[1]);\n  \tcosL = Math.cos(pol[0]);\n  \tsinL = Math.sin(pol[0]);\n  \trect[0] = cosB*cosL;\n  \trect[1] = epsilonObject.coseps*cosB*sinL - epsilonObject.sineps*sinB;\n  \trect[2] = epsilonObject.sineps*cosB*sinL + epsilonObject.coseps*sinB;\n\n  \t/* Rotate to J2000. */\n  \trect = _utilities_precess__WEBPACK_IMPORTED_MODULE_6__[\"precess\"].calc( rect, observer.Date.julian, 1 ); // TDT\n\n  \t/* Find Euclidean vectors and angles between earth, object, and the sun\n  \t */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tpp[i] = rect[i] * pol[2];\n  \t\tqq[i] = earthBody.position.rect [i] + pp[i];\n  \t}\n  \tbody = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].angles (pp, qq, earthBody.position.rect, body);\n\n  \t/* Make rect a unit vector.  */\n  \t/* for (i = 0; i < 3; i++) */\n  \t/*  rect[i] /= EO; */\n\n  \t/* Correct position for light deflection.\n  \t (Ignore.)  */\n  \t/* relativity( rect, qq, rearth ); */\n\n  \t/* Aberration of light.\n  \t The Astronomical Almanac (Section D, Daily Polynomial Coefficients)\n  \t seems to omit this, even though the reference ephemeris is inertial.  */\n  \t/* annuab (rect); */\n\n  \t/* Precess to date.  */\n  \trect = _utilities_precess__WEBPACK_IMPORTED_MODULE_6__[\"precess\"].calc(rect, observer.Date.julian, -1); // TDT\n\n  \t/* Correct for nutation at date TDT.\n  \t */\n    const nutationObject = _utilities_nutation__WEBPACK_IMPORTED_MODULE_7__[\"nutation\"].getObject({julian: observer.Date.julian})\n  \tresult.nutation = _utilities_nutation__WEBPACK_IMPORTED_MODULE_7__[\"nutation\"].calc ({julian: observer.Date.julian}, rect); // TDT\n\n  \t/* Apparent geocentric right ascension and declination.  */\n  \tthis.ra = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].zatan2(rect[0],rect[1]);\n  \tthis.dec = Math.asin(rect[2]);\n\n  \t/* For apparent ecliptic coordinates, rotate from the true\n  \t equator into the ecliptic of date.  */\n\n  \tcosL = Math.cos(epsilonObject.eps + nutationObject.nuto);\n  \tsinL  = Math.sin(epsilonObject.eps + nutationObject.nuto);\n  \ty = cosL * rect[1] + sinL * rect[2];\n  \tz = -sinL * rect[1] + cosL * rect[2];\n  \tpol[0] = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].zatan2( rect[0], y );\n  \tpol[1] = Math.asin(z);\n\n  \t/* Restore earth-moon distance.  */\n  \tfor( i=0; i<3; i++ ) {\n  \t\trect[i] *= body.locals.EO;\n  \t}\n\n  \treturn result;\n  }\n\n  calculateOrbit(julianDate) {\n    const orbit = {}\n\n    orbit.meanAscendingNode = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].attachApparentLongitudes({}, Object(_utilities_luna__WEBPACK_IMPORTED_MODULE_9__[\"getMeanAscendingNode\"])(julianDate))\n    orbit.meanDescendingNode = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].attachApparentLongitudes({}, _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(orbit.meanAscendingNode.apparentLongitude - 180, 360))\n\n    orbit.meanPerigee = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].attachApparentLongitudes({}, Object(_utilities_luna__WEBPACK_IMPORTED_MODULE_9__[\"getMeanPerigee\"])(julianDate))\n    orbit.meanApogee = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].attachApparentLongitudes({}, _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(orbit.meanPerigee.apparentLongitude - 180, 360))\n\n    return orbit\n  }\n\n  calculateMeanAscendingNode(julianDate) {\n    const meanAscendingNode = {}\n\n    meanAscendingNode.apparentLongitude = Object(_utilities_luna__WEBPACK_IMPORTED_MODULE_9__[\"getMeanAscendingNode\"])(julianDate)\n    meanAscendingNode.apparentLongitudeString = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].decimalDegreesToDMSString(meanAscendingNode.apparentLongitude)\n    meanAscendingNode.apparentLongitude30String = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].decimalDegreesToDMSString(_utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(meanAscendingNode.apparentLongitude, 30))\n\n    return meanAscendingNode\n  }\n\n  calculateMeanDescendingNode(ascendingNode) {\n    const meanDescendingNode = {}\n\n    meanDescendingNode.apparentLongitude = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(ascendingNode - 180, 360)\n    meanDescendingNode.apparentLongitudeString = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].decimalDegreesToDMSString(meanDescendingNode.apparentLongitude)\n    meanDescendingNode.apparentLongitude30String = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].decimalDegreesToDMSString(_utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod(meanDescendingNode.apparentLongitude, 30))\n\n    return meanDescendingNode\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Luna.js?");

/***/ }),

/***/ "./src/classes/Observer.js":
/*!*********************************!*\
  !*** ./src/classes/Observer.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Observer; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _utilities_julian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/julian */ \"./src/utilities/julian.js\");\n/* harmony import */ var _utilities_DateDelta__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/DateDelta */ \"./src/utilities/DateDelta.js\");\n/* harmony import */ var _utilities_validators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/validators */ \"./src/utilities/validators.js\");\n\n\n\n\n\n\nclass Observer {\n  constructor({\n    latitude = 0.00, longitude = 0.00, height = 0.00,\n    year=0, month=0, day=0, hours=0, minutes=0, seconds=0\n  }={}) {\n    // Assumes UTC time\n    // * int year (> 0 C.E.)\n    // * int month (0 - 11 || 0 = January, 11 = December)\n    // * int day (1 - 31)\n    // * int hours (0 - 23)\n    // * int minutes (0 - 59)\n    // * int seconds (0 - 59)\n    // * float latitude (-90 - +90)\n    // * float longitude (-180 - +180)\n    // * float height\n    // * string OR array[string] key - ex: pass in \"venus\" or [\"mercury\", \"venus\"] or leave blank for all\n\n    this.year = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateYear\"])(year)\n    this.month = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateMonth\"])(month) // Reconcile month to use 1 - 12 range with legacy code\n    this.day = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateDate\"])(day)\n    this.hours = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateHour\"])(hours)\n    this.minutes = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateMinute\"])(minutes)\n    this.seconds = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateSecond\"])(seconds)\n    this.latitude = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateLatitude\"])(latitude)\n    this.longitude = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateLongitude\"])(longitude)\n    this.height = Object(_utilities_validators__WEBPACK_IMPORTED_MODULE_3__[\"validateNumber\"])(height)\n\n    this.glat = latitude // geodetic latitude\n    this.tlat // calculated geocentric latitude\n    this.tlong = longitude\n    this.trho // calculated\n    this.height = height\n    this.attemp = 12.0,\t/* atmospheric temperature, degrees Centigrade */ // input for kinit\n    this.atpress = 1010.0, /* atmospheric pressure, millibars */ // input for kinit\n\n    this.initialize = this.initialize.bind(this)\n    this.CalculateDates = this.CalculateDates.bind(this)\n\n    this.initialize()\n\n    this.Date = this.CalculateDates()\n  }\n\n  initialize() {\n    // assigns tlat and trho\n    /* Reduction from geodetic latitude to geocentric latitude\n    * AA page K5\n    */\n    let a, b, fl, co, si, u; // double\n\n    u = this.glat * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\n    co = Math.cos(u);\n    si = Math.sin(u);\n    fl = 1.0 - 1.0 / _constants__WEBPACK_IMPORTED_MODULE_0__[\"FLAT\"];\n    fl = fl*fl;\n    si = si*si;\n    u = 1.0/Math.sqrt( co*co + fl*si );\n    a = _constants__WEBPACK_IMPORTED_MODULE_0__[\"AEARTH\"]*u + this.height;\n    b = _constants__WEBPACK_IMPORTED_MODULE_0__[\"AEARTH\"]*fl*u  +  this.height;\n\n    this.trho = Math.sqrt( a*a*co*co + b*b*si );\n    this.tlat = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * Math.acos( a*co/this.trho );\n\n    if( this.glat < 0.0 ) {\n      this.tlat = -this.tlat;\n    }\n\n    this.trho /= _constants__WEBPACK_IMPORTED_MODULE_0__[\"AEARTH\"];\n  }\n\n  CalculateDates() {\n    const dateObject = { year: this.year, month: this.month, day: this.day, hours: this.hours, minutes: this.minutes, seconds: this.seconds }\n    let date = {}\n    date.utc = new Date(Date.UTC(this.year, this.month, this.day, this.hours, this.minutes, this.seconds))\n    date.dateString = date.utc.toDateString()\n    date.julian = _utilities_julian__WEBPACK_IMPORTED_MODULE_1__[\"julian\"].calcJulianDate({...dateObject, month: dateObject.month + 1}), // month + 1 for formula\n    date.j2000 = _utilities_julian__WEBPACK_IMPORTED_MODULE_1__[\"julian\"].calcJ2000(date.julian),\n    date.b1950 = _utilities_julian__WEBPACK_IMPORTED_MODULE_1__[\"julian\"].calcB1950(date.julian),\n    date.j1900 = _utilities_julian__WEBPACK_IMPORTED_MODULE_1__[\"julian\"].calcJ1900(date.julian),\n    date.universalJulian = new _utilities_DateDelta__WEBPACK_IMPORTED_MODULE_2__[\"default\"]().CalcUniversal(date.julian, date.j2000)\n    date.universalDate = _utilities_julian__WEBPACK_IMPORTED_MODULE_1__[\"julian\"].calcUniversalDate(date.universalJulian)\n\n    return date\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Observer.js?");

/***/ }),

/***/ "./src/classes/Sol.js":
/*!****************************!*\
  !*** ./src/classes/Sol.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Sol; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _constants_celestialBodies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/celestialBodies */ \"./src/constants/celestialBodies.js\");\n/* harmony import */ var _Earth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Earth */ \"./src/classes/Earth.js\");\n/* harmony import */ var _utilities_altaz__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/altaz */ \"./src/utilities/altaz.js\");\n/* harmony import */ var _utilities_constellation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/constellation */ \"./src/utilities/constellation.js\");\n/* harmony import */ var _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _utilities_lonlat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/lonlat */ \"./src/utilities/lonlat.js\");\n/* harmony import */ var _utilities_kepler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/kepler */ \"./src/utilities/kepler.js\");\n/* harmony import */ var _utilities_nutation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/nutation */ \"./src/utilities/nutation.js\");\n/* harmony import */ var _utilities_precess__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/precess */ \"./src/utilities/precess.js\");\n/* harmony import */ var _utilities_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/util */ \"./src/utilities/util.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass Sol {\n  constructor(body, earthBody, observer) {\n    this._body = this.calculateBody(body, earthBody, observer)\n\n    Object.keys(this._body).forEach(key => {\n      this[key] = this._body[key]\n    })\n\n    this.calculateBody = this.calculateBody.bind(this)\n  }\n\n  calculateBody(body, earthBody, observer) {\n  \tvar r, x, y, t; // double\n  \tvar ecr = [], rec = [], pol = []; // double\n  \tvar i; // int\n  \tvar d;\n  \t//double asin(), modtp(), sqrt(), cos(), sin();\n\n  \tbody.position = body.position || {};\n\n  \t/* Display ecliptic longitude and latitude.\n  \t */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tecr[i] = - earthBody.position.rect[i];//-rearth[i];\n  \t}\n  \tr = earthBody.position.polar[2]; //eapolar [2];\n\n  \tbody.position.equinoxEclipticLonLat = _utilities_lonlat__WEBPACK_IMPORTED_MODULE_6__[\"lonlat\"].calc(ecr, observer.Date, pol, 1); // TDT\n\n  \t/* Philosophical note: the light time correction really affects\n  \t * only the Sun's barymetric position; aberration is due to\n  \t * the speed of the Earth.  In Newtonian terms the aberration\n  \t * is the same if the Earth is standing still and the Sun moving\n  \t * or vice versa.  Thus the following is actually wrong, but it\n  \t * differs from relativity only in about the 8th decimal.\n  \t * It should be done the same way as the corresponding planetary\n  \t * correction, however.\n  \t */\n  \tpol[2] = r;\n    let earthTDT = new _Earth__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({..._constants_celestialBodies__WEBPACK_IMPORTED_MODULE_1__[\"celestialBodies\"].find(b => b.key === 'earth')}, observer.Date) // clone to prevent mutation\n  \tfor( i=0; i<2; i++ ) {\n  \t\tt = pol [2] / 173.1446327;\n  \t\t/* Find the earth at time TDT - t */\n  \t\tearthTDT = _utilities_kepler__WEBPACK_IMPORTED_MODULE_7__[\"kepler\"].calc(observer.Date.julian - t, earthTDT, ecr, pol );\n  \t}\n  \tr = pol[2];\n\n  \tfor( i=0; i<3; i++ ) {\n  \t\tx = -ecr[i];\n  \t\ty = - earthTDT.position.rect[i]; //-rearth[i];\n  \t\tecr[i] = x;\t/* position t days ago */\n  \t\trec[i] = y;\t/* position now */\n  \t\tpol[i] = y - x; /* change in position */\n  \t}\n\n  \tbody.position = {...body.position, ...{\n  \t\tlightTime: 1440.0*t,\n  \t\taberration: _utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].showcor(ecr, pol)\n  \t}};\n\n  \t/* Estimate rate of change of RA and Dec\n  \t * for use by altaz().\n  \t */\n\n  \td = _utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].deltap( ecr, rec);  /* see dms.c */\n  \tbody.locals.dradt = d.dr;\n  \tbody.locals.ddecdt = d.dd;\n  \tbody.locals.dradt /= t;\n  \tbody.locals.ddecdt /= t;\n\n  \t/* There is no light deflection effect.\n  \t * AA page B39.\n  \t */\n\n  \t/* precess to equinox of date\n  \t */\n  \tecr = _utilities_precess__WEBPACK_IMPORTED_MODULE_9__[\"precess\"].calc( ecr, observer.Date.julian, -1);\n\n  \tfor( i=0; i<3; i++ ) {\n  \t\trec[i] = ecr[i];\n  \t}\n\n  \t/* Nutation.\n  \t */\n  \tlet epsilonObject = new _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_5__[\"default\"](observer.Date.julian);\n    let nutationObject = _utilities_nutation__WEBPACK_IMPORTED_MODULE_8__[\"nutation\"].getObject(observer.Date)\n    _utilities_nutation__WEBPACK_IMPORTED_MODULE_8__[\"nutation\"].calc(observer.Date, ecr); // NOTE nutation mutates the nutation object AND returns a result.\n\n  \t/* Display the final apparent R.A. and Dec.\n  \t * for equinox of date.\n  \t */\n  \tbody.position.constellation = _utilities_constellation__WEBPACK_IMPORTED_MODULE_4__[\"constellation\"].calc(ecr, observer.Date);\n\n  \tbody.position.apparent = _utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].showrd(ecr, pol);\n\n  \t/* Show it in ecliptic coordinates */\n  \ty  =  epsilonObject.coseps * rec[1]  +  epsilonObject.sineps * rec[2];\n  \ty = _utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].zatan2( rec[0], y ) + nutationObject.nutl;\n  \tbody.position.apparentLongitude = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * y;\n  \tvar dmsLongitude = _utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].dms (y);\n  \tbody.position.apparentLongitudeString =\n  \t\tdmsLongitude.degree + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.apparentLongitude30String =\n  \t\t_utilities_util__WEBPACK_IMPORTED_MODULE_10__[\"util\"].mod30 (dmsLongitude.degree) + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.geocentricDistance = -1;\n\n  \t/* Report altitude and azimuth\n  \t */\n  \tbody.position.altaz = _utilities_altaz__WEBPACK_IMPORTED_MODULE_3__[\"altaz\"].calc( pol, observer.Date, body, observer );\n\n    return body\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Sol.js?");

/***/ }),

/***/ "./src/classes/Star.js":
/*!*****************************!*\
  !*** ./src/classes/Star.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Star; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/aberration */ \"./src/utilities/aberration.js\");\n/* harmony import */ var _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/altaz */ \"./src/utilities/altaz.js\");\n/* harmony import */ var _utilities_Epsilon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _utilities_deflection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/deflection */ \"./src/utilities/deflection.js\");\n/* harmony import */ var _utilities_fk4fk5__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/fk4fk5 */ \"./src/utilities/fk4fk5.js\");\n/* harmony import */ var _utilities_nutation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/nutation */ \"./src/utilities/nutation.js\");\n/* harmony import */ var _utilities_precess__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/precess */ \"./src/utilities/precess.js\");\n/* harmony import */ var _utilities_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/util */ \"./src/utilities/util.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass Star {\n  constructor(body, earthBody, observer) {\n    this._body = this.calculateBody(body, earthBody, observer)\n\n    Object.keys(this._body).forEach(key => {\n      this[key] = this._body[key]\n    })\n\n    this.prepareBody = this.prepareBody.bind(this)\n    this.calculateBody = this.calculateBody.bind(this)\n    this.reduceBody = this.reduceBody.bind(this)\n  }\n\n  prepareBody(body) {\n  \tvar sign; // int\n  \tvar s; // char array\n  \tvar x, z; // double\n  \tvar p; // char array\n  \tvar i; // int\n\n  \t/* Read in the ASCII string data and name of the object\n  \t */\n  //\tsscanf( s, \"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %s\",\n  //\t\t&body->epoch, &rh, &rm, &rs, &dd, &dm, &ds,\n  //\t&body->mura, &body->mudec, &body->v, &body->px, &body->mag, &body->obname[0] );\n\n  \tx = body.epoch;\n  \tif( x == 2000.0 ) {\n  \t\tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"];\n  \t} else if( x == 1950.0 ) {\n  \t\tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"];\n  \t} else if( x == 1900.0 ) {\n  \t\tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"J1900\"];\n  \t} else {\n  \t\tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]  +  365.25 * (x - 2000.0);\n  \t}\n  \tbody.epoch = x;\n\n  \t/* read the right ascension */\n  \tif (!body.ra) {\n  \t\tbody.ra = 2.0 * Math.PI * (3600.0*body.hmsRa.hours + 60.0*body.hmsRa.minutes + body.hmsRa.seconds)/86400.0;\n  \t}\n\n  \t/* read the declination */\n  \tif (!body.dec) {\n  \t\tsign = 1;\n\n  \t\t/* the '-' sign may appaer at any part of hmsDec */\n  \t\tif ( (body.hmsDec.hours < 0.0) || (body.hmsDec.minutes < 0.0) || (body.hmsDec.seconds < 0.0) ) {\n  \t\t\tsign = -1;\n  \t\t}\n  \t\tz = (3600.0*Math.abs(body.hmsDec.hours) + 60.0*Math.abs(body.hmsDec.minutes) + Math.abs(body.hmsDec.seconds)) / _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"];\n  \t\tif( sign < 0 ) {\n  \t\t\tz = -z;\n  \t\t}\n  \t\tbody.dec = z;\n  \t}\n\n  \tbody.raMotion *= 15.0/_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"];\t/* s/century -> \"/century -> rad/century */\n  \tbody.decMotion /= _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"];\n  \tz = body.parallax;\n  \tif( z < 1.0 ) {\n  \t\tif( z <= 0.0 ) {\n  \t\t\tbody.parallax = 0.0;\n  \t\t} else {\n  \t\t\tbody.parallax = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * z;  /* assume px in arc seconds */\n  \t\t}\n  \t} else {\n  \t\tbody.parallax = 1.0/(_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * z);\t/* parsecs -> radians */\n  \t}\n\n    return body\n  }\n\n  calculateBody(body, earthBody, observer) {\n\t\tbody = this.prepareBody(body);\n\t\tbody.isPrepared = true;\n  \treturn this.reduceBody(body, earthBody, observer);\n  }\n\n  reduceBody(body, earthBody, observer) {\n  \tvar p = [], q = [], e = [], m = [], temp = [], polar = []; // double\n  \tvar T, vpi, epoch; // double\n  \tvar cosdec, sindec, cosra, sinra; // double\n  \tvar i; // int\n\n  \t/* Convert from RA and Dec to equatorial rectangular direction\n  \t */\n  // loop:\n  \tdo {\n  \t\tcosdec = Math.cos( body.dec );\n  \t\tsindec = Math.sin( body.dec );\n  \t\tcosra = Math.cos( body.ra );\n  \t\tsinra = Math.sin( body.ra );\n  \t\tq[0] = cosra * cosdec;\n  \t\tq[1] = sinra * cosdec;\n  \t\tq[2] = sindec;\n\n  \t\t/* space motion */\n  \t\tvpi = 21.094952663 * body.velocity * body.parallax;\n  \t\tm[0] = -body.raMotion * cosdec * sinra\n  \t\t\t- body.decMotion * sindec * cosra\n  \t\t\t+       vpi * q[0];\n\n  \t\tm[1] = body.raMotion * cosdec * cosra\n  \t\t\t- body.decMotion * sindec * sinra\n  \t\t\t+ vpi * q[1];\n\n  \t\tm[2] = body.decMotion * cosdec\n  \t\t\t+ vpi * q[2];\n\n  \t\tepoch = body.epoch;\n\n  \t\t/* Convert FK4 to FK5 catalogue */\n  \t\tif( epoch == _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"] ) {\n  \t\t\tbody = _utilities_fk4fk5__WEBPACK_IMPORTED_MODULE_5__[\"fk4fk5\"].calc ( q, m, body);\n  \t\t\t//goto loop;\n  \t\t}\n  \t} while (epoch == _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"]);\n\n  \tfor( i=0; i<3; i++ ) {\n  \t\te[i] = earthBody.position.rect[i];\n  \t}\n\n  \t/* precess the earth to the star epoch */\n    e = _utilities_precess__WEBPACK_IMPORTED_MODULE_7__[\"precess\"].calc ( e, epoch, -1 );\n\n  \t/* Correct for proper motion and parallax\n  \t */\n  \tT = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].timeInJulianCenturies(observer.Date.julian)\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] = q[i]  +  T * m[i]  -  body.parallax * e[i];\n  \t}\n\n  \t/* precess the star to J2000 */\n  \tp = _utilities_precess__WEBPACK_IMPORTED_MODULE_7__[\"precess\"].calc (p, epoch, 1 );\n  \t/* reset the earth to J2000 */\n  \tfor( i=0; i<3; i++ ) {\n  \t\te[i] = earthBody.position.rect [i];\n  \t}\n\n  \t/* Find Euclidean vectors between earth, object, and the sun\n  \t * angles( p, q, e );\n  \t */\n  \t body = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].angles( p, p, e,  body );\n\n  \t/* Find unit vector from earth in direction of object\n  \t */\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] /= body.locals.EO;\n  \t\ttemp[i] = p[i];\n  \t}\n\n  \tbody.position = {};\n  \tbody.position.approxVisualMagnitude = body.magnitude;\n\n  \t/* Report astrometric position\n  \t */\n  \tbody.position.astrimetricJ2000 = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].showrd ( p, polar );\n\n  \t/* Also in 1950 coordinates\n  \t */\n  \ttemp = _utilities_precess__WEBPACK_IMPORTED_MODULE_7__[\"precess\"].calc ( temp, _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"], -1 );\n\n  \tbody.position.astrimetricB1950 = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].showrd (temp, polar);\n\n  \t/* For equinox of date: */\n  \tfor( i=0; i<3; i++ ) {\n  \t\ttemp[i] = p[i];\n  \t}\n\n  \ttemp = _utilities_precess__WEBPACK_IMPORTED_MODULE_7__[\"precess\"].calc ( temp, observer.Date.julian, -1 );\n  \tbody.position.astrimetricDate = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].showrd (temp, polar);\n\n  \t/* Correct position for light deflection\n  \t * relativity( p, q, e );\n  \t */\n  \tbody.position.deflection = _utilities_deflection__WEBPACK_IMPORTED_MODULE_4__[\"deflection\"].calc ( p, p, e, body ); // relativity\n\n  \t/* Correct for annual aberration\n  \t */\n  \tbody.position.aberration = _utilities_aberration__WEBPACK_IMPORTED_MODULE_1__[\"aberration\"].calc(p, earthBody, observer, body);\n\n  \t/* Precession of the equinox and ecliptic\n  \t * from J2000.0 to ephemeris date\n  \t */\n  \tp = _utilities_precess__WEBPACK_IMPORTED_MODULE_7__[\"precess\"].calc ( p, observer.Date.julian, -1 );\n\n  \t/* Ajust for nutation\n  \t * at current ecliptic.\n  \t */\n\n  \t// const epsilonObject = new Epsilon( observer.Date.julian); // NOTE - has no effect on result\n  \t_utilities_nutation__WEBPACK_IMPORTED_MODULE_6__[\"nutation\"].calc(observer.Date, p); // NOTE mutates p\n\n  \t/* Display the final apparent R.A. and Dec.\n  \t * for equinox of date.\n  \t */\n  \tbody.position.apparent = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].showrd(p, polar);\n\n  \t// prepare for display\n  \tbody.position.apparentLongitude = body.position.apparent.dRA;\n  \tvar dmsLongitude = _utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].dms(body.position.apparentLongitude);\n  \tbody.position.apparentLongitudeString =\n  \t\tdmsLongitude.degree + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.apparentLongitude30String =\n  \t\t_utilities_util__WEBPACK_IMPORTED_MODULE_8__[\"util\"].mod30 (dmsLongitude.degree) + '\\u00B0' +\n  \t\tdmsLongitude.minutes + '\\'' +\n  \t\tMath.floor (dmsLongitude.seconds) + '\"'\n  \t;\n\n  \tbody.position.geocentricDistance = 7777;\n\n  \t/* Go do topocentric reductions.\n  \t */\n  \tbody.locals.dradt = 0.0;\n  \tbody.locals.ddecdt = 0.0;\n  \tpolar [2] = 1.0e38; /* make it ignore diurnal parallax */\n\n  \tbody.position.altaz = _utilities_altaz__WEBPACK_IMPORTED_MODULE_2__[\"altaz\"].calc ( polar, observer.Date, body, observer);\n\n    return body\n  }\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/classes/Star.js?");

/***/ }),

/***/ "./src/constants/celestialBodies.js":
/*!******************************************!*\
  !*** ./src/constants/celestialBodies.js ***!
  \******************************************/
/*! exports provided: celestialBodies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"celestialBodies\", function() { return celestialBodies; });\n/* harmony import */ var _ptables_mercury__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ptables/mercury */ \"./src/ptables/mercury.js\");\n/* harmony import */ var _ptables_venus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ptables/venus */ \"./src/ptables/venus.js\");\n/* harmony import */ var _ptables_earth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ptables/earth */ \"./src/ptables/earth.js\");\n/* harmony import */ var _ptables_mars__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ptables/mars */ \"./src/ptables/mars.js\");\n/* harmony import */ var _ptables_jupiter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ptables/jupiter */ \"./src/ptables/jupiter.js\");\n/* harmony import */ var _ptables_saturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ptables/saturn */ \"./src/ptables/saturn.js\");\n/* harmony import */ var _ptables_uranus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ptables/uranus */ \"./src/ptables/uranus.js\");\n/* harmony import */ var _ptables_neptune__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ptables/neptune */ \"./src/ptables/neptune.js\");\n/* harmony import */ var _ptables_pluto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ptables/pluto */ \"./src/ptables/pluto.js\");\n/**\n *\n * body definition {\n *\n *\t// body\n *\tepoch:\t\t\tepoch = epoch of orbital elements\n *\tinclination:\ti = inclination\n *\tnode:\t\t\tW = longitude of the ascending node\n *\tperihelion:\t\tw = argument of the perihelion\n *\tsemiAxis:\t\ta = mean distance (semimajor axis), if 0.0 then = perihelionDistance / (1 - eccentricity)\n *\tdailyMotion:\tdm = daily motion, if 0.0 will be calculated\n *\teccentricity:\tecc = eccentricity\n *\tanomaly:\t\tM = mean anomaly\n *\tequinox:\t\tequinox = epoch of equinox and ecliptic in julian\n *\tmagnitude: \t\tmag = visual magnitude at 1AU from earth and sun\n *\tsemiDiameter:\tsdiam = equatorial semidiameter at 1au, arc seconds\n *\tperihelionDistance: = perihelion distance\n *  // computed values\n *\tlongitude:\t\tL = computed mean longitude\n *\tdistance:\t\tr = computed radius vector\n *\tperturbation\tplat = perturbation in ecliptic latitude\n *\n *\t// star\n *\tra:\t\t\t\tra = right ascension, radians\n *\tdec:\t\t\tdec = declination, radians\n *\tparallax:\t\tpx = parallax, radians\n *\traMotion:\t\tmura = proper motion in R.A., rad/century\n *\tdecMotion:\t\tmudec = proper motion in Dec., rad/century\n *\tvelocity:\t\tv = radial velocity, km/s\n *\tequinox:\t\tequinox = epoch of equinox and ecliptic\n *\tmagnitude:\t\tmag = visual magnitude\n *\n *  // constellation\n *  index:\t\t\tindex of constellation (1-88)\n *  raLow:\t\t\tlower right ascension, in units of hours times 3600\n *  raHight:\t\tupper right ascension, in units of hours times 3600\n *  dec0:\t\t\tlower declination, in units of degrees times 3600\n *\n * }\n *\n */\n\n\n\n\n\n\n\n\n\n\n\nconst celestialBodies = [\n\t/**\n\t * Sun\n\t */\n\t{\n    key: 'sun',\n    type: 'sun',\n\t\tweight: 100\n\t},\n  /**\n\t * Moon\n\t */\n  {\n    key: 'moon',\n    type: 'luna',\n\t},\n\t/**\n\t * Planets\n\t */\n\t{\n    key: 'mercury',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 7.0048,\n\t\tnode: 48.177,\n\t\tperihelion: 29.074,\n\t\tsemiAxis: 0.387098,\n\t\tdailyMotion: 4.09236,\n\t\teccentricity: 0.205628,\n\t\tanomaly: 198.7199,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -0.42,\n\t\tsemiDiameter: 3.36,\n    ptable: _ptables_mercury__WEBPACK_IMPORTED_MODULE_0__[\"mercuryPTable\"]\n\t},\n\t{\n    key: 'venus',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 3.3946,\n\t\tnode: 76.561,\n\t\tperihelion: 54.889,\n\t\tsemiAxis: 0.723329,\n\t\tdailyMotion: 1.60214,\n\t\teccentricity: 0.006757,\n\t\tanomaly: 9.0369,\n\t\tequinox: 2446800.,\n\t\t/* Note the calculated apparent visual magnitude for Venus\n\t\t * is not very accurate.\n\t\t */\n\t\tmagnitude: -4.40,\n\t\tsemiDiameter: 8.34,\n    ptable: _ptables_venus__WEBPACK_IMPORTED_MODULE_1__[\"venusPTable\"]\n\t},\n\t{\n    key: 'earth',\n    type: 'heliocentric',\n    anomaly: 1.1791,\n    dailyMotion: 0.985611,\n    distance: 0.0, // computed\n    eccentricity: 0.016713,\n    epoch: 2446800.5, // 05.01.1987\n    equinox: 2446800.,\n\t\tinclination: 0.0,\n    longitude: 0.0, // computed\n    magnitude: -3.86,\n\t\tnode: 0.0,\n\t\tperihelion: 102.884,\n    perturbation: 0.0, // computed\n    ptable: _ptables_earth__WEBPACK_IMPORTED_MODULE_2__[\"earthPTable\"],\n\t\tsemiAxis: 0.999999,\n\t\tsemiDiameter: 0.0,\n\t},\n\t{\n    key: 'mars',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 1.8498,\n\t\tnode: 49.457,\n\t\tperihelion: 286.343,\n\t\tsemiAxis: 1.523710,\n\t\tdailyMotion: 0.524023,\n\t\teccentricity: 0.093472,\n\t\tanomaly: 53.1893,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -1.52,\n\t\tsemiDiameter: 4.68,\n    ptable: _ptables_mars__WEBPACK_IMPORTED_MODULE_3__[\"marsPTable\"]\n\t},\n\t{\n    key: 'jupiter',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 1.3051,\n\t\tnode: 100.358,\n\t\tperihelion: 275.129,\n\t\tsemiAxis: 5.20265,\n\t\tdailyMotion: 0.0830948,\n\t\teccentricity: 0.048100,\n\t\tanomaly: 344.5086,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -9.40,\n\t\tsemiDiameter: 98.44,\n    ptable: _ptables_jupiter__WEBPACK_IMPORTED_MODULE_4__[\"jupiterPTable\"]\n\t},\n\t{\n    key: 'saturn',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 2.4858,\n\t\tnode: 113.555,\n\t\tperihelion: 337.969,\n\t\tsemiAxis: 9.54050,\n\t\tdailyMotion: 0.0334510,\n\t\teccentricity: 0.052786,\n\t\tanomaly: 159.6327,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -8.88,\n\t\tsemiDiameter: 82.73,\n    ptable: _ptables_saturn__WEBPACK_IMPORTED_MODULE_5__[\"saturnPTable\"]\n\t},\n\t{\n    key: 'uranus',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 0.7738,\n\t\tnode: 73.994,\n\t\tperihelion: 98.746,\n\t\tsemiAxis: 19.2233,\n\t\tdailyMotion: 0.0116943,\n\t\teccentricity: 0.045682,\n\t\tanomaly: 84.8516,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -7.19,\n\t\tsemiDiameter: 35.02,\n    ptable: _ptables_uranus__WEBPACK_IMPORTED_MODULE_6__[\"uranusPTable\"]\n\t},\n\t{\n    key: 'neptune',\n    type: 'heliocentric',\n\t\tepoch: 2446800.5, // 05.01.1987\n\t\tinclination: 1.7697,\n\t\tnode: 131.677,\n\t\tperihelion: 250.623,\n\t\tsemiAxis: 30.1631,\n\t\tdailyMotion: 0.00594978,\n\t\teccentricity: 0.009019,\n\t\tanomaly: 254.2568,\n\t\tequinox: 2446800.,\n\t\tmagnitude: -6.87,\n\t\tsemiDiameter: 33.50,\n    ptable: _ptables_neptune__WEBPACK_IMPORTED_MODULE_7__[\"neptunePTable\"]\n\t},\n\t{\n    key: 'pluto',\n    type: 'heliocentric',\n\t\tepoch: 2446640.5,\n\t\tinclination: 17.1346,\n\t\tnode: 110.204,\n\t\tperihelion: 114.21,\n\t\tsemiAxis: 39.4633,\n\t\tdailyMotion: 0.00397570,\n\t\teccentricity: 0.248662,\n\t\tanomaly: 355.0554,\n\t\tequinox: 2446640.,\n\t\tmagnitude: -1.0,\n\t\tsemiDiameter: 2.07,\n    ptable: _ptables_pluto__WEBPACK_IMPORTED_MODULE_8__[\"plutoPTable\"]\n\t},\n\n\t/**\n\t * Comets and asteroids\n\t */\n\t{\n    key: 'chiron',\n    type: 'heliocentric',\n\t\tepoch: 2456000.5,\n\t\tinclination: 6.926651533484328,\n\t\tnode: 209.3851130617651,\n\t\tperihelion: 339.4595737215378,\n\t\tsemiAxis: 0.0, // will be calulated if 0.0\n\t\tdailyMotion: 0.0, // will be calculated\n\t\teccentricity: 0.3792037887546262,\n\t\tanomaly: 114.8798253094007,\n\t\tequinox: 2450109.234581196786,\n\t\tmagnitude: 6.5,\n\t\tsemiDiameter: 0.0,\n\t\tperihelionDistance: 8.486494269138399\n\t},\n\n\t/**\n\t * Stars (implemented, not tested)\n\t */\n\t{\n    key: 'sirius',\n    type: 'star',\n\t\tepoch: 2000,\n\t\thmsRa: {hours: 6, minutes: 45, seconds: 8.871},     // right ascension\n\t\thmsDec: {hours: -16, minutes: 42, seconds: 57.99},  // declination\n\t\traMotion: -3.847,\n\t\tdecMotion: -120.53,\n\t\tvelocity: -7.6,\n\t\tparallax: 0.3751,\n\t\tmagnitude: -1.46,\n\t\tra: 0.0,\n\t\tdec: 0.0,\n\t\tequinox: 0.0\n\t}\n];\n\n\n//# sourceURL=webpack://Ephemeris/./src/constants/celestialBodies.js?");

/***/ }),

/***/ "./src/constants/index.js":
/*!********************************!*\
  !*** ./src/constants/index.js ***!
  \********************************/
/*! exports provided: J2000, B1950, J1900, RTOH, EMRAT, DTR, RTD, RTS, STR, TPI, FLAT, AU, AEARTH, CLIGHT, CLIGHTAUD, REARTH, DISFAC, COSSUN, COSZEN, freqs, phases */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"J2000\", function() { return J2000; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B1950\", function() { return B1950; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"J1900\", function() { return J1900; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RTOH\", function() { return RTOH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EMRAT\", function() { return EMRAT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DTR\", function() { return DTR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RTD\", function() { return RTD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RTS\", function() { return RTS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STR\", function() { return STR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TPI\", function() { return TPI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FLAT\", function() { return FLAT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AU\", function() { return AU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AEARTH\", function() { return AEARTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CLIGHT\", function() { return CLIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CLIGHTAUD\", function() { return CLIGHTAUD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REARTH\", function() { return REARTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DISFAC\", function() { return DISFAC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COSSUN\", function() { return COSSUN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COSZEN\", function() { return COSZEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"freqs\", function() { return freqs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"phases\", function() { return phases; });\n/* Standard epochs.  Note Julian epochs (J) are measured in\n * years of 365.25 days.\n */\nconst J2000 = 2451545.0 /* 2000 January 1.5 */\nconst B1950 = 2433282.423 /* 1950 January 0.923 Besselian epoch */\nconst J1900 = 2415020.0 /* 1900 January 0, 12h UT */\nconst RTOH = 12.0 / Math.PI /* Radians to hours, minutes, seconds */\n\nconst EMRAT = 81.300585  /* Earth/Moon mass ratio.  */\n\n\n/* Conversion factors between degrees and radians */\nconst DTR = 1.7453292519943295769e-2\nconst RTD = 5.7295779513082320877e1\nconst RTS = 2.0626480624709635516e5 /* arc seconds per radian */\nconst STR = 4.8481368110953599359e-6 /* radians per arc second */\nconst TPI = 2.0 * Math.PI\n\n/* Distance from observer to center of earth, in earth radii\n */\nconst FLAT = 298.257222\nconst AU = 1.49597870691e8 /* Astronomical unit, in kilometers.  */\nconst AEARTH = 6378137  /* Radius of the earth, in meters.  */\nconst CLIGHT = 2.99792458e5  /* Speed of light, km/sec  */\nconst CLIGHTAUD = 86400.0 * CLIGHT / AU; /* C in au/day  */\n\n\n/* Radius of the earth in au\n Thanks to Min He <Min.He@businessobjects.com> for pointing out\n this needs to be initialized early.  */\nconst REARTH = 0.001 * AEARTH / AU; // calculated in kinit\n\n/* Earth radii per au */\nconst DISFAC = 2.3454780e4\n\n/* cosine of 90 degrees 50 minutes: */\nconst COSSUN = -0.014543897651582657\n/* cosine of 90 degrees 34 minutes: */\nconst COSZEN = -9.8900378587411476e-3\n\n/* From Simon et al (1994)  */\nconst freqs = [\n  /* Arc sec per 10000 Julian years.  */\n  53810162868.8982,\n  21066413643.3548,\n  12959774228.3429,\n  6890507749.3988,\n  1092566037.7991,\n  439960985.5372,\n  154248119.3933,\n  78655032.0744,\n  52272245.1795\n]\n\nconst phases = [\n  /* Arc sec.  */\n  252.25090552 * 3600.,\n  181.97980085 * 3600.,\n  100.46645683 * 3600.,\n  355.43299958 * 3600.,\n  34.35151874 * 3600.,\n  50.07744430 * 3600.,\n  314.05500511 * 3600.,\n  304.34866548 * 3600.,\n  860492.1546\n]\n\n\n//# sourceURL=webpack://Ephemeris/./src/constants/index.js?");

/***/ }),

/***/ "./src/ptables/earth.js":
/*!******************************!*\
  !*** ./src/ptables/earth.js ***!
  \******************************/
/*! exports provided: earthPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"earthPTable\", function() { return earthPTable; });\nconst earthPTable = {\n\tmaxargs: 12,\n\tmax_harmonic: [2, 11, 14, 19,  6, 10,  2,  2,  0,  1,  1,  4,  0,  0,  0,  0,  0,  0],\n\tmax_power_of_t: 3,\n\tdistance: 1.0001398729597080e+00,\n\ttimescale: 3.6525000000000000e+06,\n\ttrunclvl: 1.0000000000000000e-04,\n\tlon_tbl: [\n\t\t-242809, -178223, -6154, -6547,\n\t\t15526, -79460, 66185, -19531,\n\t\t-12754, 4389, 3153, -1151,\n\t\t768, 1750,\n\t\t-248, 657, -80, 0,\n\t\t-4, -29,\n\t\t-3020, 301, -360, 412,\n\t\t-1463, 2266,\n\t\t-41, 30,\n\t\t-39868, -14275, -25052, 1583,\n\t\t15695, 10018,\n\t\t-113, -122,\n\t\t-243, 18, -33, 31,\n\t\t-134, -171, 243, -115,\n\t\t18, 148,\n\t\t-120, -129, 19, -220,\n\t\t-30, 19,\n\t\t8, 23,\n\t\t-162, -124, 189, -315,\n\t\t73, 77,\n\t\t32006, -11295, 11595, 5629,\n\t\t-838, 1728,\n\t\t0, 4,\n\t\t38, 15,\n\t\t142, -228, 92, 32,\n\t\t-2274, -1500, -2277, 3143,\n\t\t3204, 127,\n\t\t-20, -11,\n\t\t5186, 1054, 996, 1769,\n\t\t-231, 163,\n\t\t-88, -19,\n\t\t-2, -145,\n\t\t-27, 48,\n\t\t-8, 421,\n\t\t-7, 148,\n\t\t-16, -2,\n\t\t-3964, 4259, -11192, -8385,\n\t\t11513, -13415,\n\t\t103, -43,\n\t\t-289, -79, -29, 163,\n\t\t-117, 559, -190, -15,\n\t\t7108, 5345, 12933, -7709,\n\t\t3485, -26023,\n\t\t11, -5,\n\t\t311, 78, 22, 76,\n\t\t2846, -3922, 2329, 43,\n\t\t34, 442,\n\t\t3, -245,\n\t\t-5, -3,\n\t\t-17, 5,\n\t\t318, 15963, 2520, 7115,\n\t\t2548, -9836,\n\t\t-7063, 1950, -4471, -8326,\n\t\t4964, -3101,\n\t\t563, -80, -1444, -472,\n\t\t8, -22,\n\t\t1558, -88, 235, 359,\n\t\t293, -16, 144, 209,\n\t\t-13, -7,\n\t\t812, -744, 150, -740,\n\t\t-2569, -956, 69, -2475,\n\t\t1009, -55,\n\t\t-1707, -2525, 1071, -1761,\n\t\t550, 279,\n\t\t-14, 36,\n\t\t-10442, 3344, -6759, -21551,\n\t\t24737, -434,\n\t\t504, -385, 191, 96,\n\t\t-2760, -1068, 85, -2617,\n\t\t1062, -43,\n\t\t192, -16, 30, 42,\n\t\t-2446, 588, -1522, -2933,\n\t\t1746, -1070,\n\t\t511, -1401, 139, 729,\n\t\t-12, 29,\n\t\t-2618, -2076, 2079, -3711,\n\t\t-21, -2727,\n\t\t-80, -19,\n\t\t113, 2420, 325, 1058,\n\t\t379, -1478,\n\t\t296, -251, -265, -409,\n\t\t-10, 20,\n\t\t15, -15,\n\t\t11, 143, -83, 19,\n\t\t266, -17, 40, 59,\n\t\t19, -105, 5, 48331,\n\t\t21, -16,\n\t\t-97, -318, 158, -171,\n\t\t456, -351, 168, 85,\n\t\t12, -2,\n\t\t20, -15,\n\t\t15, 2,\n\t\t385, -1125, 521, -23,\n\t\t-815, -2088, 1644, -1329,\n\t\t7, 14,\n\t\t-582, 234, -67, -467,\n\t\t-167, -51,\n\t\t-684, -2302, 1315, -797,\n\t\t6, -70,\n\t\t-118, -406, 67, -63,\n\t\t-4848, 3713, -8483, -8776,\n\t\t13049, -9404,\n\t\t-23, 34,\n\t\t-12, 1,\n\t\t-24, -10,\n\t\t-21, 0,\n\t\t-1, 24,\n\t\t-3, 28,\n\t\t-3032, -2494, 2498, -4342,\n\t\t-6538, 1899, -4414, -13249,\n\t\t15540, -292,\n\t\t-228, 176, -40, -161,\n\t\t-20, -36,\n\t\t-800, -172, -36, -208,\n\t\t-249, -374, -1410, -72118,\n\t\t-745, 213, -23, 196,\n\t\t-14, -2,\n\t\t-239, -341, 1015, -291,\n\t\t33, -94, 90, -20431,\n\t\t4, -39,\n\t\t75, 216, -23, 41,\n\t\t116, 24, 5, 26,\n\t\t-45, -4178,\n\t\t-9, -23,\n\t\t12, 18,\n\t\t68, -2,\n\t\t36, -19,\n\t\t42, -8,\n\t\t6, -106,\n\t\t4, -38,\n\t\t-73, 259, 107, -293,\n\t\t-12, -44, 37, 13,\n\t\t73, -46, 17, 8,\n\t\t5832, 1989, -1404, 4469,\n\t\t-1619, -743,\n\t\t-1796, -2206, 461, -291,\n\t\t153, 1104,\n\t\t19195, 652503, 5587, -5252787,\n\t\t47, -17340051, -32, 68926621,\n\t\t1054, -230, -1601, 356,\n\t\t-562, -998,\n\t\t124, -446, -171, 66,\n\t\t26, 60,\n\t\t-7, 0,\n\t\t-88, -43, 65, -400,\n\t\t4, 183,\n\t\t-1014, 2043, -1076, 126,\n\t\t-41, -205,\n\t\t-127, -85, -15, 68,\n\t\t0, 0,\n\t\t-320, 75, -42, 285,\n\t\t-303, 771, 616, 400,\n\t\t-470, 48, -76, -103,\n\t\t-190, -11,\n\t\t-139, -5, -48, -87,\n\t\t-22, -362, -271, 1233,\n\t\t-392, 353, -154, -71,\n\t\t-109, 112,\n\t\t17, 8,\n\t\t1, -17,\n\t\t-170, 623, -279, 21,\n\t\t139, -151, -107, -55199,\n\t\t588, -188, 397, 674,\n\t\t-406, 269,\n\t\t166, -207, 585, 333,\n\t\t-386, 754,\n\t\t29, -65,\n\t\t35, 10,\n\t\t63, 1291,\n\t\t62, 8,\n\t\t239, 1323, -1434, 53,\n\t\t19, -1,\n\t\t34, 82,\n\t\t-15, -16,\n\t\t265, -338, -729, -207,\n\t\t3, 17,\n\t\t697, 399, 274, 760,\n\t\t-12, 2,\n\t\t-48, -9,\n\t\t3, 64,\n\t\t147, 36, 9, 46,\n\t\t77, 144, -76, 65,\n\t\t2329, 1763, 987, 5506,\n\t\t66, -123, -41, -24,\n\t\t-12, 1,\n\t\t-19, 94,\n\t\t19, 8,\n\t\t-1, -18,\n\t\t142, 77, -78, 187,\n\t\t6, 18,\n\t\t607, 163, 17, 158,\n\t\t27, -208, 154, 27317,\n\t\t587, -143, 22, -153,\n\t\t5, -34,\n\t\t75, 330,\n\t\t98, -128, -67, -6542,\n\t\t-115, -236, 217, -12,\n\t\t10, -6,\n\t\t-250, 653, 1611, -209,\n\t\t4, 1072,\n\t\t-129, 216, 402, 81,\n\t\t117, 11,\n\t\t0, 20,\n\t\t24, -28,\n\t\t245, 437, -16, 59,\n\t\t527952, -74895, 169682, 177186,\n\t\t-376, -362869, -60, 719658,\n\t\t-151, -382, -22, -43,\n\t\t5, -5,\n\t\t14, 5,\n\t\t-9, 13,\n\t\t83, 296, -369, -1,\n\t\t-14, -6,\n\t\t42, 8,\n\t\t-31, 7,\n\t\t-354, 634, 1132, 243,\n\t\t-38, 42,\n\t\t-14, 68,\n\t\t-6, 31,\n\t\t-36, -13,\n\t\t7, -2104,\n\t\t16, 67,\n\t\t9, -4,\n\t\t174, 144, 58, 438,\n\t\t-15, 5,\n\t\t-16, 19,\n\t\t-135, 1642,\n\t\t-140, -11,\n\t\t-4, 27,\n\t\t253, -382, -651, -221,\n\t\t11, 1,\n\t\t-12, -6,\n\t\t136, 23,\n\t\t-1, 43,\n\t\t3, 38,\n\t\t-26, -5,\n\t\t17864, -4244, 5704, 7754,\n\t\t-36, -7891, -3, 10418,\n\t\t2, -844,\n\t\t-1, 126,\n\t\t-7, 32,\n\t\t-67, -5,\n\t\t39, 10,\n\t\t5, 52,\n\t\t-13, 159,\n\t\t-49, -21,\n\t\t1, -394,\n\t\t7, -15,\n\t\t-4, -245, 1, 172,\n\t\t-36, -3,\n\t\t13, 5,\n\t\t0, 1,\n\t\t-1, 0, 0, -202,\n\t\t-2, 19,\n\t\t-20, -2,\n\t\t5, 3,\n\t\t0, -110,\n\t\t-12, -1,\n\t\t0, -62,\n\t\t0, -36,\n\t\t0, -22,\n\t\t-13, 3\n\t],\n\tlat_tbl: [\n\t\t-428091, -488399, 746850, 6,\n\t\t210, -93, 32, 1,\n\t\t-365, 332, -105, 76,\n\t\t-7, 2,\n\t\t-8, 14, -1, 2,\n\t\t0, 0,\n\t\t-65, 12, -17, 7,\n\t\t-1, 1,\n\t\t0, 0,\n\t\t-15, 65, -4, 26,\n\t\t-2, 0,\n\t\t0, 0,\n\t\t0, 2, 0, 0,\n\t\t2, 2, 0, 0,\n\t\t0, 0,\n\t\t-1, -3, 0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-2, 0, 0, 0,\n\t\t-1, 0,\n\t\t-30, 28, -6, 10,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t2, 0, 0, 0,\n\t\t-16, 20, -6, -41,\n\t\t-9, -3,\n\t\t0, 0,\n\t\t-6, 2, 2, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-96, 33, -12, 228,\n\t\t-23, -21,\n\t\t0, 0,\n\t\t-12, -2, -4, 4,\n\t\t-1, 0, 1, 0,\n\t\t-329, -22, -34, -726,\n\t\t-147, -21,\n\t\t0, 0,\n\t\t-2, 4, -1, 0,\n\t\t2, -7, 0, 1,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t36, 88, -162, -19,\n\t\t-11, 21,\n\t\t31, 37, -31, 53,\n\t\t-5, -15,\n\t\t-3, -11, 9, 3,\n\t\t0, 0,\n\t\t-2, 0, 1, 0,\n\t\t2, -1, 0, 0,\n\t\t0, 0,\n\t\t-162, -102, -37, 30,\n\t\t19, 23, -18, 9,\n\t\t1, -6,\n\t\t-6, 22, -2, 3,\n\t\t1, -2,\n\t\t0, -1,\n\t\t26, -25, 66, 52,\n\t\t-641, -153,\n\t\t-13, -9, 2, -3,\n\t\t-29, 8, -6, -2,\n\t\t0, -6,\n\t\t2, -4, 1, 0,\n\t\t-26, -11, -1, -10,\n\t\t-6, -13,\n\t\t66, -1337, -879, -207,\n\t\t1, -1,\n\t\t8, -30, -24, -18,\n\t\t-16, 1,\n\t\t9, 1,\n\t\t-24, -8, 9, -17,\n\t\t-13, 75,\n\t\t19, -8, -29, 24,\n\t\t0, 0,\n\t\t-1, 1,\n\t\t-25, 36, -7, -22,\n\t\t0, -3, 1, -1,\n\t\t187, -46, -6, 74,\n\t\t5, -10,\n\t\t-5, -4, -16, 10,\n\t\t-5, -5, 2, -4,\n\t\t5, -2,\n\t\t-2, 1,\n\t\t-1, 0,\n\t\t-16, -12, 1, -13,\n\t\t-17, -111, -186, 73,\n\t\t-1, -2,\n\t\t-277, -77, -27, 106,\n\t\t16, 5,\n\t\t-12, -15, -13, -30,\n\t\t-1, 1,\n\t\t0, 36, -10, 4,\n\t\t607, 262, 533, -1530,\n\t\t-1630, 304,\n\t\t8, -6,\n\t\t1, 1,\n\t\t0, -1,\n\t\t5, -2,\n\t\t0, -1,\n\t\t-1, -4,\n\t\t-44, -22, -64, -46,\n\t\t537, 430, 268, -1553,\n\t\t-2040, -486,\n\t\t-3, -23, 20, 41,\n\t\t-1, 2,\n\t\t-21, -4, -1, -3,\n\t\t-84, 50, -177, 26,\n\t\t5, -12, 2, -4,\n\t\t7, 1,\n\t\t-115, -305, -310, 138,\n\t\t-186, 246, -96, 17,\n\t\t0, 0,\n\t\t4, -2, 1, 1,\n\t\t-3, 2, -1, 0,\n\t\t-15, 68,\n\t\t0, 2,\n\t\t-3, 0,\n\t\t-5, 0,\n\t\t-1, 1,\n\t\t-5, 6,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-235, -98, -2, 2,\n\t\t9, -40, -1, -2,\n\t\t-33, -9, -5, -4,\n\t\t5662, -3849, 1941, -124,\n\t\t210, 160,\n\t\t-24721, -72945, 4099, -21914,\n\t\t1345, -555,\n\t\t23637393, -5516830, 17737677, 43330654,\n\t\t-44668315, 14540723, -824, -2086,\n\t\t-4423, -41801, 5562, -11664,\n\t\t960, -125,\n\t\t2001, -149, 587, -350,\n\t\t23, -52,\n\t\t-3, 3,\n\t\t-248, -148, -40, 86,\n\t\t2, 0,\n\t\t21, -82, 11, 8,\n\t\t-8, 0,\n\t\t-30, -33, -22, 46,\n\t\t0, -191,\n\t\t-168, -135, 27, -85,\n\t\t14, 232, 217, 59,\n\t\t5, 12, -5, 2,\n\t\t-24, -26,\n\t\t-52, 13, -3, 18,\n\t\t26, 45, 32, -169,\n\t\t14, -6, -3, 4,\n\t\t-5, 2,\n\t\t6, 2,\n\t\t-2, 3,\n\t\t20, -15, 0, 10,\n\t\t-486, -8, 4, -114,\n\t\t102, -188, 23, -67,\n\t\t6, 12,\n\t\t-43, -1, -32, 2,\n\t\t15, 9,\n\t\t16, -36,\n\t\t-6, -2,\n\t\t14, -5,\n\t\t17, -15,\n\t\t-28, 307, 289, 69,\n\t\t2, -7,\n\t\t3, -1,\n\t\t-1, 1,\n\t\t-16, -811, 287, -68,\n\t\t0, 0,\n\t\t0, -1, 16, -7,\n\t\t0, 0,\n\t\t0, 2,\n\t\t0, 0,\n\t\t0, -1, 1, 0,\n\t\t-3, -4, 2, 3,\n\t\t-29, 34, 59, -15,\n\t\t-3, -3, -1, 0,\n\t\t-2, -3,\n\t\t3, -19,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-15, 1, 5, 2,\n\t\t0, 0,\n\t\t-1, -5, 0, -1,\n\t\t-120, 84, 7, -30,\n\t\t-7, -3, -1, 0,\n\t\t0, -1,\n\t\t9, -6,\n\t\t-186, -11, 13, -57,\n\t\t1, 4, 1, -1,\n\t\t0, 0,\n\t\t-5, 796, 46, 5,\n\t\t-1, -6,\n\t\t-10, 228, 5, -6,\n\t\t1, -5,\n\t\t0, 0,\n\t\t-6, -2,\n\t\t148, 137, 10, 28,\n\t\t430546, -279834, 488902, 664558,\n\t\t-746515, 243112, -39, -37,\n\t\t-13, -174, 6, -25,\n\t\t2, -3,\n\t\t-4, -2,\n\t\t0, 4,\n\t\t-5, 70, 82, 20,\n\t\t0, 1,\n\t\t1, 1,\n\t\t0, 1,\n\t\t-27, 430, 226, -53,\n\t\t1, 1,\n\t\t0, 1,\n\t\t1, -7,\n\t\t2, 1,\n\t\t-3, -8,\n\t\t1, 0,\n\t\t-1, 12,\n\t\t-2, -5, 4, 0,\n\t\t0, 1,\n\t\t1, 1,\n\t\t1, 9,\n\t\t33, 4,\n\t\t0, 0,\n\t\t0, -321, 4, 1,\n\t\t0, 0,\n\t\t1, 0,\n\t\t106, -22,\n\t\t0, 0,\n\t\t4, 0,\n\t\t0, 2,\n\t\t7006, -9443, 12833, 11137,\n\t\t-14037, 4575, -2, 0,\n\t\t-1, -6,\n\t\t1, 1,\n\t\t4, 6,\n\t\t16, 2,\n\t\t55, -10,\n\t\t1, 0,\n\t\t0, 1,\n\t\t0, 2,\n\t\t0, -4,\n\t\t-2, 0,\n\t\t-351, 24, 0, 0,\n\t\t8, 1,\n\t\t30, -5,\n\t\t-12, 10,\n\t\t-4, 1, -1, -2,\n\t\t0, 0,\n\t\t4, 0,\n\t\t17, -3,\n\t\t0, -2,\n\t\t2, 0,\n\t\t0, -1,\n\t\t0, -1,\n\t\t0, 0,\n\t\t0, 0\n\t],\n\trad_tbl: [\n\t\t14575, -26192, -144864, 2,\n\t\t-22, 15, -8, -21,\n\t\t-148, -104, -14, -75,\n\t\t15, 2,\n\t\t-5, -3, -1, 0,\n\t\t0, 0,\n\t\t0, 21, -2, 7,\n\t\t-5, -3,\n\t\t0, 0,\n\t\t83, -94, 9, -67,\n\t\t-29, 50,\n\t\t1, -1,\n\t\t3, 2, 0, 0,\n\t\t4, 3, 1, 1,\n\t\t-1, -1,\n\t\t0, -1, 2, -1,\n\t\t0, 1,\n\t\t0, 0,\n\t\t-2, 3, -5, -2,\n\t\t-1, 1,\n\t\t197, 511, -82, 189,\n\t\t-28, -12,\n\t\t0, 0,\n\t\t0, -1,\n\t\t6, -1, 0, 1,\n\t\t30, -30, -37, -25,\n\t\t6, 21,\n\t\t0, 0,\n\t\t16, -139, 43, -28,\n\t\t4, 6,\n\t\t0, 3,\n\t\t4, 0,\n\t\t1, 1,\n\t\t-13, 0,\n\t\t-4, 0,\n\t\t0, 1,\n\t\t150, 135, -291, 436,\n\t\t-560, -343,\n\t\t1, 3,\n\t\t8, -15, -13, -5,\n\t\t-17, -3, 1, -6,\n\t\t-314, 428, 606, 758,\n\t\t1230, -411,\n\t\t0, -1,\n\t\t11, -14, 4, 1,\n\t\t221, 157, 1, 132,\n\t\t-25, 3,\n\t\t12, 0,\n\t\t0, 0,\n\t\t0, -1,\n\t\t1487, -108, 707, -79,\n\t\t-950, -190,\n\t\t177, 582, -676, 399,\n\t\t-281, -396,\n\t\t0, 52, 39, -130,\n\t\t2, 1,\n\t\t12, 148, -34, 23,\n\t\t1, 27, -20, 13,\n\t\t1, -1,\n\t\t198, -34, -21, -80,\n\t\t-99, 332, -307, 9,\n\t\t-15, -125,\n\t\t330, -231, 236, 139,\n\t\t-36, 74,\n\t\t7, 3,\n\t\t-588, -1722, 3623, -1245,\n\t\t187, 4366,\n\t\t-72, -75, 11, -33,\n\t\t174, -467, 444, 9,\n\t\t11, 180,\n\t\t-6, -39, 8, -7,\n\t\t-126, -500, 599, -317,\n\t\t224, 355,\n\t\t-590, -39, 134, -379,\n\t\t-7, -3,\n\t\t494, -628, 893, 490,\n\t\t712, -7,\n\t\t-7, 35,\n\t\t-720, 50, -321, 72,\n\t\t443, 106,\n\t\t74, 82, 112, -84,\n\t\t-6, -3,\n\t\t5, 4,\n\t\t58, 7, -2, 38,\n\t\t6, 92, -20, 14,\n\t\t33, 13, -11189, -2,\n\t\t-11, -8,\n\t\t106, -35, 58, 52,\n\t\t132, 170, -32, 63,\n\t\t-2, -6,\n\t\t6, 7,\n\t\t-1, 6,\n\t\t452, 155, 9, 209,\n\t\t788, -318, 511, 616,\n\t\t-5, 3,\n\t\t142, 303, -280, 32,\n\t\t21, -69,\n\t\t984, -291, 340, 562,\n\t\t30, 2,\n\t\t171, -51, 27, 28,\n\t\t-1570, -2053, 3702, -3593,\n\t\t4012, 5467,\n\t\t-14, -9,\n\t\t-1, -6,\n\t\t4, -11,\n\t\t0, -9,\n\t\t-11, 0,\n\t\t15, 2,\n\t\t1133, -1366, 1961, 1134,\n\t\t-867, -3010, 6041, -2049,\n\t\t142, 7138,\n\t\t-79, -103, 73, -18,\n\t\t17, -9,\n\t\t79, -372, 97, -17,\n\t\t182, -118, 33577, -675,\n\t\t-99, -347, -91, -11,\n\t\t1, -7,\n\t\t158, -111, 136, 474,\n\t\t50, 16, 9739, 51,\n\t\t19, 2,\n\t\t-105, 36, -20, -11,\n\t\t-12, 56, -13, 2,\n\t\t2030, -22,\n\t\t11, -4,\n\t\t9, -6,\n\t\t1, 33,\n\t\t10, 18,\n\t\t4, 21,\n\t\t53, 3,\n\t\t19, 2,\n\t\t130, 37, -147, -54,\n\t\t-22, 6, 7, -19,\n\t\t22, 36, -4, 8,\n\t\t-949, 2911, -2221, -697,\n\t\t371, -808,\n\t\t1203, -1117, 191, 189,\n\t\t-549, 77,\n\t\t-321201, 19788, 2622593, 5990,\n\t\t8667033, 114, -34455835, 86,\n\t\t-92, -493, 179, 807,\n\t\t-499, 281,\n\t\t225, 51, -34, -88,\n\t\t-30, 13,\n\t\t0, -3,\n\t\t20, -43, 201, 33,\n\t\t-93, 2,\n\t\t-1034, -518, -63, -545,\n\t\t104, -20,\n\t\t43, -64, -34, -7,\n\t\t0, 0,\n\t\t-61, -159, -143, -8,\n\t\t-392, -157, -204, 309,\n\t\t-24, -248, 55, -40,\n\t\t-6, 91,\n\t\t-16, 57, -41, 18,\n\t\t197, -20, -668, -150,\n\t\t-192, -216, 39, -84,\n\t\t-62, -59,\n\t\t-4, 8,\n\t\t-7, -1,\n\t\t-352, -100, -10, -158,\n\t\t61, 55, 32493, -49,\n\t\t107, 344, -395, 227,\n\t\t-154, -238,\n\t\t123, 104, -205, 348,\n\t\t-449, -236,\n\t\t-54, -19,\n\t\t-6, 21,\n\t\t-790, 27,\n\t\t-5, 30,\n\t\t-846, 154, -26, -920,\n\t\t0, 12,\n\t\t-54, 21,\n\t\t11, -10,\n\t\t137, 132, 109, -337,\n\t\t-11, 2,\n\t\t-272, 467, -511, 179,\n\t\t-1, -8,\n\t\t7, -32,\n\t\t-44, 2,\n\t\t-26, 101, -32, 6,\n\t\t-98, 48, -42, -53,\n\t\t-1222, 1601, -3775, 656,\n\t\t83, 46, 16, -28,\n\t\t0, 7,\n\t\t-66, -14,\n\t\t-6, 13,\n\t\t12, 0,\n\t\t-58, 91, -123, -58,\n\t\t-12, 4,\n\t\t-114, 423, -111, 12,\n\t\t112, 27, -19072, 71,\n\t\t100, 410, 107, 15,\n\t\t24, 3,\n\t\t-214, 30,\n\t\t49, 44, 5017, -27,\n\t\t167, -80, 8, 153,\n\t\t4, 7,\n\t\t-219, -35, 244, 694,\n\t\t-762, 2,\n\t\t-84, -49, -28, 158,\n\t\t-4, 56,\n\t\t-14, 0,\n\t\t9, 12,\n\t\t7, 18, 2, -7,\n\t\t-15426, 91, 25800, -15,\n\t\t144767, -53, -287824, -24,\n\t\t19, -9, 6, 7,\n\t\t0, 0,\n\t\t-3, 8,\n\t\t-5, -3,\n\t\t-232, 53, -1, -271,\n\t\t4, -12,\n\t\t-8, 30,\n\t\t-8, -25,\n\t\t-253, -150, -105, 470,\n\t\t-37, -29,\n\t\t-59, -6,\n\t\t-24, -5,\n\t\t9, -18,\n\t\t1784, 3,\n\t\t-54, 13,\n\t\t-12, 7,\n\t\t-116, 144, -353, 52,\n\t\t-4, -12,\n\t\t-17, -14,\n\t\t-1340, -64,\n\t\t10, -116,\n\t\t-24, -2,\n\t\t190, 131, 130, -307,\n\t\t-1, 9,\n\t\t5, -7,\n\t\t-10, 56,\n\t\t-33, 0,\n\t\t-14, 3,\n\t\t2, -12,\n\t\t-635, -160, 64, -44,\n\t\t2712, -3, -3606, -1,\n\t\t774, 1,\n\t\t133, -1,\n\t\t-19, 0,\n\t\t5, -59,\n\t\t-5, 14,\n\t\t-45, 5,\n\t\t-140, -8,\n\t\t15, -28,\n\t\t379, 1,\n\t\t6, 3,\n\t\t55, 0, -54, 0,\n\t\t3, -33,\n\t\t-3, 4,\n\t\t0, -4,\n\t\t0, -1, 200, 0,\n\t\t-17, -1,\n\t\t2, -20,\n\t\t-2, 0,\n\t\t111, 0,\n\t\t1, -12,\n\t\t64, 0,\n\t\t38, 0,\n\t\t23, 0,\n\t\t3, 13\n\t],\n\targ_tbl: [\n\t\t0,  3,\n\t\t3,  4,  3, -8,  4,  3,  5,  1,\n\t\t2,  2,  5, -5,  6,  2,\n\t\t4,  4,  3, -8,  4,  5,  5, -5,  6,  1,\n\t\t3,  2,  2,  1,  3, -8,  4,  0,\n\t\t3,  3,  2, -7,  3,  4,  4,  2,\n\t\t3,  7,  3,-13,  4, -1,  5,  0,\n\t\t2,  8,  2,-13,  3,  2,\n\t\t3,  1,  3, -2,  4,  2,  6,  0,\n\t\t3,  1,  2, -8,  3, 12,  4,  1,\n\t\t3,  6,  2,-10,  3,  3,  5,  1,\n\t\t1,  1,  7,  0,\n\t\t2,  1,  5, -2,  6,  1,\n\t\t2,  1,  5, -3,  6,  0,\n\t\t3,  1,  3, -2,  4,  1,  5,  0,\n\t\t3,  3,  3, -6,  4,  2,  5,  1,\n\t\t3,  1,  1, -5,  2,  4,  3,  0,\n\t\t2,  8,  3,-15,  4,  2,\n\t\t3,  4,  3, -7,  4, -3,  5,  0,\n\t\t3,  2,  2, -7,  3,  7,  4,  0,\n\t\t2,  2,  5, -4,  6,  1,\n\t\t1,  1,  6,  2,\n\t\t2,  2,  5, -6,  6,  0,\n\t\t2,  9,  3,-17,  4,  2,\n\t\t3,  3,  2, -5,  3,  1,  5,  0,\n\t\t3,  2,  3, -4,  4,  2,  5,  0,\n\t\t3,  2,  3, -4,  4,  1,  5,  0,\n\t\t3,  3,  2, -5,  3,  2,  5,  0,\n\t\t2,  1,  5, -1,  6,  0,\n\t\t3,  3,  2, -6,  3,  2,  4,  0,\n\t\t2,  1,  3, -2,  4,  2,\n\t\t2,  2,  5, -3,  6,  0,\n\t\t1,  2,  6,  1,\n\t\t2,  3,  5, -5,  6,  1,\n\t\t1,  1,  5,  2,\n\t\t3,  4,  3, -8,  4,  2,  5,  0,\n\t\t2,  1,  5, -5,  6,  1,\n\t\t2,  7,  3,-13,  4,  2,\n\t\t2,  2,  5, -2,  6,  0,\n\t\t2, 10,  3,-19,  4,  0,\n\t\t2,  3,  5, -4,  6,  0,\n\t\t2,  3,  2, -5,  3,  2,\n\t\t2,  2,  3, -4,  4,  2,\n\t\t2,  5,  2, -8,  3,  1,\n\t\t2,  3,  5, -3,  6,  0,\n\t\t2,  6,  3,-11,  4,  1,\n\t\t2,  1,  1, -4,  3,  1,\n\t\t2,  4,  5, -5,  6,  0,\n\t\t1,  2,  5,  1,\n\t\t2,  3,  3, -6,  4,  2,\n\t\t2,  5,  3, -9,  4,  2,\n\t\t2,  6,  2,-10,  3,  0,\n\t\t2,  2,  2, -3,  3,  2,\n\t\t2,  4,  3, -8,  4,  1,\n\t\t2,  4,  3, -7,  4,  2,\n\t\t2,  5,  3,-10,  4,  1,\n\t\t2,  3,  3, -5,  4,  2,\n\t\t2,  1,  2, -2,  3,  1,\n\t\t2,  7,  2,-11,  3,  0,\n\t\t2,  2,  3, -3,  4,  1,\n\t\t2,  1,  3, -1,  4,  0,\n\t\t2,  4,  2, -7,  3,  0,\n\t\t2,  4,  2, -6,  3,  2,\n\t\t1,  1,  4,  1,\n\t\t2,  8,  3,-14,  4,  0,\n\t\t2,  1,  3, -5,  5,  0,\n\t\t2,  1,  3, -3,  4,  1,\n\t\t2,  7,  3,-12,  4,  1,\n\t\t2,  1,  2, -1,  3,  1,\n\t\t2,  2,  3, -5,  4,  0,\n\t\t2,  1,  3, -4,  5,  1,\n\t\t2,  6,  3,-10,  4,  1,\n\t\t2,  3,  3, -7,  4,  0,\n\t\t3,  1,  3, -4,  5,  2,  6,  0,\n\t\t3,  1,  3, -1,  5, -5,  6,  0,\n\t\t2,  5,  3, -8,  4,  1,\n\t\t2,  1,  3, -3,  5,  1,\n\t\t3,  1,  3, -5,  5,  5,  6,  0,\n\t\t2,  2,  2, -4,  3,  1,\n\t\t2,  6,  2, -9,  3,  0,\n\t\t2,  4,  3, -6,  4,  1,\n\t\t3,  1,  3, -3,  5,  2,  6,  0,\n\t\t2,  1,  3, -5,  6,  1,\n\t\t2,  1,  3, -2,  5,  2,\n\t\t3,  1,  3, -4,  5,  5,  6,  0,\n\t\t3,  1,  3, -1,  5, -2,  6,  0,\n\t\t3,  1,  3, -3,  5,  3,  6,  0,\n\t\t2,  1,  3, -4,  6,  0,\n\t\t3,  1,  3, -2,  5,  1,  6,  0,\n\t\t2,  5,  2, -9,  3,  0,\n\t\t2,  3,  3, -4,  4,  1,\n\t\t2,  3,  2, -4,  3,  2,\n\t\t2,  1,  3, -3,  6,  1,\n\t\t3,  1,  3, -2,  5,  2,  6,  0,\n\t\t3,  1,  3,  1,  5, -5,  6,  1,\n\t\t2,  1,  3, -1,  5,  1,\n\t\t3,  1,  3, -3,  5,  5,  6,  1,\n\t\t3,  1,  3,  2,  5, -7,  6,  0,\n\t\t2,  1,  3, -2,  6,  1,\n\t\t2,  2,  3, -2,  4,  1,\n\t\t3,  3,  2, -4,  3,  1,  5,  0,\n\t\t2, 10,  3,-17,  4,  1,\n\t\t3,  1,  3,  2,  5, -6,  6,  1,\n\t\t2,  1,  3, -1,  6,  0,\n\t\t3,  1,  3, -2,  5,  4,  6,  0,\n\t\t2,  7,  3,-15,  4,  0,\n\t\t2,  1,  3, -2,  7,  0,\n\t\t3,  1,  3,  1,  5, -3,  6,  0,\n\t\t2,  1,  3, -2,  8,  0,\n\t\t2,  1,  3, -1,  7,  0,\n\t\t2,  1,  3, -1,  8,  0,\n\t\t2,  8,  2,-14,  3,  1,\n\t\t3,  3,  2, -8,  3,  4,  4,  1,\n\t\t3,  1,  3,  4,  5,-10,  6,  1,\n\t\t3,  1,  3,  2,  5, -5,  6,  2,\n\t\t3,  5,  3, -8,  4,  3,  5,  2,\n\t\t1,  1, 12,  3,\n\t\t3,  3,  3, -8,  4,  3,  5,  2,\n\t\t3,  1,  3, -2,  5,  5,  6,  2,\n\t\t3,  3,  2, -6,  3,  4,  4,  0,\n\t\t2,  8,  2,-12,  3,  1,\n\t\t3,  1,  3,  1,  5, -2,  6,  0,\n\t\t2,  9,  3,-15,  4,  2,\n\t\t2,  1,  3,  1,  6,  1,\n\t\t2,  1, 10, -1, 11,  0,\n\t\t1,  2,  4,  1,\n\t\t2,  1,  3,  1,  5,  1,\n\t\t2,  8,  3,-13,  4,  1,\n\t\t2,  3,  2, -6,  3,  0,\n\t\t2,  1,  3, -4,  4,  1,\n\t\t2,  5,  2, -7,  3,  1,\n\t\t2,  7,  3,-11,  4,  1,\n\t\t2,  1,  1, -3,  3,  0,\n\t\t2,  1,  3,  2,  5,  0,\n\t\t2,  2,  3, -6,  4,  0,\n\t\t2,  6,  3, -9,  4,  1,\n\t\t2,  2,  2, -2,  3,  1,\n\t\t2,  5,  3, -7,  4,  2,\n\t\t2,  4,  3, -5,  4,  2,\n\t\t2,  1,  2, -3,  3,  0,\n\t\t2,  7,  2,-10,  3,  0,\n\t\t2,  3,  3, -3,  4,  0,\n\t\t2,  2,  3, -1,  4,  0,\n\t\t2,  4,  2, -5,  3,  1,\n\t\t2,  1,  3,  1,  4,  0,\n\t\t2,  2,  3, -5,  5,  0,\n\t\t2,  8,  3,-12,  4,  0,\n\t\t1,  1,  2,  1,\n\t\t3,  2,  3, -5,  5,  2,  6,  0,\n\t\t2,  2,  3, -4,  5,  1,\n\t\t3,  2,  3, -6,  5,  5,  6,  0,\n\t\t2,  7,  3,-10,  4,  0,\n\t\t3,  2,  3, -4,  5,  2,  6,  0,\n\t\t3,  2,  3, -1,  5, -5,  6,  1,\n\t\t2,  6,  3, -8,  4,  1,\n\t\t2,  2,  3, -3,  5,  1,\n\t\t3,  2,  3, -5,  5,  5,  6,  1,\n\t\t2,  2,  2, -5,  3,  0,\n\t\t2,  6,  2, -8,  3,  0,\n\t\t3,  2,  3, -4,  5,  3,  6,  0,\n\t\t3,  2,  3, -3,  5,  1,  6,  0,\n\t\t2,  5,  3, -6,  4,  1,\n\t\t3,  2,  3, -3,  5,  2,  6,  0,\n\t\t2,  2,  3, -5,  6,  1,\n\t\t2,  2,  3, -2,  5,  1,\n\t\t3,  2,  3, -4,  5,  5,  6,  1,\n\t\t2,  2,  3, -4,  6,  0,\n\t\t2,  4,  3, -4,  4,  0,\n\t\t2,  3,  2, -3,  3,  1,\n\t\t2,  2,  3, -3,  6,  1,\n\t\t3,  2,  3, -2,  5,  2,  6,  0,\n\t\t2,  2,  3, -1,  5,  1,\n\t\t2,  2,  3, -2,  6,  0,\n\t\t2,  3,  3, -2,  4,  1,\n\t\t2,  2,  3, -1,  6,  0,\n\t\t2,  2,  3, -2,  7,  0,\n\t\t3,  2,  3,  2,  5, -5,  6,  0,\n\t\t3,  6,  3, -8,  4,  3,  5,  1,\n\t\t1,  2, 12,  3,\n\t\t3,  2,  3, -8,  4,  3,  5,  1,\n\t\t3,  2,  3, -2,  5,  5,  6,  0,\n\t\t2,  8,  2,-11,  3,  0,\n\t\t2,  2,  3,  1,  5,  0,\n\t\t2,  5,  2, -6,  3,  1,\n\t\t2,  8,  3,-11,  4,  0,\n\t\t2,  1,  1, -2,  3,  0,\n\t\t2,  7,  3, -9,  4,  0,\n\t\t2,  2,  2, -1,  3,  1,\n\t\t2,  6,  3, -7,  4,  0,\n\t\t2,  5,  3, -5,  4,  0,\n\t\t2,  7,  2, -9,  3,  0,\n\t\t2,  4,  3, -3,  4,  0,\n\t\t2,  4,  2, -4,  3,  0,\n\t\t2,  3,  3, -5,  5,  0,\n\t\t2,  1,  2,  1,  3,  0,\n\t\t2,  3,  3, -4,  5,  1,\n\t\t2,  8,  3,-10,  4,  0,\n\t\t2,  7,  3, -8,  4,  0,\n\t\t2,  3,  3, -3,  5,  0,\n\t\t2,  6,  2, -7,  3,  0,\n\t\t2,  6,  3, -6,  4,  0,\n\t\t2,  3,  3, -2,  5,  1,\n\t\t2,  3,  3, -4,  6,  0,\n\t\t2,  5,  3, -4,  4,  0,\n\t\t2,  3,  2, -2,  3,  0,\n\t\t2,  3,  3, -3,  6,  0,\n\t\t2,  3,  3, -1,  5,  0,\n\t\t2,  3,  3, -2,  6,  0,\n\t\t1,  3, 12,  3,\n\t\t2,  5,  2, -5,  3,  0,\n\t\t2,  1,  1, -1,  3,  0,\n\t\t1,  2,  2,  0,\n\t\t2,  7,  2, -8,  3,  0,\n\t\t2,  4,  2, -3,  3,  0,\n\t\t2,  4,  3, -5,  5,  0,\n\t\t2,  4,  3, -4,  5,  0,\n\t\t2,  4,  3, -3,  5,  0,\n\t\t2,  6,  2, -6,  3,  0,\n\t\t2,  4,  3, -2,  5,  0,\n\t\t1,  4, 12,  1,\n\t\t2,  8,  2, -9,  3,  0,\n\t\t2,  5,  2, -4,  3,  0,\n\t\t1,  1,  1,  0,\n\t\t2,  7,  2, -7,  3,  1,\n\t\t2,  5,  3, -5,  5,  0,\n\t\t2,  9,  2,-10,  3,  0,\n\t\t2,  6,  2, -5,  3,  0,\n\t\t2,  8,  2, -8,  3,  0,\n\t\t2, 10,  2,-11,  3,  0,\n\t\t2,  9,  2, -9,  3,  0,\n\t\t2, 10,  2,-10,  3,  0,\n\t\t2, 11,  2,-11,  3,  0,\n\t\t2,  2,  1, -1,  3,  0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/earth.js?");

/***/ }),

/***/ "./src/ptables/jupiter.js":
/*!********************************!*\
  !*** ./src/ptables/jupiter.js ***!
  \********************************/
/*! exports provided: jupiterPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"jupiterPTable\", function() { return jupiterPTable; });\nconst jupiterPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 0, 1, 0, 9, 16, 7, 5, 0],\n\tmax_power_of_t: 6,\n\tdistance: 5.2026032092000003e+00,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t153429.13855, 130818.16897, 18120.42948, -8463.12663,\n\t\t-5058.91447, 1092566021.02148, 123671.25097,\n\t\t-5.43364, 12.06012,\n\t\t30428.31077, -74667.61443, 46848.16236, -66373.44474,\n\t\t24312.54264, -26045.64766, 18353.92564, -4022.13679,\n\t\t4037.97936, 10059.82468, -4622.55896, 1383.21617,\n\t\t-187.25468, -1171.66028,\n\t\t-0.00062, -0.21713,\n\t\t-1198.83945, 1178.62445, -1492.07393, 153.07155,\n\t\t-245.57966, -391.94010, 82.26400, -40.92104,\n\t\t3.72520, 10.57242,\n\t\t-0.04720, -0.04448, -0.04329, -0.06043,\n\t\t-0.03905, 0.15712,\n\t\t-0.05644, -0.00129,\n\t\t-0.00342, 0.02473,\n\t\t0.00434, -0.01862,\n\t\t0.00431, -0.03993,\n\t\t-0.03159, -0.15982,\n\t\t-0.09928, 0.04430, -0.00357, 0.31312,\n\t\t-0.01346, -0.00180,\n\t\t-0.09107, 0.01215,\n\t\t0.02485, 0.01024,\n\t\t27.29869, 2.70896, 12.91956, 19.21726,\n\t\t-6.91384, 5.12954, -1.07533, -1.71691,\n\t\t-0.01423, 0.03121,\n\t\t-32.48652, -26.13483, 46.78162, -62.02701,\n\t\t94.96809, 81.73791, -20.13673, 131.05065,\n\t\t-0.00798, 0.01786,\n\t\t13.99591, 16.87756, -8.51726, 21.59490,\n\t\t-14.28833, -9.45530, 7.73954, -6.53078,\n\t\t0.03175, -0.04295,\n\t\t3.06742, -0.11838, 1.03630, 0.94004,\n\t\t-0.14085, 0.14434,\n\t\t-0.03363, 0.00993,\n\t\t-0.00007, -0.02748,\n\t\t26.01507, -7.37178, 16.96955, 6.24203,\n\t\t-0.40481, 3.72456, -0.53597, -0.14938,\n\t\t37.82081, 26.15887, -2.82115, 78.26478,\n\t\t-63.39155, -5.52419, 13.11482, -43.54977,\n\t\t15.64940, 6.67505,\n\t\t-10.25616, -7.39672, -12.37441, 12.24417,\n\t\t8.54922, 9.68451,\n\t\t-0.03658, -0.00963,\n\t\t1.65523, 0.43093, 0.32023, 0.71365,\n\t\t-0.12226, 0.03759,\n\t\t0.10388, 0.47212, -0.02791, 0.09929,\n\t\t-0.04116, -0.03125,\n\t\t-0.10240, -0.23199, -0.03524, -0.13625,\n\t\t7.52726, 6.86314, 0.01239, 13.46530,\n\t\t-5.22256, 1.56116, -0.15925, -1.19571,\n\t\t3.26302, 0.06097, -0.14444, -0.20301,\n\t\t1.93822, -80.12566,\n\t\t0.98665, -7.52986, 3.86703, -2.43028,\n\t\t0.64180, 0.78351,\n\t\t0.00190, -0.00633,\n\t\t-0.00321, -0.04403,\n\t\t0.19018, 0.14335, 0.10315, 0.53154,\n\t\t-0.00062, -0.00464,\n\t\t-0.00109, 0.02150,\n\t\t1.19993, 47.21638, -24.56067, 25.06332,\n\t\t-7.50751, -6.36250, 1.39443, -1.23806,\n\t\t0.04951, 0.02176,\n\t\t0.02802, -0.01665,\n\t\t-0.10698, -0.13635,\n\t\t73.54797, -52.34968, 74.98754, 86.56283,\n\t\t-69.01463, 44.56866,\n\t\t0.04387, -0.05925,\n\t\t-0.03732, -0.03264,\n\t\t0.00967, 0.02143,\n\t\t10.59429, 26.48226, 34.03470, 3.96160,\n\t\t4.15919, -20.22616, -5.25903, -3.40177,\n\t\t0.05111, -0.06788,\n\t\t0.06497, 1.21024, -0.29607, 0.49991,\n\t\t-0.06055, -0.03464,\n\t\t0.02950, 0.16429,\n\t\t0.00722, -0.90806,\n\t\t-0.02161, 0.00902,\n\t\t-0.00261, 0.00077,\n\t\t0.00434, -0.29231,\n\t\t0.00456, 0.04781,\n\t\t1.33214, -2.62015, 0.79761, -0.81850,\n\t\t0.06371, 0.00119,\n\t\t0.03049, -0.03553, 0.02373, -0.01411,\n\t\t-189.06132, -169.17940, 5.27464, -227.72664,\n\t\t83.72511, -12.04794, 0.23965, 23.75496,\n\t\t-3.43532, -0.34276,\n\t\t-1.35880, 0.45053, -0.34298, -0.11441,\n\t\t-0.16328, 0.07423,\n\t\t481.48150, 79.82461, 453.82764, 941.94205,\n\t\t-635.83924, 397.29087, -81.54066, -417.22420,\n\t\t149.91822, 10.53490,\n\t\t-0.13210, 0.36740,\n\t\t0.33777, 0.15893,\n\t\t-2562.04968, 2442.77844, -2602.66709, 2838.87348,\n\t\t723.50715, -1284.58208, -4557.23362, -4514.61100,\n\t\t-8960.81693, 4663.55087, -4947.61530, 19377.42027,\n\t\t-0.16786, -0.19514,\n\t\t0.32100, 0.91502,\n\t\t4.96600, -1.11836,\n\t\t307.38057, 175.14618, 16.02093, 444.42376,\n\t\t-219.80047, 62.39286, -18.14266, -52.23698,\n\t\t0.02111, 0.00469,\n\t\t-20.97409, -34.48296, -2.03906, -27.07560,\n\t\t3.73818, -3.00599, 0.24112, 0.41430,\n\t\t-0.03552, 0.00394,\n\t\t-0.00217, 0.02307,\n\t\t0.03686, 0.00510,\n\t\t34.46537, 10.23293, 9.99520, 28.88781,\n\t\t-11.31210, 3.52646, -0.48062, -2.93641,\n\t\t-0.00987, -0.05310,\n\t\t-38.39539, 0.04568, -31.73684, -1.83151,\n\t\t-24.97332, -1.71244, 0.33498, 7.03899,\n\t\t-4.15247, 200.43434,\n\t\t-0.00800, 0.04462,\n\t\t37.83113, -13.40661, 9.49434, -35.41588,\n\t\t-14.72767, -3.84674, -0.31412, 3.97734,\n\t\t0.02908, -0.00353,\n\t\t1.89935, -14.31774, 7.77051, -7.08945,\n\t\t1.90915, 1.78908, -0.41445, 0.30506,\n\t\t-14.43121, 7.30707, -11.97842, -17.64121,\n\t\t13.38962, -7.20982,\n\t\t-5.23362, 2.11364, -0.45605, 4.08835,\n\t\t1.42683, 0.24838,\n\t\t-0.00605, 0.03199,\n\t\t-0.17609, -1.43091, 0.32444, -0.51371,\n\t\t0.06182, 0.03733,\n\t\t0.00696, -0.13438,\n\t\t4.67581, 4.42379, -1.52602, 4.20659,\n\t\t-1.31757, -0.72910,\n\t\t1.29012, 0.97780, 2.25895, -0.85306,\n\t\t1.74120, -5.09507,\n\t\t0.28107, -0.05040, 0.05508, -0.06349,\n\t\t-0.00061, 0.48249,\n\t\t-2.37749, 1.78180, -1.67423, -0.35618,\n\t\t0.05789, -0.35287,\n\t\t0.56252, -0.66584, 0.61979, 4.84016,\n\t\t-4.64462, 17.48002,\n\t\t0.40982, -4.19214, -1.55252, -1.87505,\n\t\t-0.31070, 0.15554,\n\t\t-0.00034, 0.11102,\n\t\t0.01116, -0.04166,\n\t\t9.27689, -4.32090, 6.84888, 1.78741,\n\t\t-0.09306, 1.68391, -0.27482, -0.04197,\n\t\t-7.83068, 37.71086, -37.53346, 7.18559,\n\t\t0.74427, -24.29751, 10.87837, 1.35503,\n\t\t0.00998, -0.03395,\n\t\t-133.52206, -150.11329, 4.27494, -173.79469,\n\t\t150.87961, -356.29181, -330.17873, -426.29809,\n\t\t-607.98186, 126.35464, -299.69623, 556.41055,\n\t\t-0.00342, 0.04411,\n\t\t44.65946, 42.07312, 85.71397, 5.95130,\n\t\t24.98064, -41.20026, -14.05970, -10.46101,\n\t\t-2.24038, 2.89211,\n\t\t0.06175, 0.08128, 0.00705, 0.01939,\n\t\t-1.08361, -0.08213, -0.20868, -0.36268,\n\t\t-4.96489, -2.05966, -6.16586, 3.65514,\n\t\t-3.12555, 12.20821,\n\t\t-1.11236, -1.73772, -1.34045, -0.22774,\n\t\t-0.08639, 0.27355,\n\t\t-0.07700, 1.06260, -0.46013, 0.31916,\n\t\t-0.04969, -0.09488,\n\t\t-1.54000, 0.04949, -0.07616, -0.95933,\n\t\t0.93303, 3.43183,\n\t\t-0.82917, -0.82042, -0.68158, 0.17083,\n\t\t0.06942, 0.17491,\n\t\t-0.02699, -0.01051,\n\t\t0.00657, 0.03063,\n\t\t-0.52595, 0.84035, -0.88323, -0.70188,\n\t\t0.60928, -0.48179,\n\t\t0.38290, 0.04482, 0.26456, -0.32369,\n\t\t-0.00615, 0.03218,\n\t\t-0.32943, 0.14675, -0.10782, -0.09036,\n\t\t-0.58003, 0.72888, -0.46654, 1.17977,\n\t\t0.00222, 0.01541,\n\t\t-0.19226, -0.07770, -0.01829, -0.05070,\n\t\t-1.75385, -1.32969, 0.52361, -1.36036,\n\t\t0.67222, 1.34612,\n\t\t6.96841, -29.24025, -23.76900, -39.91647,\n\t\t-41.01215, -2.23638, -18.81024, 20.77095,\n\t\t-0.68592, -2.26212, -1.14065, -0.76493,\n\t\t-0.18044, 0.15193,\n\t\t-0.20669, -0.44387, 0.25697, -0.17880,\n\t\t-0.53097, 0.43181, -0.35187, 0.71934,\n\t\t-0.14962, 0.09220, -0.05031, -0.03924,\n\t\t0.06571, 0.29487,\n\t\t0.05170, 0.36847,\n\t\t0.02754, -0.00411,\n\t\t-0.08313, -0.16907, 0.10273, -0.07315,\n\t\t-0.02312, 0.04912,\n\t\t-0.01062, -0.02713,\n\t\t0.03806, 0.13401,\n\t\t-1.79865, -2.04540, -2.69965, -0.65706,\n\t\t-1.17916, 0.79292,\n\t\t0.02415, 0.14001,\n\t\t-0.01767, 0.04209,\n\t\t0.05212, -0.01795,\n\t\t0.01285, 0.04028,\n\t\t0.01075, 0.05533,\n\t\t0.02323, -0.00864,\n\t\t-0.04691, 0.03128,\n\t\t0.00548, 0.02254,\n\t\t0.00011, 0.12033\n\t],\n\tlat_tbl: [\n\t\t548.59659, 594.29629, 219.97664, 59.71822,\n\t\t23.62157, 40.77732, 227.07380,\n\t\t0.00293, -0.00745,\n\t\t-307.33226, -347.92807, -309.49383, -428.18929,\n\t\t-96.59506, -191.36254, 2.11014, -34.44145,\n\t\t2.23085, 6.77110, -5.43468, -0.28391,\n\t\t0.28355, -1.81690,\n\t\t0.00036, 0.00078,\n\t\t-1.83259, 1.17464, -2.66976, -0.92339,\n\t\t-0.23645, -1.20623, 0.25248, -0.04958,\n\t\t0.00064, 0.03599,\n\t\t-0.00079, 0.00004, -0.00005, -0.00010,\n\t\t-0.00024, 0.00051,\n\t\t0.00001, 0.00005,\n\t\t0.00015, 0.00010,\n\t\t0.00017, -0.00004,\n\t\t0.00113, -0.00011,\n\t\t0.00021, 0.00087,\n\t\t0.00120, -0.00114, -0.00881, -0.00020,\n\t\t-0.00005, 0.00009,\n\t\t0.00005, 0.00007,\n\t\t0.00002, -0.00033,\n\t\t-0.00554, -0.32274, 0.23695, -0.11184,\n\t\t0.04050, 0.09929, -0.02189, 0.00305,\n\t\t-0.00142, -0.00055,\n\t\t0.66623, 0.34590, 0.74913, -0.23202,\n\t\t-1.08316, -1.40407, 1.72287, -0.07604,\n\t\t0.00024, 0.00004,\n\t\t0.03592, 0.91143, -1.11848, -0.17473,\n\t\t0.91500, -1.34912, 0.85229, 0.69029,\n\t\t-0.00019, 0.00075,\n\t\t0.03615, 0.30768, -0.08733, 0.12016,\n\t\t-0.01716, -0.01138,\n\t\t0.00021, 0.00004,\n\t\t0.00531, 0.00098,\n\t\t-0.14354, -0.02364, -0.05559, -0.07561,\n\t\t0.01419, -0.01141, 0.00014, 0.00218,\n\t\t-0.36564, 0.13498, -0.13283, -0.11462,\n\t\t0.23741, 0.14960, -0.23173, 0.25148,\n\t\t0.00763, -0.05987,\n\t\t-0.00857, 0.20312, -0.29399, 0.34831,\n\t\t-1.33166, -0.46808,\n\t\t-0.00027, 0.00046,\n\t\t0.15729, 0.01367, 0.04093, 0.07447,\n\t\t-0.01598, 0.00785,\n\t\t0.00583, 0.00324, 0.00053, 0.00160,\n\t\t-0.00030, 0.00043,\n\t\t-0.00208, 0.00334, -0.00316, 0.00136,\n\t\t0.23086, 0.05711, 0.19558, 0.05897,\n\t\t0.01070, 0.05021, -0.00818, -0.02242,\n\t\t0.06301, -0.26483, 0.66177, 0.02125,\n\t\t0.13477, 0.19376,\n\t\t-0.36520, 0.83588, -0.69848, -0.00877,\n\t\t0.01626, -0.23878,\n\t\t-0.00373, 0.00044,\n\t\t0.00008, -0.00004,\n\t\t-0.00374, -0.00283, 0.01104, -0.00619,\n\t\t0.00004, 0.00015,\n\t\t0.00026, 0.00013,\n\t\t0.04630, -0.11815, 0.00773, 0.03796,\n\t\t-0.05172, 0.00149, 0.00444, -0.01493,\n\t\t-0.00064, -0.00044,\n\t\t-0.00033, 0.00002,\n\t\t-0.00012, 0.00284,\n\t\t-0.15622, -0.92158, -0.82690, -1.52101,\n\t\t-0.55934, 0.69375,\n\t\t-0.00171, 0.00031,\n\t\t0.00129, -0.00013,\n\t\t-0.00024, -0.00083,\n\t\t0.66101, -0.21764, -0.43967, 0.30157,\n\t\t0.53389, 1.59141, 1.94286, 0.14146,\n\t\t-0.00064, -0.00006,\n\t\t0.21850, -0.02912, 0.08594, 0.08734,\n\t\t-0.01678, 0.01629,\n\t\t0.00133, 0.00562,\n\t\t0.00128, -0.00025,\n\t\t-0.00005, 0.00027,\n\t\t0.00032, 0.00001,\n\t\t0.00037, 0.00042,\n\t\t0.00070, 0.00003,\n\t\t0.00275, -0.13096, 0.02329, -0.05582,\n\t\t0.00405, -0.00251,\n\t\t0.01316, -0.01165, 0.00279, -0.00374,\n\t\t-39.62783, 20.91467, -28.97236, 3.77560,\n\t\t-3.30029, 0.11472, -0.48216, 1.05814,\n\t\t-0.21607, -0.03055,\n\t\t-0.64162, -0.57355, -0.05861, -0.18592,\n\t\t-0.12207, -0.06279,\n\t\t-38.55325, -125.74207, -47.22357, 41.75842,\n\t\t-119.38841, 18.88515, -11.04830, -50.98851,\n\t\t16.64895, 1.76553,\n\t\t0.09474, 0.03714,\n\t\t0.02593, 0.07967,\n\t\t-1187.61854, -1094.91786, -1011.21939, -1102.25998,\n\t\t-575.88672, -107.84860, -890.58889, -807.06589,\n\t\t971.78461, -1287.24560, -4601.44669, -849.54329,\n\t\t-0.00904, 0.06233,\n\t\t-0.19456, -0.05521,\n\t\t-0.36915, 1.15363,\n\t\t32.64763, -85.19705, 114.34437, -13.37747,\n\t\t15.92865, 55.84857, -13.10538, 3.07629,\n\t\t-0.00327, 0.00104,\n\t\t-7.81035, 6.19960, -6.36096, 1.00493,\n\t\t-0.66971, -0.84572, 0.09943, -0.04583,\n\t\t0.00200, -0.00032,\n\t\t-0.00265, 0.00047,\n\t\t-0.00053, 0.00046,\n\t\t-0.24396, 0.20664, -0.30820, -0.04917,\n\t\t0.06184, -0.12642, 0.03053, 0.05054,\n\t\t0.00035, 0.00012,\n\t\t0.42063, -0.58254, 0.90517, -0.66276,\n\t\t0.64765, 0.39338, -1.40645, 0.33017,\n\t\t-1.43377, -0.67089,\n\t\t-0.00045, -0.00036,\n\t\t0.23690, 0.07185, 0.28386, -0.04397,\n\t\t0.02836, -0.13082, -0.00978, 0.00108,\n\t\t0.00046, 0.00083,\n\t\t-0.01665, 0.32499, -0.09980, 0.18611,\n\t\t-0.02561, 0.00239, -0.00084, -0.00110,\n\t\t0.46854, -0.35113, 0.69908, 0.53244,\n\t\t0.12875, 0.01115,\n\t\t0.13930, 0.02747, -0.10587, -0.17759,\n\t\t-0.26850, 0.04400,\n\t\t0.00010, -0.00015,\n\t\t0.00164, -0.01308, 0.00488, -0.01046,\n\t\t0.00170, 0.00024,\n\t\t0.00084, 0.00014,\n\t\t-0.08481, -0.02547, -0.02290, -0.02281,\n\t\t-0.03946, -0.02810,\n\t\t0.01298, 0.08658, 0.05575, -0.01081,\n\t\t1.09695, 0.35441,\n\t\t-0.03127, 0.07946, 0.01245, 0.02578,\n\t\t-0.00524, -0.00027,\n\t\t0.08217, -0.31742, 0.15273, -0.07804,\n\t\t0.01197, 0.03053,\n\t\t0.81596, 0.38640, -0.89777, 0.59499,\n\t\t-0.39581, -0.87375,\n\t\t0.02096, 0.49772, 0.29986, 0.24210,\n\t\t0.14038, -0.03016,\n\t\t-0.00208, 0.00045,\n\t\t0.01024, 0.00114,\n\t\t1.23010, 1.75663, -0.12741, 1.44996,\n\t\t-0.31607, 0.03151, 0.00259, -0.04741,\n\t\t-11.57091, 8.00331, -9.24028, -6.36906,\n\t\t4.71248, -2.43695, 0.38630, 1.90625,\n\t\t0.01401, 0.00114,\n\t\t33.56690, -55.17784, 33.21425, -52.57002,\n\t\t27.04138, 13.78610, 69.60307, -81.16312,\n\t\t27.53960, -158.28336, -205.94418, -95.08051,\n\t\t-0.01407, -0.00364,\n\t\t-18.56128, 6.02270, -10.11059, 24.69471,\n\t\t12.31878, 9.94393, 3.81994, -4.84109,\n\t\t-1.08440, -0.72136,\n\t\t0.03731, -0.02094, 0.00789, -0.00176,\n\t\t0.09673, -0.11181, 0.03112, -0.00065,\n\t\t-0.29167, -0.82083, 0.40866, -0.77487,\n\t\t-2.23349, -0.46973,\n\t\t0.41024, -0.14274, 0.07755, -0.24895,\n\t\t-0.04965, -0.01197,\n\t\t-0.02264, 0.05917, -0.02817, 0.01242,\n\t\t-0.00250, -0.00247,\n\t\t-0.14414, -0.03739, 0.14708, -0.07908,\n\t\t0.05843, 0.15173,\n\t\t-0.01601, -0.07844, -0.05957, -0.03143,\n\t\t-0.01830, 0.01257,\n\t\t-0.00109, -0.00000,\n\t\t0.00174, 0.00050,\n\t\t-0.02119, 0.06918, -0.02470, 0.00185,\n\t\t0.02372, -0.02417,\n\t\t0.01081, 0.05222, 0.09820, 0.05931,\n\t\t-0.00588, -0.00086,\n\t\t0.01688, -0.00133, -0.00073, 0.00041,\n\t\t-0.02280, -0.05706, -0.17694, -0.12027,\n\t\t0.00196, -0.00060,\n\t\t0.00051, -0.02426, 0.00314, -0.00302,\n\t\t0.17923, -0.78343, 0.52073, -0.02398,\n\t\t-0.03978, 0.20841,\n\t\t6.51325, 3.37139, 12.88844, -6.72098,\n\t\t3.40949, -14.34313, -9.68278, -7.85143,\n\t\t1.06886, -0.21727, 0.36675, -0.49815,\n\t\t-0.07289, -0.07537,\n\t\t0.01107, -0.00644, 0.01013, -0.00306,\n\t\t-0.00708, -0.13488, -0.23041, -0.10698,\n\t\t-0.00049, -0.00692, -0.00142, -0.00211,\n\t\t-0.04021, 0.01805,\n\t\t0.00479, 0.00620,\n\t\t0.00739, 0.00566,\n\t\t-0.00101, -0.00022, 0.00261, -0.00188,\n\t\t-0.01812, -0.01205,\n\t\t-0.00061, -0.00061,\n\t\t-0.02479, 0.01157,\n\t\t0.91642, -0.65781, 0.39969, -1.13699,\n\t\t-0.43337, -0.57828,\n\t\t0.00145, 0.00281,\n\t\t-0.01675, -0.00975,\n\t\t0.00119, -0.00074,\n\t\t-0.00343, 0.00139,\n\t\t0.00061, 0.00086,\n\t\t0.00054, -0.00046,\n\t\t-0.01996, -0.02689,\n\t\t0.00034, 0.00037,\n\t\t-0.00006, 0.00001\n\t],\n\trad_tbl: [\n\t\t-734.58857, -1081.04460, -551.65750, -148.79782,\n\t\t-25.23171, 164.64781, 248.64813,\n\t\t-0.05163, -0.02413,\n\t\t-1306.61004, 560.02437, -1622.58047, 589.92513,\n\t\t-812.39674, 166.85340, -157.92826, -107.14755,\n\t\t68.98900, -18.95875, -0.16183, 36.24345,\n\t\t-9.19972, -2.29315,\n\t\t-0.00316, 0.00222,\n\t\t10.95234, 21.37177, -6.29550, 21.83656,\n\t\t-7.70755, 1.38228, -0.21770, -1.49525,\n\t\t0.17951, 0.01043,\n\t\t0.00062, 0.00208, -0.00066, 0.00050,\n\t\t0.00313, 0.00187,\n\t\t0.00010, 0.00131,\n\t\t0.00102, 0.00047,\n\t\t0.00102, 0.00012,\n\t\t0.00012, -0.00037,\n\t\t0.00808, 0.00027,\n\t\t-0.01219, -0.00961, -0.04166, -0.00327,\n\t\t-0.00001, -0.00146,\n\t\t-0.00092, -0.00989,\n\t\t-0.00135, 0.00196,\n\t\t0.19216, 2.48442, -1.43599, 1.39651,\n\t\t-0.48549, -0.53272, 0.14066, -0.10352,\n\t\t0.00141, 0.00066,\n\t\t2.96838, -3.09575, 6.27741, 5.24306,\n\t\t-8.77080, 9.03247, -10.98350, -3.58579,\n\t\t-0.00168, -0.00100,\n\t\t0.20234, -0.75737, 0.36838, -0.58241,\n\t\t0.41430, -0.35784, 0.47038, -0.10586,\n\t\t0.00539, 0.00490,\n\t\t-0.01375, -0.01950, 0.00145, 0.00723,\n\t\t-0.00391, 0.00391,\n\t\t-0.00131, -0.00568,\n\t\t0.01317, 0.00319,\n\t\t1.31006, 5.89394, -1.61753, 3.68814,\n\t\t-0.80644, -0.14747, 0.04481, -0.11361,\n\t\t-4.36130, 7.92488, -16.29047, -1.52163,\n\t\t2.14492, -14.38028, 9.65573, 3.56881,\n\t\t-1.87208, 3.36213,\n\t\t1.84499, -2.41575, -2.77076, -3.23915,\n\t\t-3.34573, 1.40979,\n\t\t0.00217, -0.00841,\n\t\t0.29313, -0.36246, 0.22043, 0.02328,\n\t\t-0.01182, 0.04074,\n\t\t-0.15728, 0.02468, -0.03185, -0.01099,\n\t\t0.01059, -0.01274,\n\t\t0.07362, -0.02642, 0.04035, -0.00968,\n\t\t-2.14457, 2.53297, -4.34196, -0.11421,\n\t\t-0.38757, -1.73872, 0.39784, -0.01397,\n\t\t-0.03311, 0.97723, 0.16060, -0.07486,\n\t\t25.96413, 0.75088,\n\t\t-3.04736, 0.30340, -1.43451, -1.35136,\n\t\t0.26526, -0.40247,\n\t\t-0.00460, -0.00056,\n\t\t0.01633, -0.00128,\n\t\t-0.05197, 0.07002, -0.19450, 0.03737,\n\t\t0.00188, -0.00037,\n\t\t-0.00903, -0.00059,\n\t\t-19.73809, 0.58424, -10.42034, -10.14579,\n\t\t2.65990, -3.07889, 0.50884, 0.58508,\n\t\t-0.00970, 0.02099,\n\t\t0.00716, 0.01161,\n\t\t0.05751, -0.04515,\n\t\t22.08042, 30.82415, -36.27430, 31.40265,\n\t\t-18.30150, -29.16403,\n\t\t0.02454, 0.01834,\n\t\t-0.01312, 0.01576,\n\t\t-0.00928, 0.00330,\n\t\t-11.78094, 4.06738, -2.51590, 15.05277,\n\t\t9.12747, 2.88088, 2.32916, -2.08271,\n\t\t0.02872, 0.02194,\n\t\t0.60494, -0.04597, 0.24749, 0.15971,\n\t\t-0.02185, 0.03384,\n\t\t-0.07075, 0.01287,\n\t\t0.40201, 0.00347,\n\t\t-0.00410, -0.00998,\n\t\t-0.00005, -0.00121,\n\t\t0.13770, 0.00186,\n\t\t-0.02268, 0.00210,\n\t\t1.26291, 0.65546, 0.38885, 0.38880,\n\t\t-0.00184, 0.03067,\n\t\t0.01273, 0.01136, 0.00557, 0.01117,\n\t\t94.13171, -88.37882, 120.53292, 8.32903,\n\t\t7.77313, 43.46523, -11.66698, 0.44639,\n\t\t0.15092, -1.68367,\n\t\t-0.30833, -0.49030, 0.01971, -0.14144,\n\t\t-0.04019, -0.05110,\n\t\t-39.70024, 272.91667, -468.46263, 256.77696,\n\t\t-200.63130, -307.98554, 206.56301, -41.76039,\n\t\t-4.74242, 74.19909,\n\t\t0.18474, 0.05547,\n\t\t-0.06732, 0.16515,\n\t\t-1156.31285, -1102.97666, -1346.99288, -1121.01090,\n\t\t666.84550, 421.92305, 2259.49740, -2268.69758,\n\t\t-2325.87639, -4476.46256, -9683.77583, -2472.92565,\n\t\t-0.10400, 0.08075,\n\t\t-0.45225, 0.16621,\n\t\t0.57789, 2.43804,\n\t\t85.21675, -154.17208, 219.91042, -9.71116,\n\t\t31.13240, 108.60117, -25.85622, 8.98402,\n\t\t-0.00233, 0.01030,\n\t\t-17.01324, 10.41588, -13.34449, 1.08782,\n\t\t-1.48199, -1.81734, 0.20334, -0.11734,\n\t\t-0.00230, -0.01869,\n\t\t-0.01182, -0.00129,\n\t\t-0.00281, 0.02021,\n\t\t-5.75973, 19.13309, -16.13690, 5.53382,\n\t\t-1.96585, -6.29211, 1.63105, -0.26089,\n\t\t0.02935, -0.00555,\n\t\t0.30700, -19.96182, 0.99825, -16.32664,\n\t\t0.83052, -13.76201, -3.15609, 0.17360,\n\t\t-111.81423, -2.05419,\n\t\t-0.02455, -0.00478,\n\t\t7.45114, 21.53296, 19.90263, 5.69420,\n\t\t2.31253, -8.15116, -2.17440, -0.23014,\n\t\t0.00168, 0.01590,\n\t\t8.78005, 0.71418, 4.48561, 4.50680,\n\t\t-1.05713, 1.17880, -0.19327, -0.24877,\n\t\t-5.00870, -8.66354, 10.51902, -7.71011,\n\t\t4.65486, 8.05673,\n\t\t-1.39635, -3.07669, -2.40347, -0.11167,\n\t\t-0.04064, 0.83512,\n\t\t-0.02041, -0.00351,\n\t\t0.97375, -0.15795, 0.36361, 0.19913,\n\t\t-0.02142, 0.04193,\n\t\t0.08801, 0.00475,\n\t\t-2.81010, 3.11341, -2.79191, -0.93313,\n\t\t0.44570, -0.88287,\n\t\t-0.51815, 0.54776, 0.29736, 0.99779,\n\t\t2.28957, 0.82183,\n\t\t0.03386, 0.12855, 0.03124, 0.02454,\n\t\t-0.31958, 0.00070,\n\t\t-1.48184, -1.28195, 0.03965, -1.12026,\n\t\t0.23910, 0.01293,\n\t\t0.36146, -0.64483, -1.88470, 0.21469,\n\t\t-11.79819, -1.87287,\n\t\t2.65699, -0.36287, 0.88148, -1.26883,\n\t\t-0.19657, -0.14279,\n\t\t-0.07536, -0.00004,\n\t\t0.01496, 0.00537,\n\t\t2.48352, 3.75581, -0.34909, 3.26696,\n\t\t-0.82105, 0.11287, -0.00755, -0.13764,\n\t\t-15.34429, -2.79957, -3.22976, -15.46084,\n\t\t10.66793, -0.26054, -0.12188, 5.06211,\n\t\t0.01313, 0.00424,\n\t\t84.34332, -57.05646, 92.68150, -0.02024,\n\t\t149.62698, 59.14407, 174.04569, -129.26785,\n\t\t-55.99789, -238.01484, -212.51618, -115.94914,\n\t\t-0.01720, -0.00158,\n\t\t-13.65602, 17.47396, 0.16714, 32.66367,\n\t\t16.30095, 9.18345, 3.98555, -5.39985,\n\t\t-1.09958, -0.86072,\n\t\t0.02752, -0.02474, 0.00671, -0.00278,\n\t\t-0.21030, -0.73658, 0.20708, -0.21378,\n\t\t0.78462, -2.14051, -1.60070, -2.60915,\n\t\t-5.02441, -1.19246,\n\t\t0.67622, -0.41889, 0.07430, -0.53204,\n\t\t-0.11214, -0.03417,\n\t\t-0.72636, -0.15535, -0.16815, -0.35603,\n\t\t0.07530, -0.02521,\n\t\t-0.01261, -0.94883, 0.39930, -0.05370,\n\t\t-2.77309, 0.38431,\n\t\t0.72127, -0.52030, -0.01804, -0.51188,\n\t\t-0.11993, 0.02189,\n\t\t0.00928, -0.02129,\n\t\t-0.02760, 0.00441,\n\t\t-0.56832, -0.48114, 0.64192, -0.65656,\n\t\t0.37483, 0.51883,\n\t\t-0.08474, 0.20324, 0.12783, 0.13041,\n\t\t-0.01545, -0.00282,\n\t\t-0.16196, -0.26980, 0.06584, -0.09987,\n\t\t-0.36305, -0.27610, -0.57074, -0.13607,\n\t\t-0.00824, 0.00369,\n\t\t0.06094, -0.12214, 0.03581, -0.00876,\n\t\t0.49346, -0.74596, 0.47814, 0.18201,\n\t\t-1.00640, 0.24465,\n\t\t10.09808, 2.30496, 13.63359, -7.94007,\n\t\t0.29792, -13.55724, -6.48556, -5.99581,\n\t\t0.69686, -0.22434, 0.23198, -0.35579,\n\t\t-0.04736, -0.05683,\n\t\t0.36710, -0.16571, 0.14876, 0.21824,\n\t\t-0.18940, -0.15063, -0.23692, -0.09990,\n\t\t-0.08923, -0.12222, 0.02998, -0.04560,\n\t\t-0.16229, 0.04552,\n\t\t-0.33051, 0.02585,\n\t\t-0.00622, 0.01583,\n\t\t0.15436, -0.07109, 0.06429, 0.09218,\n\t\t-0.01277, -0.00019,\n\t\t0.02345, -0.01057,\n\t\t-0.07294, 0.02506,\n\t\t0.62063, -0.52533, 0.16814, -0.77168,\n\t\t-0.20614, -0.31828,\n\t\t-0.12856, 0.01316,\n\t\t-0.01522, -0.00126,\n\t\t0.01558, 0.04765,\n\t\t-0.02776, 0.01166,\n\t\t-0.05185, 0.00674,\n\t\t0.00754, 0.02183,\n\t\t-0.00645, -0.01050,\n\t\t-0.02155, 0.00375,\n\t\t0.12040, -0.00004\n\t],\n\targ_tbl: [\n\t\t0, 6,\n\t\t3, 2, 5, -6, 6, 3, 7, 0,\n\t\t2, 2, 5, -5, 6, 6,\n\t\t3, 1, 5, -2, 6, -3, 8, 0,\n\t\t2, 4, 5, -10, 6, 4,\n\t\t3, 2, 5, -4, 6, -3, 7, 1,\n\t\t3, 3, 5, -10, 6, 7, 7, 0,\n\t\t2, 6, 5, -15, 6, 0,\n\t\t3, 1, 5, -4, 6, 4, 7, 0,\n\t\t3, 3, 5, -8, 6, 2, 7, 0,\n\t\t3, 1, 5, -3, 6, 1, 7, 0,\n\t\t3, 1, 5, -3, 6, 2, 7, 0,\n\t\t1, 1, 7, 1,\n\t\t2, 5, 5, -12, 6, 0,\n\t\t3, 2, 5, -7, 6, 7, 7, 0,\n\t\t3, 1, 5, -1, 6, -3, 7, 0,\n\t\t2, 3, 5, -7, 6, 3,\n\t\t3, 1, 5, -4, 6, 3, 7, 0,\n\t\t2, 1, 5, -2, 6, 3,\n\t\t3, 3, 5, -8, 6, 3, 7, 0,\n\t\t2, 1, 5, -3, 6, 3,\n\t\t3, 1, 5, -3, 6, 3, 7, 0,\n\t\t2, 3, 5, -8, 6, 2,\n\t\t3, 2, 5, -5, 6, 2, 7, 0,\n\t\t1, 2, 7, 0,\n\t\t2, 4, 5, -9, 6, 3,\n\t\t2, 2, 5, -4, 6, 4,\n\t\t1, 1, 6, 2,\n\t\t3, 2, 5, -5, 6, 3, 7, 0,\n\t\t2, 2, 5, -6, 6, 2,\n\t\t2, 5, 5, -11, 6, 1,\n\t\t3, 1, 5, -2, 7, -2, 8, 0,\n\t\t2, 1, 5, -3, 7, 1,\n\t\t2, 3, 5, -6, 6, 3,\n\t\t2, 1, 5, -1, 6, 2,\n\t\t2, 1, 5, -4, 6, 2,\n\t\t2, 3, 5, -9, 6, 0,\n\t\t3, 2, 5, -4, 6, 2, 7, 0,\n\t\t2, 1, 5, -2, 7, 1,\n\t\t2, 6, 5, -13, 6, 0,\n\t\t3, 2, 5, -2, 6, -3, 7, 0,\n\t\t2, 4, 5, -8, 6, 3,\n\t\t2, 3, 6, -3, 7, 0,\n\t\t3, 6, 5, -14, 6, 3, 7, 0,\n\t\t3, 1, 5, -2, 7, 1, 8, 0,\n\t\t2, 2, 5, -3, 6, 2,\n\t\t3, 1, 5, -4, 7, 5, 8, 0,\n\t\t3, 2, 5, -8, 6, 3, 7, 0,\n\t\t3, 4, 5, -9, 6, 3, 7, 0,\n\t\t1, 2, 6, 3,\n\t\t3, 2, 5, -4, 6, 3, 7, 0,\n\t\t2, 2, 5, -7, 6, 2,\n\t\t2, 1, 5, -2, 8, 0,\n\t\t2, 1, 5, -1, 7, 0,\n\t\t3, 3, 5, -6, 6, 2, 7, 0,\n\t\t3, 4, 5, -8, 6, 2, 8, 0,\n\t\t2, 1, 5, -1, 8, 0,\n\t\t3, 2, 5, -3, 6, 1, 7, 0,\n\t\t2, 7, 5, -15, 6, 2,\n\t\t3, 3, 5, -4, 6, -3, 7, 1,\n\t\t2, 5, 5, -10, 6, 4,\n\t\t3, 1, 5, 1, 6, -3, 7, 1,\n\t\t3, 7, 5, -16, 6, 3, 7, 0,\n\t\t2, 3, 5, -5, 6, 4,\n\t\t3, 1, 5, -6, 6, 3, 7, 0,\n\t\t3, 5, 5, -11, 6, 3, 7, 0,\n\t\t1, 1, 5, 5,\n\t\t3, 3, 5, -11, 6, 3, 7, 0,\n\t\t3, 3, 5, -6, 6, 3, 7, 0,\n\t\t2, 2, 5, -7, 7, 0,\n\t\t2, 1, 5, -5, 6, 3,\n\t\t3, 1, 5, -1, 6, 3, 7, 0,\n\t\t2, 3, 5, -10, 6, 3,\n\t\t3, 2, 5, -3, 6, 2, 7, 0,\n\t\t2, 1, 5, 1, 7, 0,\n\t\t3, 2, 5, -1, 6, -3, 7, 0,\n\t\t2, 4, 5, -7, 6, 3,\n\t\t2, 4, 6, -3, 7, 0,\n\t\t2, 2, 5, -2, 6, 4,\n\t\t3, 4, 5, -8, 6, 3, 7, 0,\n\t\t1, 3, 6, 3,\n\t\t3, 2, 5, -3, 6, 3, 7, 0,\n\t\t2, 5, 5, -9, 6, 3,\n\t\t2, 3, 5, -4, 6, 2,\n\t\t2, 1, 5, 1, 6, 2,\n\t\t2, 2, 5, -4, 7, 0,\n\t\t2, 6, 5, -11, 6, 2,\n\t\t2, 2, 5, -3, 7, 0,\n\t\t2, 4, 5, -6, 6, 2,\n\t\t2, 2, 5, -1, 6, 2,\n\t\t1, 4, 6, 1,\n\t\t2, 2, 5, -2, 7, 0,\n\t\t2, 5, 5, -8, 6, 2,\n\t\t2, 3, 5, -3, 6, 2,\n\t\t2, 1, 5, 2, 6, 2,\n\t\t2, 2, 5, -2, 8, 0,\n\t\t2, 2, 5, -1, 7, 0,\n\t\t2, 6, 5, -10, 6, 3,\n\t\t2, 4, 5, -5, 6, 3,\n\t\t2, 6, 6, -3, 7, 0,\n\t\t1, 2, 5, 5,\n\t\t3, 4, 5, -6, 6, 3, 7, 0,\n\t\t1, 5, 6, 4,\n\t\t2, 2, 5, -10, 6, 1,\n\t\t2, 5, 5, -7, 6, 1,\n\t\t2, 3, 5, -2, 6, 2,\n\t\t2, 1, 5, 3, 6, 2,\n\t\t2, 6, 5, -9, 6, 2,\n\t\t2, 4, 5, -4, 6, 2,\n\t\t2, 2, 5, 1, 6, 2,\n\t\t2, 7, 5, -11, 6, 0,\n\t\t2, 3, 5, -3, 7, 0,\n\t\t2, 5, 5, -6, 6, 2,\n\t\t2, 3, 5, -1, 6, 1,\n\t\t2, 3, 5, -2, 7, 0,\n\t\t2, 6, 5, -8, 6, 1,\n\t\t2, 4, 5, -3, 6, 1,\n\t\t2, 2, 5, 2, 6, 0,\n\t\t2, 7, 5, -10, 6, 1,\n\t\t2, 5, 5, -5, 6, 2,\n\t\t1, 3, 5, 3,\n\t\t2, 1, 5, 5, 6, 2,\n\t\t2, 6, 5, -7, 6, 1,\n\t\t2, 4, 5, -2, 6, 1,\n\t\t2, 7, 5, -9, 6, 1,\n\t\t2, 5, 5, -4, 6, 0,\n\t\t2, 6, 5, -6, 6, 0,\n\t\t2, 4, 5, -1, 6, 0,\n\t\t2, 7, 5, -8, 6, 1,\n\t\t2, 5, 5, -3, 6, 0,\n\t\t2, 8, 5, -10, 6, 0,\n\t\t2, 6, 5, -5, 6, 0,\n\t\t1, 4, 5, 2,\n\t\t2, 7, 5, -7, 6, 0,\n\t\t2, 5, 5, -2, 6, 0,\n\t\t2, 8, 5, -9, 6, 0,\n\t\t2, 7, 5, -6, 6, 0,\n\t\t2, 8, 5, -8, 6, 0,\n\t\t2, 9, 5, -10, 6, 0,\n\t\t1, 5, 5, 0,\n\t\t2, 9, 5, -9, 6, 0,\n\t\t2, 1, 3, -1, 5, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/jupiter.js?");

/***/ }),

/***/ "./src/ptables/mars.js":
/*!*****************************!*\
  !*** ./src/ptables/mars.js ***!
  \*****************************/
/*! exports provided: marsPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"marsPTable\", function() { return marsPTable; });\nconst marsPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 5, 12, 24, 9, 7, 3, 2, 0],\n\tmax_power_of_t: 5,\n\tdistance: 1.5303348827100001e+00,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t43471.66140, 21291.11063, 2033.37848, 6890507597.78366,\n\t\t1279543.73631,\n\t\t317.74183, 730.69258, -15.26502, 277.56960,\n\t\t-62.96711, 20.96285,\n\t\t1.01857, -2.19395,\n\t\t3.75708, 3.65854, 0.01049, 1.09183,\n\t\t-0.00605, -0.04769,\n\t\t0.41839, 0.10091, 0.03887, 0.11666,\n\t\t-0.03301, 0.02664,\n\t\t0.38777, -0.56974,\n\t\t0.02974, -0.15041, 0.02179, -0.00808,\n\t\t0.08594, 0.09773,\n\t\t-0.00902, -0.04597, 0.00762, -0.03858,\n\t\t-0.00139, 0.01562,\n\t\t0.02019, 0.01878,\n\t\t-0.01244, 0.00795,\n\t\t0.00815, 0.03501,\n\t\t-0.00335, -0.02970,\n\t\t-0.00518, -0.01763,\n\t\t0.17257, 0.14698, -0.14417, 0.26028,\n\t\t0.00062, -0.00180,\n\t\t13.35262, 39.38771, -15.49558, 22.00150,\n\t\t-7.71321, -4.20035, 0.62074, -1.42376,\n\t\t0.07043, -0.06670, 0.16960, -0.06859,\n\t\t0.07787, 0.01845,\n\t\t-0.01608, -0.00914,\n\t\t5.60438, -3.44436, 5.88876, 6.77238,\n\t\t-5.29704, 3.48944,\n\t\t0.01291, 0.01280,\n\t\t-0.53532, 0.86584, 0.79604, 0.31635,\n\t\t-3.92977, -0.94829, -0.74254, -1.37947,\n\t\t0.17871, -0.12477,\n\t\t0.00171, 0.11537,\n\t\t0.02281, -0.03922,\n\t\t-0.00165, 0.02965,\n\t\t1.59773, 1.24565, -0.35802, 1.37272,\n\t\t-0.44811, -0.08611,\n\t\t3.04184, -3.39729, 8.86270, 6.65967,\n\t\t-9.10580, 10.66103,\n\t\t0.02015, -0.00902,\n\t\t-0.01166, -0.23957, -0.12128, -0.04640,\n\t\t-0.07114, 0.14053, -0.04966, -0.01665,\n\t\t0.28411, -0.37754, -1.26265, 1.01377,\n\t\t3.70433, -0.21025,\n\t\t-0.00972, 0.00350,\n\t\t0.00997, 0.00450,\n\t\t-2.15305, 3.18147, -1.81957, -0.02321,\n\t\t-0.02560, -0.35188,\n\t\t0.00003, -0.01110,\n\t\t0.00244, -0.05083,\n\t\t-0.00216, -0.02026,\n\t\t0.05179, 0.04188,\n\t\t5.92031, -1.61316, 3.72001, 6.98783,\n\t\t-4.17690, 2.61250,\n\t\t0.04157, 2.76453, -1.34043, 0.74586,\n\t\t-0.20258, -0.30467,\n\t\t0.00733, 0.00376,\n\t\t1.72800, 0.76593, 1.26577, -2.02682,\n\t\t-1.14637, -0.91894,\n\t\t-0.00002, 0.00036,\n\t\t2.54213, 0.89533, -0.04166, 2.36838,\n\t\t-0.97069, 0.05486,\n\t\t0.46927, 0.04500, 0.23388, 0.35005,\n\t\t1.61402, 2.30209, -0.99859, 1.63349,\n\t\t-0.51490, -0.26112,\n\t\t0.27848, -0.26100, -0.07645, -0.22001,\n\t\t0.92901, 1.12627, -0.39829, 0.77120,\n\t\t-0.23716, -0.11245,\n\t\t-0.02387, 0.03960,\n\t\t-0.00802, 0.02179,\n\t\t2.86448, 1.00246, -0.14647, 2.80278,\n\t\t-1.14143, 0.05177,\n\t\t1.68671, -1.23451, 3.16285, 0.70070,\n\t\t0.25817, 3.17416,\n\t\t0.07447, -0.08116, -0.03029, -0.02795,\n\t\t0.00816, 0.01023,\n\t\t0.00685, -0.01075,\n\t\t-0.34268, 0.03680, -0.05488, -0.07430,\n\t\t-0.00041, -0.02968,\n\t\t3.13228, -0.83209, 1.95765, 3.78394,\n\t\t-2.26196, 1.38520,\n\t\t-0.00401, -0.01397,\n\t\t1.01604, -0.99485, 0.62465, 0.22431,\n\t\t-0.05076, 0.12025,\n\t\t4.35229, -5.04483, 14.87533, 9.00826,\n\t\t-10.37595, 19.26596,\n\t\t0.40352, 0.19895, 0.09463, -0.10774,\n\t\t-0.17809, -0.08979, -0.00796, -0.04313,\n\t\t0.01520, -0.03538,\n\t\t1.53301, -1.75553, 4.87236, 3.23662,\n\t\t-3.62305, 6.42351,\n\t\t-0.00439, -0.01305,\n\t\t0.17194, -0.64003, 0.26609, 0.06600,\n\t\t0.01767, -0.00251,\n\t\t-0.08871, -0.15523, 0.01201, -0.03408,\n\t\t-0.29126, -0.07093, -0.00998, -0.07876,\n\t\t1.05932, -25.38650,\n\t\t-0.29354, 0.04179, -0.01726, 0.07473,\n\t\t-0.07607, -0.08859, 0.00842, -0.02359,\n\t\t0.47858, -0.39809, 1.25061, 0.87017,\n\t\t-0.82453, 1.56864,\n\t\t-0.00463, 0.02385,\n\t\t-0.29070, 8.56535,\n\t\t-0.12495, 0.06580, -0.03395, -0.02465,\n\t\t-1.06759, 0.47004, -0.40281, -0.23957,\n\t\t0.03572, -0.07012,\n\t\t0.00571, -0.00731,\n\t\t0.18601, -1.34068,\n\t\t0.03798, -0.00532, 0.00448, -0.01147,\n\t\t1.41208, -0.00668, 0.25883, 1.23788,\n\t\t-0.57774, 0.09166,\n\t\t-2.49664, -0.25235, -0.53582, -0.80126,\n\t\t0.10827, -0.08861,\n\t\t-0.03577, 0.06825,\n\t\t-0.00143, 0.04633,\n\t\t0.01586, -0.01056,\n\t\t-0.02106, 0.03804,\n\t\t-0.00088, -0.03458,\n\t\t-0.00033, -0.01079,\n\t\t0.05821, -0.02445,\n\t\t0.00602, 0.00721,\n\t\t-0.00315, -0.01021,\n\t\t-0.65454, 1.08478, -0.44593, -0.21492,\n\t\t-1.35004, 4.47299, -4.19170, 3.51236,\n\t\t1946.04629, 13960.88247, 576.24572, 8023.81797,\n\t\t2402.48512, -753.87007, -6376.99217, -10278.88014,\n\t\t-25743.89874, 15506.87748, 15609.59853, 35173.63133,\n\t\t-3.70370, 6.29538, -4.84183, -0.76942,\n\t\t-0.02465, -0.03840,\n\t\t0.00565, -0.06071,\n\t\t0.01174, 0.00253,\n\t\t-0.00230, 0.05252,\n\t\t-0.02813, 0.01359,\n\t\t0.23208, 0.03393, 0.01734, 0.04838,\n\t\t-0.46340, -0.18941, 0.25428, -0.56925,\n\t\t0.05213, 0.24704, 0.12922, -0.01531,\n\t\t0.06885, -0.08510, 0.01853, -0.00390,\n\t\t0.01196, -0.30530, 0.13117, -0.03533,\n\t\t1.79597, -0.42743, 0.98545, 2.13503,\n\t\t-1.32942, 0.68005,\n\t\t-0.01226, 0.00571,\n\t\t0.31081, 0.34932, 0.34531, -0.32947,\n\t\t-0.00548, 0.00186, -0.00157, -0.00065,\n\t\t0.30877, -0.03864, 0.04921, 0.06693,\n\t\t0.01761, -0.04119,\n\t\t1.28318, 0.38546, 0.06462, 1.18337,\n\t\t-0.48698, 0.07086,\n\t\t0.26031, -0.22813, 0.10272, 0.04737,\n\t\t-0.04506, -0.38581, -0.16624, -0.04588,\n\t\t0.00992, 0.00722,\n\t\t-0.21041, 0.20560, -0.09267, -0.03438,\n\t\t0.32264, -0.07383,\n\t\t0.09553, -0.38730, 0.17109, -0.01342,\n\t\t-0.02336, -0.01286,\n\t\t0.00230, 0.04626,\n\t\t0.01176, 0.01868,\n\t\t-0.15411, -0.32799, 0.22083, -0.14077,\n\t\t1.98392, 1.68058,\n\t\t-0.02526, -0.13164, -0.04447, -0.00153,\n\t\t0.01277, 0.00553,\n\t\t-0.26035, -0.11362, 0.14672, -0.32242,\n\t\t0.16686, -0.69957, 0.40091, -0.06721,\n\t\t0.00837, 0.09635,\n\t\t-0.08545, 0.25178, -0.22486, 16.03256,\n\t\t0.34130, -0.06313, 0.01469, -0.09012,\n\t\t-0.00744, -0.02510,\n\t\t-0.08492, -0.13733,\n\t\t-0.07620, -0.15329, 0.13716, -0.03769,\n\t\t2.01176, -1.35991, -1.04319, -2.97226,\n\t\t-0.01433, 0.61219,\n\t\t-0.55522, 0.38579, 0.31831, 0.81843,\n\t\t-0.04583, -0.14585,\n\t\t-0.10218, 0.16039, -0.06552, -0.01802,\n\t\t0.06480, -0.06641, 0.01672, -0.00287,\n\t\t0.00308, 0.09982, -0.05679, -0.00249,\n\t\t-0.36034, 0.52385, -0.29759, 0.59539,\n\t\t-3.59641, -1.02499,\n\t\t-547.53774, 734.11470, 441.86760, -626.68255,\n\t\t-2255.81376, -1309.01028, -2025.69590, 2774.69901,\n\t\t1711.21478, 1509.99797,\n\t\t-0.99274, 0.61858, -0.47634, -0.33034,\n\t\t0.00261, 0.01183,\n\t\t-0.00038, 0.11687,\n\t\t0.00994, -0.01122,\n\t\t0.03482, -0.01942,\n\t\t-0.11557, 0.38237, -0.17826, 0.00830,\n\t\t0.01193, -0.05469,\n\t\t0.01557, 0.01747,\n\t\t0.02730, -0.01182,\n\t\t-0.11284, 0.12939, -0.05621, -0.01615,\n\t\t0.04258, 0.01058,\n\t\t-0.01723, 0.00963,\n\t\t0.20666, 0.11742,\n\t\t0.07830, -0.02922,\n\t\t-0.10659, -0.05407, 0.07254, -0.13005,\n\t\t-0.02365, 0.24583, 0.31915, 1.27060,\n\t\t0.00009, -0.21541,\n\t\t-0.55324, -0.45999, -1.45885, 0.86530,\n\t\t0.85932, 1.92999,\n\t\t-0.00755, -0.00715,\n\t\t-0.02004, -0.00788,\n\t\t0.01539, 0.00837,\n\t\t0.27652, -0.50297, -0.26703, -0.28159,\n\t\t0.03950, 0.07182,\n\t\t-0.07177, 0.14140, 0.07693, 0.07564,\n\t\t-0.01316, -0.01259,\n\t\t0.01529, 0.07773,\n\t\t-90.74225, -378.15784, -510.30190, -52.35396,\n\t\t-89.15267, 415.56828, 181.52119, 54.01570,\n\t\t-0.01093, -0.05931,\n\t\t-0.01344, -0.02390,\n\t\t0.01432, -0.02470,\n\t\t-0.01509, -0.01346,\n\t\t0.03352, 0.02248,\n\t\t0.02588, -0.00948,\n\t\t0.03610, 0.17238,\n\t\t0.02909, -0.04065,\n\t\t0.00155, -0.07025,\n\t\t-0.09508, 0.14487, 0.12441, 0.16451,\n\t\t0.00001, -0.00005,\n\t\t-0.00982, -0.01895,\n\t\t-0.16968, 0.36565, 0.20234, 0.17789,\n\t\t-0.04519, -0.00588,\n\t\t0.01268, 0.00107,\n\t\t-56.32137, -58.22145, -80.55270, 28.14532,\n\t\t11.43301, 52.05752, 17.79480, -2.61997,\n\t\t-0.00005, -0.02629,\n\t\t0.01080, -0.00390,\n\t\t0.00744, 0.03132,\n\t\t0.01156, -0.01621,\n\t\t0.02162, 0.02552,\n\t\t0.00075, -0.02497,\n\t\t0.02495, 0.00830,\n\t\t0.03230, 0.00103,\n\t\t-14.84965, -4.50200, -9.73043, 9.40426,\n\t\t4.08054, 5.38571, 1.53731, -1.01288,\n\t\t0.21076, 1.74227, 0.79760, 0.39583,\n\t\t0.09879, -0.16736,\n\t\t-0.00723, -0.01536\n\t],\n\tlat_tbl: [\n\t\t-364.49380, -47.17612, -554.97858, -430.63121,\n\t\t596.44312,\n\t\t-3.94434, -7.43169, -0.06665, -2.23987,\n\t\t0.10366, -0.05567,\n\t\t-0.01463, 0.01908,\n\t\t-0.02611, -0.00350, -0.01057, -0.00610,\n\t\t-0.00015, 0.00002,\n\t\t0.00010, 0.00033, 0.00007, -0.00000,\n\t\t-0.00010, -0.00004,\n\t\t0.00012, 0.00002,\n\t\t-0.00014, -0.00048, -0.00003, -0.00007,\n\t\t0.00008, -0.00005,\n\t\t-0.00043, -0.00003, -0.00010, -0.00004,\n\t\t0.00001, 0.00001,\n\t\t-0.00003, -0.00003,\n\t\t0.00004, 0.00007,\n\t\t-0.00041, 0.00031,\n\t\t0.00076, 0.00062,\n\t\t0.00001, -0.00002,\n\t\t0.00035, 0.00053, 0.00026, 0.00019,\n\t\t0.00020, 0.00010,\n\t\t0.02936, 0.09624, -0.01153, 0.01386,\n\t\t0.00551, -0.00690, 0.00196, 0.00148,\n\t\t-0.00408, -0.00673, -0.00067, -0.00152,\n\t\t-0.00014, -0.00005,\n\t\t0.00000, 0.00005,\n\t\t-0.00116, 0.00276, -0.00391, 0.00983,\n\t\t-0.01327, -0.01986,\n\t\t-0.00003, 0.00001,\n\t\t0.01104, 0.00631, -0.01364, 0.01152,\n\t\t-0.00439, 0.01103, -0.00546, 0.00181,\n\t\t-0.00039, -0.00083,\n\t\t0.00007, 0.00002,\n\t\t-0.00010, -0.00008,\n\t\t0.00005, 0.00002,\n\t\t-0.00584, 0.00512, -0.00722, -0.00174,\n\t\t0.00101, -0.00316,\n\t\t-0.02229, -0.02797, -0.10718, 0.05741,\n\t\t0.11403, 0.10033,\n\t\t0.00036, -0.00022,\n\t\t0.00787, 0.01191, 0.01756, -0.02121,\n\t\t-0.00169, -0.00364, 0.00070, -0.00051,\n\t\t0.01850, -0.06836, 0.21471, 0.00162,\n\t\t-0.29165, 0.16799,\n\t\t-0.00002, 0.00011,\n\t\t-0.00075, -0.00077,\n\t\t-0.00675, -0.00814, 0.00029, -0.00599,\n\t\t0.00107, 0.00013,\n\t\t0.00010, -0.00002,\n\t\t0.00005, 0.00020,\n\t\t0.00355, 0.00306,\n\t\t-0.00013, -0.00061,\n\t\t-0.02950, -0.00847, 0.01037, -0.04783,\n\t\t0.04237, 0.11662,\n\t\t-0.00331, 0.00207, -0.00107, -0.00264,\n\t\t0.00072, -0.00023,\n\t\t-0.00151, 0.00146,\n\t\t-0.12847, 0.02294, 0.03611, 0.19705,\n\t\t0.16855, -0.28279,\n\t\t-0.00000, -0.00002,\n\t\t-0.00525, -0.03619, 0.05048, -0.00481,\n\t\t-0.00745, 0.04618,\n\t\t0.00286, 0.00443, 0.00521, -0.00351,\n\t\t0.00200, 0.00474, -0.00149, 0.00031,\n\t\t-0.00003, 0.00029,\n\t\t0.00686, 0.02467, 0.04275, -0.02223,\n\t\t0.02282, -0.04228, 0.03312, 0.01847,\n\t\t-0.01253, 0.01601,\n\t\t0.00076, 0.00091,\n\t\t0.00045, 0.00035,\n\t\t0.00658, 0.01586, -0.00310, 0.00628,\n\t\t-0.00045, 0.00316,\n\t\t-0.01602, -0.00340, -0.01744, 0.04907,\n\t\t0.06426, 0.02275,\n\t\t-0.00217, -0.00377, -0.00091, 0.00037,\n\t\t0.00040, -0.00003,\n\t\t-0.00017, -0.00027,\n\t\t0.00366, 0.02693, -0.00934, 0.00386,\n\t\t0.00616, -0.00037,\n\t\t0.02028, 0.02120, -0.01768, 0.02421,\n\t\t0.00102, 0.00877,\n\t\t0.00012, 0.00030,\n\t\t-0.00019, -0.02165, 0.01245, -0.00742,\n\t\t0.00172, 0.00320,\n\t\t-0.17117, -0.12908, -0.43134, 0.15617,\n\t\t0.21216, 0.56432,\n\t\t0.01139, -0.00937, -0.00058, -0.00337,\n\t\t-0.00999, 0.01862, -0.00621, -0.00080,\n\t\t-0.00025, -0.00140,\n\t\t0.09250, 0.01173, -0.03549, 0.14651,\n\t\t-0.01784, 0.00945,\n\t\t0.00000, -0.00006,\n\t\t-0.00500, 0.00086, 0.01079, -0.00002,\n\t\t-0.00012, -0.00029,\n\t\t-0.02661, 0.00140, -0.00524, -0.00460,\n\t\t-0.00352, -0.00563, -0.00277, -0.00052,\n\t\t-0.10171, -0.02001,\n\t\t0.00045, 0.00265, -0.00082, 0.00160,\n\t\t-0.00302, -0.00434, -0.00022, -0.00134,\n\t\t0.03285, 0.02964, -0.05612, -0.00668,\n\t\t-0.01821, 0.06590,\n\t\t0.00039, 0.00061,\n\t\t-0.13531, -0.03831,\n\t\t0.02553, 0.02130, -0.00336, 0.00468,\n\t\t-0.04522, -0.05540, 0.00129, -0.01767,\n\t\t0.00181, 0.00031,\n\t\t-0.00011, -0.00034,\n\t\t-0.00146, 0.01101,\n\t\t-0.00030, 0.00240, -0.00039, 0.00072,\n\t\t-0.01954, -0.03822, 0.09682, -0.04541,\n\t\t-0.01567, 0.09617,\n\t\t-0.03371, 0.33028, -0.12102, 0.05874,\n\t\t-0.00990, -0.02236,\n\t\t0.00109, 0.00158,\n\t\t-0.00482, 0.00019,\n\t\t-0.00036, 0.00004,\n\t\t0.00024, 0.00201,\n\t\t0.00017, 0.00011,\n\t\t-0.00012, 0.00002,\n\t\t-0.00323, -0.01062,\n\t\t-0.00130, 0.00091,\n\t\t0.00056, -0.00017,\n\t\t0.00774, 0.00601, 0.02550, 0.01700,\n\t\t-0.84327, 0.77533, -0.71414, -0.50643,\n\t\t-473.30877, -1504.79179, -458.52274, -865.82237,\n\t\t-417.34994, -681.03976, 765.50697, -1653.67165,\n\t\t4427.33176, 710.53895, -5016.39367, 4280.60361,\n\t\t0.33957, 0.38390, -0.38631, 0.81193,\n\t\t0.00154, -0.00043,\n\t\t0.01103, -0.00017,\n\t\t-0.00046, 0.00221,\n\t\t0.00059, 0.00014,\n\t\t0.00160, 0.00475,\n\t\t0.06191, -0.13289, 0.02884, -0.00566,\n\t\t-0.01572, 0.23780, -0.05140, -0.03228,\n\t\t-0.00716, -0.00978, -0.01048, 0.01317,\n\t\t-0.01267, -0.01198, 0.00037, -0.00330,\n\t\t-0.02305, 0.00355, -0.00121, -0.00496,\n\t\t-0.04369, -0.01343, 0.05347, -0.12433,\n\t\t0.02090, 0.17683,\n\t\t0.00028, -0.00490,\n\t\t-0.02778, -0.05587, -0.01658, 0.05655,\n\t\t0.00204, -0.00092, 0.00020, 0.00014,\n\t\t-0.00603, -0.03829, 0.00778, -0.00588,\n\t\t-0.00266, 0.00097,\n\t\t-0.02158, -0.07742, 0.09306, -0.01827,\n\t\t-0.01048, 0.07885,\n\t\t-0.02485, -0.02505, 0.00471, -0.01026,\n\t\t0.06663, 0.01110, 0.00469, -0.05347,\n\t\t-0.00016, -0.00013,\n\t\t0.02622, 0.02273, -0.01009, 0.01391,\n\t\t-0.01042, -0.00444,\n\t\t-0.04293, -0.00767, -0.00154, -0.01739,\n\t\t0.00353, -0.00763,\n\t\t-0.00060, 0.00010,\n\t\t-0.00053, -0.00146,\n\t\t-0.05317, 0.05760, -0.01801, -0.02099,\n\t\t-0.02611, -0.01836,\n\t\t-0.00256, 0.00812, -0.00145, 0.00054,\n\t\t-0.00008, 0.00015,\n\t\t-0.04087, 0.08860, -0.05385, -0.02134,\n\t\t0.02771, 0.02441, -0.00234, 0.01571,\n\t\t-0.00260, 0.00097,\n\t\t0.10151, 0.49378, -0.28555, 0.11428,\n\t\t-0.00286, 0.01224, 0.00160, 0.00069,\n\t\t0.00000, -0.00040,\n\t\t-0.13286, 0.00448,\n\t\t0.01225, -0.00568, 0.00341, 0.00224,\n\t\t-0.23483, -0.07859, 0.30733, -0.21548,\n\t\t-0.02608, 0.00756,\n\t\t0.09789, 0.02878, -0.11968, 0.08981,\n\t\t0.02046, -0.00888,\n\t\t0.02955, 0.01486, -0.00981, 0.01542,\n\t\t-0.01674, -0.01540, 0.00019, -0.00449,\n\t\t-0.02140, 0.00638, 0.00112, -0.00730,\n\t\t-0.08571, 0.13811, -0.16951, -0.02917,\n\t\t-0.03931, -0.32643,\n\t\t-68.64541, -81.00521, -47.97737, 15.75290,\n\t\t181.76392, -36.00647, -48.32098, -259.02226,\n\t\t-265.57466, 554.05904,\n\t\t0.09017, 0.18803, -0.12459, 0.10852,\n\t\t0.00211, 0.00002,\n\t\t0.00304, -0.00370,\n\t\t0.00174, 0.00279,\n\t\t0.00139, 0.00095,\n\t\t0.04881, 0.00262, -0.01020, 0.03762,\n\t\t0.00987, 0.00612,\n\t\t0.00054, -0.00036,\n\t\t0.00009, -0.00094,\n\t\t0.02279, 0.01785, -0.00778, 0.01263,\n\t\t0.00040, -0.00112,\n\t\t-0.00452, -0.00662,\n\t\t0.00483, -0.00030,\n\t\t-0.00054, -0.00205,\n\t\t-0.00052, -0.00362, -0.00215, -0.00247,\n\t\t0.02893, -0.01965, -0.00004, 0.04114,\n\t\t-0.00284, -0.00103,\n\t\t0.01827, -0.07822, 0.18010, 0.04805,\n\t\t-0.21702, 0.18808,\n\t\t0.00095, -0.00132,\n\t\t-0.01488, 0.00746,\n\t\t0.00198, 0.00190,\n\t\t0.01032, 0.03392, 0.04318, -0.07332,\n\t\t-0.01004, 0.00787,\n\t\t-0.00308, -0.01177, -0.01431, 0.02659,\n\t\t0.00273, -0.00374,\n\t\t-0.02545, 0.00644,\n\t\t28.68376, 13.74978, 29.60401, -47.98255,\n\t\t-65.91944, -18.48404, -1.73580, 64.67487,\n\t\t-0.02492, 0.00104,\n\t\t-0.00829, -0.00134,\n\t\t0.00077, 0.00005,\n\t\t-0.00513, 0.00403,\n\t\t0.00071, -0.00047,\n\t\t-0.00023, -0.00063,\n\t\t0.00120, 0.00370,\n\t\t-0.00038, -0.00037,\n\t\t0.00080, -0.00018,\n\t\t0.00866, 0.00156, -0.01064, 0.02131,\n\t\t0.00000, -0.00001,\n\t\t0.00038, -0.00068,\n\t\t-0.00909, -0.02187, -0.02599, 0.05507,\n\t\t-0.00022, -0.01468,\n\t\t0.00032, 0.00500,\n\t\t9.86233, -2.85314, -2.25791, -13.83444,\n\t\t-12.38794, 3.79861, 2.76343, 6.63505,\n\t\t0.00066, 0.00007,\n\t\t-0.00016, -0.00039,\n\t\t0.00014, 0.00059,\n\t\t-0.00031, -0.00024,\n\t\t-0.00168, 0.00259,\n\t\t0.00007, -0.00005,\n\t\t-0.00052, 0.00558,\n\t\t0.00110, 0.01037,\n\t\t1.59224, -2.37284, -2.00023, -2.28280,\n\t\t-1.49571, 1.48293, 0.60041, 0.56376,\n\t\t-0.54386, 0.03568, -0.10392, 0.31005,\n\t\t0.09104, 0.03015,\n\t\t0.00826, -0.00524\n\t],\n\trad_tbl: [\n\t\t-816.07287, -381.41365, -33.69436, 177.22955,\n\t\t0.18630,\n\t\t-8.29605, -11.15519, -0.57407, -3.53642,\n\t\t0.16663, -0.06334,\n\t\t-0.03056, 0.02767,\n\t\t-0.04161, 0.03917, -0.02425, 0.00204,\n\t\t-0.00034, 0.00023,\n\t\t0.00058, -0.00111, 0.00039, -0.00015,\n\t\t0.00006, -0.00023,\n\t\t0.00237, 0.00191,\n\t\t0.00154, -0.00029, 0.00009, 0.00011,\n\t\t-0.00041, 0.00037,\n\t\t-0.00010, -0.00064, 0.00015, -0.00005,\n\t\t0.00012, -0.00003,\n\t\t-0.00034, 0.00026,\n\t\t0.00011, -0.00007,\n\t\t-0.00158, 0.00087,\n\t\t0.00278, 0.00137,\n\t\t0.00024, -0.00020,\n\t\t0.00530, -0.00448, 0.00780, 0.00408,\n\t\t0.00062, 0.00035,\n\t\t-1.35261, 0.79891, -0.81597, -0.43774,\n\t\t0.14713, -0.27415, 0.05298, 0.02230,\n\t\t-0.02089, -0.01070, -0.00374, 0.00342,\n\t\t-0.00142, 0.00270,\n\t\t-0.00039, 0.00063,\n\t\t0.16024, 0.27088, -0.32127, 0.27467,\n\t\t-0.16615, -0.24460,\n\t\t-0.00073, 0.00032,\n\t\t-0.05710, -0.05265, -0.06025, 0.05120,\n\t\t-0.05295, 0.23477, -0.08211, 0.04575,\n\t\t-0.00769, -0.01067,\n\t\t-0.00570, 0.00015,\n\t\t-0.00251, -0.00140,\n\t\t-0.00131, -0.00018,\n\t\t-0.12246, 0.15836, -0.13065, -0.03222,\n\t\t0.00795, -0.04232,\n\t\t-0.36585, -0.31154, 0.68504, -0.96006,\n\t\t1.19304, 0.88631,\n\t\t0.00132, 0.00046,\n\t\t0.13105, 0.04252, 0.05164, -0.06837,\n\t\t-0.01351, -0.01458, 0.00376, -0.00557,\n\t\t0.28532, -0.17290, -0.53946, -0.79365,\n\t\t-0.95246, 0.74984,\n\t\t0.00019, 0.00132,\n\t\t-0.00163, -0.00295,\n\t\t-0.40106, -0.26573, -0.00155, -0.22655,\n\t\t0.04349, -0.00376,\n\t\t0.00149, -0.00001,\n\t\t0.00523, 0.00078,\n\t\t0.01203, 0.00558,\n\t\t-0.00708, 0.00520,\n\t\t-0.36428, -1.28827, 1.50845, -0.83063,\n\t\t0.58802, 0.89998,\n\t\t-0.55256, 0.01255, -0.15169, -0.26715,\n\t\t0.06061, -0.04122,\n\t\t-0.00397, 0.00534,\n\t\t-0.52576, 1.22031, 1.44098, 0.92406,\n\t\t0.67214, -0.85486,\n\t\t-0.00010, 0.00001,\n\t\t0.28820, -0.84198, 0.78291, 0.00251,\n\t\t0.02398, 0.32093,\n\t\t-0.02331, 0.10109, -0.07555, 0.03557,\n\t\t-0.61580, 0.43399, -0.43779, -0.26390,\n\t\t0.06885, -0.13803,\n\t\t0.17694, 0.19245, 0.15119, -0.05100,\n\t\t0.49469, -0.45028, 0.33590, 0.15677,\n\t\t-0.04702, 0.10265,\n\t\t-0.00942, -0.00580,\n\t\t-0.00555, -0.00252,\n\t\t-0.32933, 0.92539, -0.91004, -0.04490,\n\t\t-0.01812, -0.37121,\n\t\t0.34695, 0.50855, -0.24721, 0.86063,\n\t\t-0.84747, 0.01983,\n\t\t0.01948, 0.02039, 0.00748, -0.00727,\n\t\t-0.00271, 0.00220,\n\t\t0.00309, 0.00196,\n\t\t0.02030, 0.17201, -0.03716, 0.02801,\n\t\t0.01871, 0.00002,\n\t\t0.31736, 1.17319, -1.42245, 0.73416,\n\t\t-0.52302, -0.85056,\n\t\t0.00522, -0.00126,\n\t\t0.33571, 0.34594, -0.07709, 0.21114,\n\t\t-0.04066, -0.01742,\n\t\t1.72228, 1.46934, -3.06437, 5.06723,\n\t\t-6.53800, -3.55839,\n\t\t-0.06933, 0.13815, 0.03684, 0.03284,\n\t\t-0.04841, 0.09571, -0.02350, 0.00418,\n\t\t0.01302, 0.00579,\n\t\t0.73408, 0.64718, -1.37437, 2.04816,\n\t\t-2.70756, -1.52808,\n\t\t0.00523, -0.00166,\n\t\t0.25915, 0.06900, -0.02758, 0.10707,\n\t\t0.00062, 0.00744,\n\t\t-0.08117, 0.04840, -0.01806, -0.00637,\n\t\t0.03034, -0.12414, 0.03419, -0.00388,\n\t\t10.92603, 0.48169,\n\t\t-0.01753, -0.12853, -0.03207, -0.00801,\n\t\t0.03904, -0.03326, 0.01033, 0.00366,\n\t\t0.17249, 0.20846, -0.38157, 0.54639,\n\t\t-0.68518, -0.36121,\n\t\t-0.01043, -0.00186,\n\t\t-3.33843, -0.16353,\n\t\t0.03462, 0.06669, -0.01305, 0.01803,\n\t\t-0.22703, -0.52219, 0.11709, -0.19628,\n\t\t0.03410, 0.01741,\n\t\t0.00338, 0.00265,\n\t\t0.63213, 0.08944,\n\t\t0.00236, 0.01829, 0.00546, 0.00218,\n\t\t0.00073, -0.72570, 0.63698, -0.13340,\n\t\t0.04698, 0.29716,\n\t\t-0.13126, 1.27705, -0.40980, 0.27400,\n\t\t-0.04525, -0.05529,\n\t\t-0.03249, -0.01696,\n\t\t-0.02314, -0.00076,\n\t\t0.00510, 0.00764,\n\t\t-0.01847, -0.01021,\n\t\t0.01688, -0.00044,\n\t\t0.00531, -0.00016,\n\t\t-0.01219, -0.02903,\n\t\t-0.00361, 0.00299,\n\t\t0.00504, -0.00153,\n\t\t-0.53625, -0.32460, 0.10642, -0.22070,\n\t\t-2.21651, -0.66036, -1.74652, -2.08198,\n\t\t-6810.78679, 967.02869, -3915.97140, 291.65905,\n\t\t372.99563, 1196.01966, 5108.01033, -3172.64698,\n\t\t-7685.78246, -12789.43898, -17474.50562, 7757.84703,\n\t\t3.13224, 1.84743, -0.38257, 2.40590,\n\t\t0.01860, -0.01217,\n\t\t0.03004, 0.00278,\n\t\t-0.00125, 0.00579,\n\t\t-0.02673, -0.00112,\n\t\t0.00662, 0.01374,\n\t\t-0.02729, 0.13109, -0.02836, 0.00877,\n\t\t0.12171, -0.27475, 0.34765, 0.15882,\n\t\t-0.12548, 0.02603, 0.00710, 0.06538,\n\t\t-0.04039, -0.03257, -0.00186, -0.00880,\n\t\t0.16643, 0.00707, 0.01918, 0.07156,\n\t\t-0.20459, -0.85107, 1.01832, -0.47158,\n\t\t0.32582, 0.63002,\n\t\t-0.00282, -0.00711,\n\t\t-0.19695, 0.15053, 0.15676, 0.17847,\n\t\t0.00071, 0.00286, -0.00039, 0.00083,\n\t\t0.02009, 0.17859, -0.03894, 0.02805,\n\t\t0.02379, 0.00752,\n\t\t0.17529, -0.57783, 0.53257, -0.02829,\n\t\t0.03211, 0.21777,\n\t\t0.13813, 0.16305, -0.02996, 0.06303,\n\t\t0.21058, -0.02659, 0.02596, -0.08808,\n\t\t-0.00389, 0.00586,\n\t\t0.08986, 0.09204, -0.01480, 0.04031,\n\t\t0.06115, 0.18366,\n\t\t0.25636, 0.06905, 0.00719, 0.11391,\n\t\t0.00636, -0.01113,\n\t\t-0.02808, 0.00150,\n\t\t-0.01219, 0.00832,\n\t\t0.28626, -0.09573, 0.10481, 0.16559,\n\t\t-0.94578, 1.26394,\n\t\t0.08846, -0.01623, 0.00082, -0.02640,\n\t\t-0.00347, 0.00798,\n\t\t0.12873, -0.21248, 0.27999, 0.14348,\n\t\t0.44082, 0.10453, 0.04362, 0.25332,\n\t\t-0.06077, 0.00555,\n\t\t-0.06947, -0.05511, -10.08703, -0.10614,\n\t\t0.04059, 0.21355, 0.05632, 0.00871,\n\t\t0.01599, -0.00531,\n\t\t0.36835, -0.03530,\n\t\t0.09519, -0.04961, 0.02568, 0.08613,\n\t\t0.57033, 0.84599, 1.27123, -0.41266,\n\t\t-0.36937, -0.00655,\n\t\t-0.16547, -0.24000, -0.35213, 0.13345,\n\t\t0.05870, -0.01524,\n\t\t0.06419, 0.04136, -0.00681, 0.02606,\n\t\t-0.02519, -0.02732, -0.00105, -0.00677,\n\t\t-0.03891, 0.00106, 0.00087, -0.02256,\n\t\t-0.20834, -0.14624, -0.23178, -0.11786,\n\t\t0.32479, -1.41222,\n\t\t-303.74549, -202.79324, 260.20290, 184.84320,\n\t\t536.68016, -881.56427, -1125.64824, -791.09928,\n\t\t-596.61162, 659.35664,\n\t\t0.24561, 0.39519, -0.12601, 0.18709,\n\t\t-0.00700, 0.00136,\n\t\t0.30750, 0.00009,\n\t\t0.00443, 0.00384,\n\t\t0.01170, 0.02078,\n\t\t0.15043, 0.04802, 0.00386, 0.06942,\n\t\t0.02107, 0.00495,\n\t\t-0.01067, 0.00951,\n\t\t0.00937, 0.01996,\n\t\t0.04922, 0.04337, -0.00583, 0.02110,\n\t\t-0.00691, 0.02793,\n\t\t-0.00364, -0.00682,\n\t\t-0.09143, 0.15369,\n\t\t0.02043, 0.05451,\n\t\t0.04053, -0.08179, 0.09645, 0.05330,\n\t\t-0.10149, -0.01594, -0.96773, 0.13660,\n\t\t0.17326, 0.00013,\n\t\t0.20990, -0.23184, -0.38407, -0.64733,\n\t\t-0.84754, 0.38889,\n\t\t0.00310, -0.00340,\n\t\t0.00970, -0.00788,\n\t\t-0.01111, 0.00677,\n\t\t0.18147, 0.09968, 0.10170, -0.09233,\n\t\t-0.03165, 0.01790,\n\t\t-0.04727, -0.02364, -0.02546, 0.02451,\n\t\t0.00442, -0.00426,\n\t\t-0.02540, 0.00471,\n\t\t130.42585, -31.30051, 17.99957, -174.75585,\n\t\t-142.96798, -27.89752, -19.42122, 59.14872,\n\t\t-0.01899, 0.00388,\n\t\t-0.01265, 0.00694,\n\t\t0.01966, 0.01140,\n\t\t-0.00439, 0.00503,\n\t\t-0.01867, 0.02826,\n\t\t0.00752, 0.02012,\n\t\t-0.14734, 0.01909,\n\t\t0.03312, 0.02327,\n\t\t0.05843, 0.00061,\n\t\t-0.06958, -0.05798, -0.09174, 0.06242,\n\t\t0.00003, 0.00001,\n\t\t0.00670, -0.00305,\n\t\t-0.13637, -0.06058, -0.06372, 0.07257,\n\t\t0.00209, -0.01369,\n\t\t-0.00044, 0.00355,\n\t\t17.90079, -17.48270, -8.77915, -24.54483,\n\t\t-15.67123, 3.62668, 0.52038, 5.13220,\n\t\t0.02574, 0.00003,\n\t\t0.00339, 0.00919,\n\t\t-0.02778, 0.00464,\n\t\t0.01429, 0.01003,\n\t\t-0.01661, 0.01327,\n\t\t0.02216, 0.00034,\n\t\t-0.00389, 0.01076,\n\t\t-0.00035, 0.00983,\n\t\t1.23731, -4.18017, -2.61932, -2.66346,\n\t\t-1.45540, 1.10310, 0.23322, 0.40775,\n\t\t-0.43623, 0.06212, -0.09900, 0.19456,\n\t\t0.03639, 0.02566,\n\t\t0.00309, -0.00116\n\t],\n\targ_tbl: [\n\t\t0, 4,\n\t\t3, 4, 3, -8, 4, 3, 5, 2,\n\t\t3, 5, 2, -6, 3, -4, 4, 0,\n\t\t2, 2, 5, -5, 6, 1,\n\t\t3, 12, 3, -24, 4, 9, 5, 0,\n\t\t3, 2, 2, 1, 3, -8, 4, 1,\n\t\t3, 11, 3, -21, 4, 2, 5, 0,\n\t\t3, 3, 2, -7, 3, 4, 4, 0,\n\t\t3, 7, 3, -13, 4, -1, 5, 1,\n\t\t3, 1, 3, -2, 4, 2, 6, 0,\n\t\t3, 1, 2, -8, 3, 12, 4, 1,\n\t\t3, 1, 4, -8, 5, 4, 6, 0,\n\t\t3, 1, 4, -7, 5, 2, 6, 0,\n\t\t3, 1, 4, -9, 5, 7, 6, 0,\n\t\t1, 1, 7, 0,\n\t\t2, 1, 5, -2, 6, 0,\n\t\t3, 1, 3, -2, 4, 1, 5, 0,\n\t\t3, 3, 3, -6, 4, 2, 5, 1,\n\t\t3, 12, 3, -23, 4, 3, 5, 0,\n\t\t2, 8, 3, -15, 4, 3,\n\t\t2, 1, 4, -6, 5, 2,\n\t\t3, 2, 2, -7, 3, 7, 4, 0,\n\t\t2, 1, 2, -3, 4, 2,\n\t\t2, 2, 5, -4, 6, 0,\n\t\t1, 1, 6, 1,\n\t\t2, 9, 3, -17, 4, 2,\n\t\t3, 2, 3, -4, 4, 2, 5, 0,\n\t\t3, 2, 3, -4, 4, 1, 5, 0,\n\t\t2, 1, 5, -1, 6, 0,\n\t\t2, 2, 2, -6, 4, 2,\n\t\t2, 1, 3, -2, 4, 2,\n\t\t2, 2, 5, -3, 6, 0,\n\t\t1, 2, 6, 1,\n\t\t2, 3, 5, -5, 6, 1,\n\t\t1, 1, 5, 2,\n\t\t3, 4, 3, -8, 4, 2, 5, 0,\n\t\t2, 1, 5, -5, 6, 0,\n\t\t2, 7, 3, -13, 4, 2,\n\t\t2, 3, 2, -9, 4, 0,\n\t\t2, 2, 5, -2, 6, 0,\n\t\t1, 3, 6, 0,\n\t\t2, 1, 4, -5, 5, 0,\n\t\t2, 2, 3, -4, 4, 2,\n\t\t2, 6, 3, -11, 4, 2,\n\t\t2, 4, 5, -5, 6, 0,\n\t\t1, 2, 5, 2,\n\t\t3, 1, 4, -3, 5, -3, 6, 0,\n\t\t2, 3, 3, -6, 4, 2,\n\t\t2, 1, 4, -4, 5, 1,\n\t\t2, 5, 3, -9, 4, 2,\n\t\t1, 3, 5, 1,\n\t\t2, 4, 3, -8, 4, 2,\n\t\t3, 1, 4, -4, 5, 2, 6, 0,\n\t\t3, 1, 4, -1, 5, -5, 6, 0,\n\t\t2, 4, 3, -7, 4, 2,\n\t\t2, 1, 4, -3, 5, 2,\n\t\t3, 1, 4, -5, 5, 5, 6, 1,\n\t\t3, 1, 4, -4, 5, 3, 6, 0,\n\t\t3, 1, 4, -3, 5, 1, 6, 0,\n\t\t2, 5, 3, -10, 4, 1,\n\t\t1, 4, 5, 0,\n\t\t2, 3, 3, -5, 4, 2,\n\t\t3, 1, 4, -3, 5, 2, 6, 0,\n\t\t2, 1, 4, -5, 6, 2,\n\t\t2, 1, 4, -2, 5, 2,\n\t\t3, 1, 4, -4, 5, 5, 6, 1,\n\t\t2, 6, 3, -12, 4, 1,\n\t\t2, 1, 4, -4, 6, 0,\n\t\t2, 2, 3, -3, 4, 2,\n\t\t2, 10, 3, -18, 4, 0,\n\t\t2, 1, 4, -3, 6, 1,\n\t\t3, 1, 4, -2, 5, 2, 6, 0,\n\t\t2, 7, 3, -14, 4, 1,\n\t\t3, 1, 4, 1, 5, -5, 6, 1,\n\t\t2, 1, 4, -1, 5, 0,\n\t\t3, 1, 4, -3, 5, 5, 6, 1,\n\t\t3, 1, 4, 2, 5, -7, 6, 1,\n\t\t2, 1, 4, -2, 6, 2,\n\t\t3, 1, 4, -2, 5, 3, 6, 0,\n\t\t2, 1, 3, -1, 4, 0,\n\t\t2, 2, 2, -7, 4, 1,\n\t\t2, 9, 3, -16, 4, 2,\n\t\t2, 1, 4, -3, 7, 0,\n\t\t2, 1, 4, -1, 6, 0,\n\t\t3, 1, 4, -2, 5, 4, 6, 1,\n\t\t2, 1, 2, -4, 4, 2,\n\t\t2, 8, 3, -16, 4, 2,\n\t\t2, 1, 4, -2, 7, 0,\n\t\t3, 3, 3, -5, 4, 2, 5, 0,\n\t\t3, 1, 4, 1, 5, -3, 6, 0,\n\t\t2, 1, 4, -2, 8, 0,\n\t\t2, 1, 4, -1, 7, 0,\n\t\t2, 1, 4, -1, 8, 0,\n\t\t3, 3, 2, -7, 3, 3, 4, 0,\n\t\t3, 2, 2, 1, 3, -7, 4, 0,\n\t\t3, 1, 4, 1, 6, -3, 7, 0,\n\t\t3, 1, 4, 2, 5, -5, 6, 1,\n\t\t3, 4, 3, -7, 4, 3, 5, 1,\n\t\t1, 1, 4, 5,\n\t\t3, 4, 3, -9, 4, 3, 5, 1,\n\t\t3, 1, 4, -2, 5, 5, 6, 0,\n\t\t3, 3, 2, -7, 3, 5, 4, 0,\n\t\t3, 1, 3, -1, 4, 2, 6, 0,\n\t\t3, 1, 4, 1, 5, -2, 6, 0,\n\t\t3, 3, 3, -7, 4, 2, 5, 0,\n\t\t2, 8, 3, -14, 4, 1,\n\t\t2, 1, 2, -2, 4, 1,\n\t\t2, 1, 4, 1, 6, 1,\n\t\t2, 9, 3, -18, 4, 1,\n\t\t2, 2, 2, -5, 4, 1,\n\t\t2, 1, 3, -3, 4, 2,\n\t\t2, 1, 4, 2, 6, 0,\n\t\t2, 1, 4, 1, 5, 1,\n\t\t3, 4, 3, -9, 4, 2, 5, 1,\n\t\t2, 7, 3, -12, 4, 1,\n\t\t2, 2, 4, -5, 5, 0,\n\t\t2, 2, 3, -5, 4, 2,\n\t\t2, 6, 3, -10, 4, 1,\n\t\t2, 1, 4, 2, 5, 1,\n\t\t3, 2, 4, -5, 5, 2, 6, 0,\n\t\t2, 3, 3, -7, 4, 1,\n\t\t2, 2, 4, -4, 5, 0,\n\t\t2, 5, 3, -8, 4, 1,\n\t\t2, 1, 4, 3, 5, 0,\n\t\t3, 2, 4, -4, 5, 2, 6, 0,\n\t\t3, 2, 4, -1, 5, -5, 6, 0,\n\t\t2, 4, 3, -6, 4, 1,\n\t\t2, 2, 4, -3, 5, 0,\n\t\t3, 2, 4, -5, 5, 5, 6, 1,\n\t\t3, 2, 4, -4, 5, 3, 6, 0,\n\t\t2, 3, 3, -4, 4, 1,\n\t\t2, 2, 4, -5, 6, 2,\n\t\t2, 2, 4, -2, 5, 1,\n\t\t3, 2, 4, -4, 5, 5, 6, 1,\n\t\t2, 2, 4, -4, 6, 0,\n\t\t2, 2, 3, -2, 4, 0,\n\t\t2, 2, 4, -3, 6, 1,\n\t\t2, 2, 4, -1, 5, 1,\n\t\t2, 2, 4, -2, 6, 0,\n\t\t1, 1, 3, 1,\n\t\t2, 2, 4, -1, 6, 0,\n\t\t2, 1, 2, -5, 4, 1,\n\t\t2, 8, 3, -17, 4, 1,\n\t\t3, 2, 4, 2, 5, -5, 6, 1,\n\t\t3, 4, 3, -6, 4, 3, 5, 1,\n\t\t3, 10, 3, -17, 4, 3, 6, 0,\n\t\t1, 2, 4, 4,\n\t\t3, 4, 3, -10, 4, 3, 5, 1,\n\t\t2, 8, 3, -13, 4, 0,\n\t\t2, 1, 2, -1, 4, 0,\n\t\t2, 2, 4, 1, 6, 0,\n\t\t2, 2, 2, -4, 4, 0,\n\t\t2, 1, 3, -4, 4, 1,\n\t\t2, 2, 4, 1, 5, 0,\n\t\t2, 7, 3, -11, 4, 0,\n\t\t2, 3, 4, -5, 5, 0,\n\t\t2, 2, 3, -6, 4, 1,\n\t\t2, 6, 3, -9, 4, 0,\n\t\t2, 2, 4, 2, 5, 0,\n\t\t2, 3, 4, -4, 5, 0,\n\t\t2, 5, 3, -7, 4, 0,\n\t\t2, 4, 3, -5, 4, 1,\n\t\t2, 3, 4, -3, 5, 1,\n\t\t2, 3, 3, -3, 4, 0,\n\t\t2, 3, 4, -2, 5, 2,\n\t\t3, 3, 4, -4, 5, 5, 6, 0,\n\t\t2, 2, 3, -1, 4, 0,\n\t\t2, 3, 4, -3, 6, 0,\n\t\t2, 3, 4, -1, 5, 1,\n\t\t2, 3, 4, -2, 6, 0,\n\t\t2, 1, 3, 1, 4, 1,\n\t\t2, 3, 4, -1, 6, 0,\n\t\t3, 4, 3, -5, 4, 3, 5, 0,\n\t\t1, 3, 4, 3,\n\t\t3, 4, 3, -11, 4, 3, 5, 0,\n\t\t1, 1, 2, 0,\n\t\t2, 2, 2, -3, 4, 0,\n\t\t2, 1, 3, -5, 4, 0,\n\t\t2, 4, 4, -5, 5, 0,\n\t\t2, 6, 3, -8, 4, 0,\n\t\t2, 4, 4, -4, 5, 0,\n\t\t2, 5, 3, -6, 4, 0,\n\t\t2, 4, 3, -4, 4, 0,\n\t\t2, 4, 4, -3, 5, 1,\n\t\t3, 6, 3, -8, 4, 2, 5, 0,\n\t\t2, 3, 3, -2, 4, 0,\n\t\t2, 4, 4, -2, 5, 1,\n\t\t2, 4, 4, -1, 5, 0,\n\t\t2, 1, 3, 2, 4, 0,\n\t\t1, 4, 4, 3,\n\t\t2, 2, 2, -2, 4, 0,\n\t\t2, 7, 3, -9, 4, 0,\n\t\t2, 5, 4, -5, 5, 0,\n\t\t2, 6, 3, -7, 4, 0,\n\t\t2, 5, 4, -4, 5, 0,\n\t\t2, 5, 3, -5, 4, 0,\n\t\t2, 5, 4, -3, 5, 0,\n\t\t2, 5, 4, -2, 5, 0,\n\t\t1, 5, 4, 3,\n\t\t1, 6, 4, 2,\n\t\t1, 7, 4, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/mars.js?");

/***/ }),

/***/ "./src/ptables/mercury.js":
/*!********************************!*\
  !*** ./src/ptables/mercury.js ***!
  \********************************/
/*! exports provided: mercuryPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mercuryPTable\", function() { return mercuryPTable; });\nconst mercuryPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [11, 14, 10, 11, 4, 5, 2, 0, 0],\n\tmax_power_of_t: 6,\n\tdistance: 3.8709830979999998e-01,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t35.85255, -163.26379, 53810162857.56026, 908082.18475,\n\t\t0.05214, -0.07712,\n\t\t1.07258, 0.04008, 0.49259, 0.00230,\n\t\t0.02324, 0.05869,\n\t\t0.24516, 0.22898, -0.06037, 0.13023,\n\t\t0.00331, -0.03576,\n\t\t0.06464, 0.00089,\n\t\t0.03103, 0.05078,\n\t\t-0.01133, 0.01520,\n\t\t0.14654, 0.07538, 0.25112, -0.24473,\n\t\t-0.17928, -0.53366,\n\t\t-0.06367, 0.20458, -0.42985, 0.14848,\n\t\t-0.35317, -0.61364,\n\t\t0.00325, -0.08617, -0.23180, 0.08576,\n\t\t0.22995, 0.43569,\n\t\t1.92114, 2.89319, -5.55637, 4.70329,\n\t\t-4.91411, -5.45521,\n\t\t0.02607, 0.04468,\n\t\t-0.05439, 0.13476, -0.07329, -0.00985,\n\t\t-0.00278, 0.05377,\n\t\t0.07474, -0.09658, 0.29818, 0.20422,\n\t\t-0.29074, 0.44962,\n\t\t-0.15411, -0.04287, 0.29907, -1.02948,\n\t\t3.62183, 0.84869,\n\t\t-0.08157, 0.02754,\n\t\t-0.03610, -0.12909, 0.09195, -0.04424,\n\t\t-0.08845, 0.09347,\n\t\t-0.27140, 0.08185,\n\t\t0.24783, 0.19543, -0.25154, 0.41371,\n\t\t-0.00046, 0.01524,\n\t\t0.04127, 0.06663,\n\t\t0.43023, 0.11790,\n\t\t0.04427, 0.05329,\n\t\t0.00411, -0.71074,\n\t\t-0.07111, -0.09824,\n\t\t0.01264, -0.02075,\n\t\t-0.00068, -0.01678,\n\t\t0.01186, 0.00181,\n\t\t0.00302, -0.21963,\n\t\t-0.06412, -0.10155, -0.36856, 0.20240,\n\t\t0.32282, 0.65133,\n\t\t-0.07178, -0.01876, 0.13399, -0.39522,\n\t\t1.28413, 0.33790,\n\t\t0.05040, -0.01679,\n\t\t-0.00794, 0.01117,\n\t\t0.02630, 0.00575,\n\t\t-0.07113, -0.11414, 0.16422, -0.23060,\n\t\t0.35198, 0.05409,\n\t\t1.11486, -0.35833, 0.87313, 1.66304,\n\t\t-1.28434, 0.72067,\n\t\t0.01400, 0.00971,\n\t\t0.21044, -0.87385, 3.20820, 0.67957,\n\t\t-0.01716, 0.00111,\n\t\t-0.13776, -0.02650,\n\t\t-0.06778, 0.00908, 0.00616, -0.04520,\n\t\t-0.31625, -0.61913,\n\t\t0.36184, 0.09373,\n\t\t0.00984, -0.03292,\n\t\t0.01944, 0.00530,\n\t\t0.00243, -0.00123,\n\t\t0.01589, 0.02223,\n\t\t-0.02992, -0.01086,\n\t\t4356.04809, -5859.86328, 2918.27323, -4796.67315,\n\t\t510.24783, -1220.02233, 127.48927, 250.10654,\n\t\t3250.43013, -904.27614, -5667.40042, -22634.00922,\n\t\t-82471.79425, 18615.92342,\n\t\t0.01941, 0.00372,\n\t\t0.01830, -0.00652,\n\t\t-0.02548, -0.01157,\n\t\t0.00635, 0.02343,\n\t\t-0.00980, 0.00961,\n\t\t0.12137, 0.10068, 0.16676, -0.07257,\n\t\t-0.07267, -0.13761, 0.25305, -0.28112,\n\t\t-0.07974, 0.07866,\n\t\t-0.41726, 0.49991, -1.55187, -1.14150,\n\t\t1.54754, -2.35141,\n\t\t-0.00862, 0.00808,\n\t\t0.00218, -0.03726,\n\t\t0.06914, -0.08986,\n\t\t-0.00501, 2.09577,\n\t\t-0.01409, -0.01842,\n\t\t0.04138, 0.05961,\n\t\t-0.12276, -0.04929,\n\t\t-0.03963, -0.06080,\n\t\t-0.27697, -0.09329,\n\t\t-0.01011, 0.00295,\n\t\t-0.01374, 0.01328,\n\t\t-0.00171, 0.25815,\n\t\t0.01446, 0.00782,\n\t\t0.17909, -0.04683,\n\t\t0.03765, -0.04990,\n\t\t0.00036, 0.00528,\n\t\t0.05508, -0.01369,\n\t\t-0.11751, -0.10624, -0.14448, 0.10522,\n\t\t-0.00884, 0.43006,\n\t\t0.01162, 0.01659,\n\t\t-0.00076, 0.10143,\n\t\t0.55779, 0.05510, 0.12350, -0.34025,\n\t\t0.01320, 0.92985,\n\t\t-0.00026, -0.03426,\n\t\t0.01305, 0.00041,\n\t\t0.13187, -0.11903,\n\t\t0.00058, 0.09877,\n\t\t-33.10230, -41.96782, -268.28908, 174.29259,\n\t\t731.20089, 1508.07639, 5223.99114, -3008.08849,\n\t\t-3909.34957, -9646.69156,\n\t\t0.02988, 0.03182,\n\t\t0.07149, 0.04513,\n\t\t-0.02356, -0.01641,\n\t\t-0.03188, -0.03711, 0.15084, -0.22436,\n\t\t0.61987, 0.25706,\n\t\t0.02425, 0.01200,\n\t\t-0.05543, -0.14435, -0.53398, 0.10997,\n\t\t0.00465, -0.01893,\n\t\t0.01260, -0.01314,\n\t\t0.00650, -0.05499,\n\t\t-0.06804, 0.01608,\n\t\t0.02134, 0.04160,\n\t\t0.00636, 0.01293,\n\t\t-0.03470, -0.02697,\n\t\t-0.11323, 0.02409,\n\t\t-0.02618, 0.00827,\n\t\t0.01879, 0.16838, 0.08978, 0.01934,\n\t\t-0.23564, 0.05565,\n\t\t0.03686, 0.02644,\n\t\t-0.02471, 0.00558,\n\t\t-140.22669, -120.40692, -501.88143, 434.05868,\n\t\t1044.54998, 1162.72084, 1527.78437, -882.37371,\n\t\t-0.00768, 0.02213,\n\t\t-0.04090, 0.16718,\n\t\t-0.05923, -0.12595,\n\t\t0.01154, -0.00025,\n\t\t-0.00776, -0.01653,\n\t\t-0.01213, -0.02773,\n\t\t0.00344, 0.02180,\n\t\t-0.02558, -0.05682,\n\t\t-0.00490, 0.01050,\n\t\t38.75496, -78.17502, -189.90700, -136.33371,\n\t\t-249.94062, 319.76423, 205.73478, 272.64549,\n\t\t-0.01132, -0.01071, -0.04607, -0.00390,\n\t\t0.02903, -0.02070,\n\t\t0.01326, -0.00901,\n\t\t35.38435, 7.45358, 31.08987, -70.52685,\n\t\t-92.13879, -51.58876, -51.80016, 48.98102,\n\t\t-0.00124, -0.01159,\n\t\t0.47335, 13.71886, 23.71637, 5.55804,\n\t\t10.06850, -25.65292, -11.85300, -10.20802,\n\t\t-4.72861, 1.27151, -0.47322, 7.46754,\n\t\t6.99528, 1.79089, 2.05336, -2.90866,\n\t\t-1.97528, 0.72236, -0.25084, 1.90269,\n\t\t0.72127, 0.41354,\n\t\t-0.30286, -0.53125, -0.50883, -0.01200,\n\t\t-0.08301, 0.18083,\n\t\t-0.04286, -0.10963, -0.04544, -0.01645,\n\t\t-0.00013, -0.00986\n\t],\n\tlat_tbl: [\n\t\t68.33369, 422.77623, -2057.26405, -2522.29068,\n\t\t-0.00030, -0.00009,\n\t\t0.02400, -0.06471, 0.02074, -0.00904,\n\t\t0.00044, 0.00261,\n\t\t-0.00174, -0.00088, -0.00027, 0.00003,\n\t\t0.00005, -0.00004,\n\t\t-0.00036, 0.00200,\n\t\t0.01432, 0.01199,\n\t\t0.00006, -0.00004,\n\t\t0.00236, 0.00803, 0.01235, 0.00406,\n\t\t-0.03253, 0.00179,\n\t\t-0.00243, 0.00132, -0.00352, 0.00011,\n\t\t-0.00146, -0.01154,\n\t\t0.00824, -0.01195, -0.01829, -0.00465,\n\t\t0.12540, 0.09997,\n\t\t0.00400, 0.00288, -0.02848, 0.01094,\n\t\t-0.02273, -0.07051,\n\t\t0.01305, 0.01078,\n\t\t-0.00119, 0.00136, -0.00107, -0.00066,\n\t\t0.00097, -0.00315,\n\t\t0.00120, 0.00430, -0.00710, -0.00157,\n\t\t0.06052, -0.04777,\n\t\t0.00192, -0.00229, -0.02077, 0.00647,\n\t\t0.06907, 0.07644,\n\t\t-0.00717, 0.00451,\n\t\t0.00052, -0.00262, 0.00345, 0.00039,\n\t\t-0.00674, 0.00346,\n\t\t-0.02880, 0.00807,\n\t\t0.00054, 0.00206, -0.01745, 0.00517,\n\t\t-0.00044, 0.00049,\n\t\t0.01749, 0.01230,\n\t\t0.01703, 0.01563,\n\t\t0.00934, 0.02372,\n\t\t0.01610, -0.01136,\n\t\t0.00186, -0.00503,\n\t\t0.00082, -0.00673,\n\t\t0.00170, -0.00539,\n\t\t0.00042, 0.00037,\n\t\t0.00415, -0.00430,\n\t\t0.00258, -0.00914, -0.01761, -0.00251,\n\t\t0.15909, 0.13276,\n\t\t0.02436, -0.00791, 0.00491, 0.03890,\n\t\t-0.02982, 0.05645,\n\t\t-0.00003, 0.00427,\n\t\t-0.00363, 0.00221,\n\t\t0.00077, 0.00130,\n\t\t0.00131, -0.00071, 0.00796, 0.00453,\n\t\t0.01186, 0.01631,\n\t\t0.12949, -0.02546, 0.03613, 0.32854,\n\t\t-0.43001, 0.01417,\n\t\t0.00034, 0.00095,\n\t\t-0.03268, 0.04034, 0.11407, 0.15049,\n\t\t-0.00079, -0.00052,\n\t\t-0.04009, 0.00988,\n\t\t-0.00259, -0.00085, 0.00221, -0.00133,\n\t\t0.00003, -0.01733,\n\t\t0.01055, 0.01976,\n\t\t0.00222, 0.00085,\n\t\t0.00089, 0.00087,\n\t\t0.00014, 0.00001,\n\t\t0.00145, 0.00802,\n\t\t0.00122, 0.00068,\n\t\t947.79367, -1654.39690, 542.00864, -1281.09901,\n\t\t90.02068, -318.36115, -87.67090, 92.91960,\n\t\t376.98232, -419.10705, 5094.60412, 2476.97098,\n\t\t-18160.57888, 16010.48165,\n\t\t0.00621, -0.00128,\n\t\t0.00186, -0.00153,\n\t\t-0.00790, 0.00011,\n\t\t-0.00032, 0.00165,\n\t\t-0.00277, 0.00539,\n\t\t0.00552, 0.00682, 0.01086, -0.00978,\n\t\t-0.02292, -0.01300, 0.02940, -0.04427,\n\t\t-0.02051, 0.04860,\n\t\t-0.05020, 0.29089, -0.50763, -0.04900,\n\t\t0.11177, -0.41357,\n\t\t-0.00222, 0.00504,\n\t\t-0.00006, -0.00459,\n\t\t-0.00175, -0.02691,\n\t\t0.05921, 0.18938,\n\t\t-0.00181, -0.00154,\n\t\t0.00322, 0.00586,\n\t\t-0.01098, -0.00520,\n\t\t-0.00861, -0.01342,\n\t\t-0.02694, -0.00706,\n\t\t-0.00103, 0.00012,\n\t\t-0.00284, 0.00797,\n\t\t0.00743, 0.02523,\n\t\t0.00872, 0.00096,\n\t\t0.03155, -0.01644,\n\t\t0.00414, -0.00583,\n\t\t0.00029, 0.00066,\n\t\t0.00935, -0.00619,\n\t\t-0.02498, -0.01600, -0.03545, 0.07623,\n\t\t0.01649, 0.06498,\n\t\t0.00148, 0.00209,\n\t\t0.00621, 0.02014,\n\t\t0.17407, -0.05022, -0.03485, -0.17012,\n\t\t0.06164, 0.20059,\n\t\t-0.00804, -0.01475,\n\t\t0.00296, -0.00068,\n\t\t0.01880, -0.03797,\n\t\t0.00608, 0.02270,\n\t\t5.89651, -6.62562, -37.41057, -10.51542,\n\t\t-47.22373, 95.76862, 494.45951, -5.37252,\n\t\t-3991.04809, -2886.97750,\n\t\t0.01232, 0.00487,\n\t\t0.03163, 0.00561,\n\t\t-0.01847, -0.00207,\n\t\t-0.10138, 0.01430, -0.04269, -0.22338,\n\t\t0.24955, -0.02066,\n\t\t0.01119, -0.00186,\n\t\t0.03416, 0.01805, -0.12498, 0.10385,\n\t\t-0.00210, -0.01011,\n\t\t0.00346, -0.00682,\n\t\t-0.00683, -0.02227,\n\t\t-0.01649, 0.01259,\n\t\t0.01392, 0.01174,\n\t\t0.00440, 0.00351,\n\t\t-0.02871, -0.00375,\n\t\t-0.03170, 0.02246,\n\t\t-0.00833, 0.00596,\n\t\t0.04081, 0.06666, 0.05400, -0.02387,\n\t\t-0.07852, 0.05781,\n\t\t0.01881, 0.00324,\n\t\t-0.00868, 0.00606,\n\t\t-6.52157, -19.74446, -72.46009, 43.12366,\n\t\t321.78233, 215.45201, 452.61804, -1025.05619,\n\t\t0.00119, 0.01169,\n\t\t0.02239, 0.09003,\n\t\t-0.05329, -0.03974,\n\t\t0.00688, -0.00421,\n\t\t-0.00676, -0.00515,\n\t\t-0.01171, -0.00952,\n\t\t0.01337, 0.01270,\n\t\t-0.02791, -0.02184,\n\t\t0.00058, 0.00679,\n\t\t8.42102, -11.87757, -49.07247, -25.34584,\n\t\t-43.54829, 161.26509, 261.70993, 56.25777,\n\t\t0.00568, 0.00871, -0.02656, 0.01582,\n\t\t0.00875, -0.02114,\n\t\t0.00464, -0.01075,\n\t\t9.08966, 1.37810, 3.44548, -27.44651,\n\t\t-59.62749, -0.73611, -0.77613, 65.72607,\n\t\t-0.00664, -0.00723,\n\t\t1.04214, 4.78920, 11.67397, -1.84524,\n\t\t-4.16685, -19.14211, -16.14483, 3.02496,\n\t\t-1.98140, 1.16261, 1.81526, 4.21224,\n\t\t5.59020, -2.55741, -1.54151, -3.85817,\n\t\t-1.08723, 1.23372, 1.12378, 1.51554,\n\t\t0.88937, -0.57631,\n\t\t-0.50549, -0.25617, -0.37618, 0.42163,\n\t\t0.18902, 0.19575,\n\t\t-0.15402, -0.04062, -0.04017, 0.05717,\n\t\t-0.01665, -0.00199\n\t],\n\trad_tbl: [\n\t\t-8.30490, -11.68232, 86.54880, 4361.05018,\n\t\t0.00002, -0.00001,\n\t\t-0.01102, 0.00410, 0.00007, -0.00276,\n\t\t0.00117, 0.00082,\n\t\t0.00049, 0.00007, 0.00003, -0.00001,\n\t\t0.00012, 0.00005,\n\t\t-0.00186, -0.00534,\n\t\t-0.03301, 0.01808,\n\t\t0.00008, 0.00005,\n\t\t-0.00394, 0.00202, 0.02362, -0.00359,\n\t\t0.00638, -0.06767,\n\t\t0.00422, -0.00493, 0.00660, 0.00513,\n\t\t-0.00417, 0.00708,\n\t\t0.05849, -0.00213, -0.07647, -0.16162,\n\t\t-0.30551, 0.13856,\n\t\t-0.02789, 0.01811, -0.04155, -0.06229,\n\t\t0.05729, -0.03694,\n\t\t-0.03087, 0.01610,\n\t\t-0.00297, -0.00167, 0.00041, -0.00157,\n\t\t-0.00115, 0.00058,\n\t\t0.00796, 0.00436, -0.01393, 0.02921,\n\t\t-0.05902, -0.02363,\n\t\t0.00459, -0.01512, 0.10038, 0.02964,\n\t\t-0.08369, 0.34570,\n\t\t-0.00749, -0.02653,\n\t\t0.01361, -0.00326, 0.00406, 0.00952,\n\t\t-0.00594, -0.00829,\n\t\t-0.02763, -0.09933,\n\t\t-0.04143, 0.05152, -0.08436, -0.05294,\n\t\t-0.00329, -0.00016,\n\t\t-0.04340, 0.02566,\n\t\t-0.03027, 0.10904,\n\t\t0.03665, -0.03070,\n\t\t0.23525, 0.00182,\n\t\t0.03092, -0.02212,\n\t\t0.01255, 0.00777,\n\t\t-0.01025, 0.00042,\n\t\t-0.00065, 0.00440,\n\t\t0.08688, 0.00136,\n\t\t0.05700, -0.03616, -0.11272, -0.20838,\n\t\t-0.37048, 0.18314,\n\t\t0.00717, -0.02911, 0.15848, 0.05266,\n\t\t-0.13451, 0.51639,\n\t\t0.00688, 0.02029,\n\t\t0.00596, 0.00423,\n\t\t-0.00253, 0.01196,\n\t\t0.05264, -0.03301, 0.10669, 0.07558,\n\t\t-0.02461, 0.16282,\n\t\t-0.18481, -0.57118, 0.85303, -0.44876,\n\t\t0.37090, 0.65915,\n\t\t-0.00458, 0.00660,\n\t\t0.41186, 0.09829, -0.31999, 1.51149,\n\t\t-0.00052, -0.00809,\n\t\t0.01384, -0.07114,\n\t\t-0.00435, -0.03237, 0.02162, 0.00294,\n\t\t0.29742, -0.15430,\n\t\t-0.04508, 0.17436,\n\t\t0.01577, 0.00485,\n\t\t-0.00258, 0.00946,\n\t\t0.00061, 0.00119,\n\t\t0.01095, -0.00788,\n\t\t0.00530, -0.01478,\n\t\t2885.06380, 2152.76256, 2361.91098, 1442.28586,\n\t\t602.45147, 251.18991, -121.68155, 71.20167,\n\t\t404.94753, 1607.37580, 11211.04090, -2905.37340,\n\t\t-9066.27933, -40747.62807,\n\t\t-0.00189, 0.00957,\n\t\t0.00332, 0.00907,\n\t\t0.00574, -0.01255,\n\t\t-0.01134, 0.00291,\n\t\t-0.00666, -0.00615,\n\t\t-0.04947, 0.06182, 0.03965, 0.08091,\n\t\t0.06846, -0.03612, 0.13966, 0.12543,\n\t\t-0.05494, -0.05043,\n\t\t-0.24454, -0.20507, 0.56201, -0.75997,\n\t\t1.15728, 0.76203,\n\t\t-0.00559, -0.00536,\n\t\t0.01872, 0.00104,\n\t\t0.03044, 0.02504,\n\t\t-1.07241, -0.00288,\n\t\t0.00950, -0.00760,\n\t\t-0.03211, 0.02261,\n\t\t0.02678, -0.06868,\n\t\t0.03008, -0.02062,\n\t\t0.04997, -0.15164,\n\t\t-0.00176, -0.00580,\n\t\t-0.00730, -0.00676,\n\t\t-0.13906, -0.00089,\n\t\t-0.00362, 0.00817,\n\t\t0.02021, 0.07719,\n\t\t0.02788, 0.02061,\n\t\t-0.00274, 0.00016,\n\t\t0.00566, 0.02293,\n\t\t0.04691, -0.05005, -0.05095, -0.06225,\n\t\t-0.19770, -0.00456,\n\t\t-0.00848, 0.00595,\n\t\t-0.04506, -0.00172,\n\t\t-0.01960, 0.22971, 0.14459, 0.04362,\n\t\t-0.40199, 0.00386,\n\t\t0.01442, -0.00088,\n\t\t-0.00020, 0.00544,\n\t\t0.04768, 0.05222,\n\t\t-0.04069, -0.00003,\n\t\t15.71084, -12.28846, -66.23443, -109.83758,\n\t\t-586.31996, 311.09606, 1070.75040, 2094.34080,\n\t\t3839.04103, -1797.34193,\n\t\t-0.01216, 0.01244,\n\t\t-0.01666, 0.02627,\n\t\t0.00687, -0.01291,\n\t\t0.00939, -0.01905, 0.09401, 0.05027,\n\t\t-0.09398, 0.23942,\n\t\t-0.00379, 0.00834,\n\t\t0.05632, -0.01907, -0.04654, -0.21243,\n\t\t0.00255, 0.00179,\n\t\t0.00540, 0.00497,\n\t\t0.01427, 0.00243,\n\t\t-0.00697, -0.02792,\n\t\t-0.01524, 0.00810,\n\t\t-0.00461, 0.00238,\n\t\t0.00899, -0.01515,\n\t\t-0.01011, -0.04390,\n\t\t-0.00447, -0.00992,\n\t\t-0.06110, 0.00975, -0.00261, 0.03415,\n\t\t-0.02336, -0.08776,\n\t\t-0.00883, 0.01346,\n\t\t-0.00229, -0.00895,\n\t\t42.18049, -48.21316, -148.61588, -171.57236,\n\t\t-414.27195, 343.09118, 394.59044, 511.79914,\n\t\t-0.00911, -0.00220,\n\t\t-0.06315, -0.00988,\n\t\t0.04357, -0.02389,\n\t\t0.00004, 0.00232,\n\t\t0.00581, -0.00317,\n\t\t0.00948, -0.00497,\n\t\t-0.00734, 0.00300,\n\t\t0.01883, -0.01055,\n\t\t-0.00365, -0.00126,\n\t\t24.18074, 12.28004, 43.18187, -58.69806,\n\t\t-102.40566, -79.48349, -74.81060, 89.71332,\n\t\t0.00241, -0.00135, -0.00136, -0.01617,\n\t\t0.00818, 0.00873,\n\t\t0.00368, 0.00383,\n\t\t-2.25893, 10.18542, 20.73104, 9.07389,\n\t\t13.73458, -29.10491, -20.62071, -10.63404,\n\t\t0.00382, -0.00143,\n\t\t-3.77385, 0.12725, -1.30842, 6.75795,\n\t\t7.94463, 1.79092, 1.24458, -4.73211,\n\t\t-0.36978, -1.25710, -2.06373, 0.06194,\n\t\t-0.00509, 2.08851, 1.07491, 0.04112,\n\t\t-0.28582, -0.51413, -0.53312, 0.11936,\n\t\t0.04447, 0.23945,\n\t\t0.12450, -0.11821, -0.06100, -0.12924,\n\t\t-0.05193, 0.02219,\n\t\t0.01977, -0.02933, -0.00771, -0.01077,\n\t\t0.00109, -0.00273\n\t],\n\targ_tbl: [\n\t\t0, 3,\n\t\t3, 1, 1, -10, 3, 11, 4, 0,\n\t\t2, 2, 5, -5, 6, 2,\n\t\t3, 5, 1, -14, 2, 2, 3, 1,\n\t\t3, 1, 1, -5, 2, 4, 3, 0,\n\t\t1, 1, 6, 0,\n\t\t1, 2, 6, 0,\n\t\t3, 2, 1, -7, 2, 3, 3, 0,\n\t\t1, 1, 5, 2,\n\t\t2, 1, 1, -4, 3, 2,\n\t\t1, 2, 5, 2,\n\t\t2, 2, 1, -5, 2, 2,\n\t\t1, 3, 5, 0,\n\t\t2, 4, 1, -10, 2, 1,\n\t\t2, 3, 1, -8, 2, 0,\n\t\t2, 1, 1, -3, 2, 2,\n\t\t2, 1, 1, -2, 2, 2,\n\t\t1, 1, 3, 0,\n\t\t2, 3, 1, -7, 2, 1,\n\t\t2, 1, 1, -3, 3, 0,\n\t\t1, 1, 2, 0,\n\t\t2, 2, 1, -4, 2, 1,\n\t\t2, 4, 1, -9, 2, 0,\n\t\t1, 2, 3, 0,\n\t\t2, 1, 1, -2, 3, 0,\n\t\t2, 1, 1, -4, 2, 0,\n\t\t2, 1, 1, -1, 2, 0,\n\t\t2, 3, 1, -6, 2, 0,\n\t\t1, 3, 3, 0,\n\t\t2, 2, 1, -7, 2, 0,\n\t\t2, 1, 1, -2, 4, 0,\n\t\t2, 1, 1, -1, 3, 0,\n\t\t1, 2, 2, 2,\n\t\t2, 2, 1, -3, 2, 2,\n\t\t2, 4, 1, -8, 2, 0,\n\t\t2, 3, 1, -10, 2, 0,\n\t\t2, 1, 1, -4, 5, 0,\n\t\t2, 1, 1, -3, 5, 2,\n\t\t2, 1, 1, -5, 2, 2,\n\t\t2, 1, 1, -5, 6, 0,\n\t\t2, 1, 1, -2, 5, 1,\n\t\t3, 1, 1, -4, 5, 5, 6, 0,\n\t\t1, 4, 3, 0,\n\t\t2, 1, 1, -3, 6, 1,\n\t\t2, 1, 1, -1, 5, 0,\n\t\t2, 1, 1, -2, 6, 0,\n\t\t2, 1, 1, -1, 6, 0,\n\t\t2, 1, 1, -2, 7, 0,\n\t\t2, 1, 1, -1, 7, 0,\n\t\t3, 4, 1, -14, 2, 2, 3, 0,\n\t\t3, 1, 1, 2, 5, -5, 6, 0,\n\t\t1, 1, 1, 6,\n\t\t3, 2, 1, -10, 3, 11, 4, 0,\n\t\t3, 1, 1, -2, 5, 5, 6, 0,\n\t\t3, 6, 1, -14, 2, 2, 3, 0,\n\t\t2, 1, 1, 1, 6, 0,\n\t\t2, 1, 1, 2, 6, 0,\n\t\t2, 1, 1, 1, 5, 1,\n\t\t2, 2, 1, -4, 3, 1,\n\t\t2, 1, 1, 2, 5, 0,\n\t\t2, 3, 1, -5, 2, 2,\n\t\t2, 1, 1, 3, 5, 0,\n\t\t2, 5, 1, -10, 2, 0,\n\t\t1, 3, 2, 0,\n\t\t2, 2, 1, -2, 2, 0,\n\t\t2, 1, 1, 1, 3, 0,\n\t\t2, 4, 1, -7, 2, 0,\n\t\t2, 2, 1, -3, 3, 0,\n\t\t2, 1, 1, 1, 2, 0,\n\t\t2, 3, 1, -4, 2, 0,\n\t\t2, 5, 1, -9, 2, 0,\n\t\t2, 1, 1, 2, 3, 0,\n\t\t2, 2, 1, -2, 3, 0,\n\t\t1, 4, 2, 0,\n\t\t2, 2, 1, -1, 2, 0,\n\t\t2, 4, 1, -6, 2, 0,\n\t\t2, 2, 1, -2, 4, 0,\n\t\t2, 2, 1, -1, 3, 0,\n\t\t2, 1, 1, 2, 2, 1,\n\t\t2, 3, 1, -3, 2, 0,\n\t\t2, 5, 1, -8, 2, 0,\n\t\t2, 2, 1, -3, 5, 0,\n\t\t1, 5, 2, 1,\n\t\t2, 2, 1, -2, 5, 0,\n\t\t2, 1, 1, 4, 3, 0,\n\t\t2, 2, 1, -3, 6, 0,\n\t\t2, 2, 1, -1, 5, 0,\n\t\t2, 2, 1, -2, 6, 0,\n\t\t1, 2, 1, 4,\n\t\t2, 2, 1, 1, 5, 0,\n\t\t2, 3, 1, -4, 3, 0,\n\t\t2, 2, 1, 2, 5, 0,\n\t\t2, 4, 1, -5, 2, 2,\n\t\t2, 1, 1, 3, 2, 0,\n\t\t2, 3, 1, -2, 2, 1,\n\t\t2, 3, 1, -3, 3, 0,\n\t\t2, 2, 1, 1, 2, 0,\n\t\t2, 4, 1, -4, 2, 0,\n\t\t2, 3, 1, -2, 3, 0,\n\t\t2, 3, 1, -1, 2, 0,\n\t\t2, 3, 1, -1, 3, 0,\n\t\t2, 2, 1, 2, 2, 0,\n\t\t2, 4, 1, -3, 2, 0,\n\t\t2, 3, 1, -3, 5, 0,\n\t\t2, 1, 1, 5, 2, 1,\n\t\t2, 3, 1, -2, 5, 0,\n\t\t2, 3, 1, -1, 5, 0,\n\t\t2, 3, 1, -2, 6, 0,\n\t\t1, 3, 1, 3,\n\t\t2, 4, 1, -4, 3, 0,\n\t\t2, 5, 1, -5, 2, 0,\n\t\t2, 4, 1, -2, 2, 0,\n\t\t2, 5, 1, -4, 2, 0,\n\t\t2, 4, 1, -2, 3, 0,\n\t\t2, 5, 1, -3, 2, 0,\n\t\t2, 2, 1, 5, 2, 0,\n\t\t2, 4, 1, -2, 5, 0,\n\t\t2, 4, 1, -1, 5, 0,\n\t\t1, 4, 1, 3,\n\t\t2, 6, 1, -5, 2, 1,\n\t\t2, 5, 1, -2, 2, 0,\n\t\t2, 5, 1, -2, 5, 0,\n\t\t1, 5, 1, 3,\n\t\t2, 7, 1, -5, 2, 0,\n\t\t1, 6, 1, 3,\n\t\t1, 7, 1, 3,\n\t\t1, 8, 1, 2,\n\t\t1, 9, 1, 2,\n\t\t1, 10, 1, 1,\n\t\t1, 11, 1, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/mercury.js?");

/***/ }),

/***/ "./src/ptables/moonlat.js":
/*!********************************!*\
  !*** ./src/ptables/moonlat.js ***!
  \********************************/
/*! exports provided: moonlat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"moonlat\", function() { return moonlat; });\nconst moonlat = {\n\tmaxargs: 14,\n\tmax_harmonic: [0, 26, 29, 8, 3, 5, 0, 0, 0, 6, 5, 3, 5, 1, 0, 0, 0, 0],\n\tmax_power_of_t: 3,\n\tdistance: 2.5735686895300000e-03,\n\ttimescale: 3.6525000000000000e+06,\n\ttrunclvl: 1.0000000000000000e-04,\n\tlon_tbl: [\n\t\t-3, -4,\n\t\t4, -1856, 0, 8043,\n\t\t-9, -1082,\n\t\t-1, -310,\n\t\t-1, -522,\n\t\t-330, -1449, -853, 4656,\n\t\t-66, 7,\n\t\t-1, 9996928,\n\t\t-66, 6,\n\t\t23, 183,\n\t\t0, 173,\n\t\t0, -56,\n\t\t0, 50,\n\t\t0, -785,\n\t\t1, 51,\n\t\t0, -60,\n\t\t1, 11843, 0, -50754,\n\t\t0, 1834, 1, -7910,\n\t\t0, -48060,\n\t\t1, 56,\n\t\t0, 13141, -1, -56318,\n\t\t0, 2541,\n\t\t-1, -649,\n\t\t-133, 778,\n\t\t-46, 8,\n\t\t1, 1665737,\n\t\t-47, 7,\n\t\t0, 65,\n\t\t0, 45,\n\t\t0, -138,\n\t\t0, -1005,\n\t\t0, -2911,\n\t\t0, -47,\n\t\t0, 96,\n\t\t0, -394,\n\t\t2, 76,\n\t\t2, -17302, 0, 74337,\n\t\t0, -101,\n\t\t0, 58,\n\t\t0, -171,\n\t\t0, -77,\n\t\t0, -1283, 0, 2686,\n\t\t0, -55,\n\t\t0, 99,\n\t\t0, 55,\n\t\t0, 397,\n\t\t0, 540,\n\t\t0, 626,\n\t\t-1, -5188, 0, 10857,\n\t\t0, -216,\n\t\t-2, -123,\n\t\t0, 6337,\n\t\t2, 224,\n\t\t-152, -23472, -29, -74336, 0, 295775,\n\t\t-20, 149,\n\t\t-2, 84,\n\t\t9, 304,\n\t\t0, -3051,\n\t\t-70, -6,\n\t\t-57, 34,\n\t\t0, -638,\n\t\t0, -201,\n\t\t-73, 9,\n\t\t0, -100,\n\t\t-101, -8,\n\t\t0, -57,\n\t\t0, -207,\n\t\t-3, 80,\n\t\t-45, 45,\n\t\t-5, 102,\n\t\t-59, -23,\n\t\t52, 201,\n\t\t-48, 233, -220, 71,\n\t\t4, 2810, 0, 6236541,\n\t\t-61, 218, -216, 67,\n\t\t51, 201,\n\t\t-59, -23,\n\t\t-144, -837, -457, 3029,\n\t\t-45, 42,\n\t\t-15, 73,\n\t\t-6, -169,\n\t\t0, 135,\n\t\t-64, -7,\n\t\t0, -16245,\n\t\t0, -81,\n\t\t-74, -10,\n\t\t0, 702, 0, -3013,\n\t\t0, -5889,\n\t\t1, 141,\n\t\t58, 9598, 12, 30443, 1, -120946,\n\t\t-1, -84,\n\t\t-2, 11246, -1, -48391,\n\t\t0, 1393,\n\t\t0, 200,\n\t\t-136, -17,\n\t\t0, 558,\n\t\t-64, -8,\n\t\t0, -71,\n\t\t0, 317577,\n\t\t-28, 183,\n\t\t1, 219,\n\t\t0, 421,\n\t\t0, -133,\n\t\t501, -139,\n\t\t3, 354,\n\t\t-101, -13,\n\t\t74, 7,\n\t\t144, -84,\n\t\t59, -2,\n\t\t1, 64,\n\t\t-2931, 12559, -4641, 2638, -303, -2058,\n\t\t-13, -100, -123, -79,\n\t\t-19214, 6084, 1494, 26993, 15213, -82219,\n\t\t42, 52, 48, -101,\n\t\t-53, -4,\n\t\t4, 47,\n\t\t58, -131,\n\t\t46, 14,\n\t\t-21, -6,\n\t\t-1311, -8791, 10198, -4185, 2815, 5640,\n\t\t167, 422, -229, 83,\n\t\t3140, 39, 1221, 120, 96, -30,\n\t\t-1, 184612405,\n\t\t187, 416, -226, 81,\n\t\t-1985, -10083, 9983, -4464, 2807, 5643,\n\t\t-21, -9,\n\t\t113, -367,\n\t\t120, 580, -667, 27,\n\t\t8, 66,\n\t\t-56, -6,\n\t\t337, 95,\n\t\t-87, 3303,\n\t\t-1, 65,\n\t\t68, -374,\n\t\t0, -574,\n\t\t15, -94,\n\t\t0, -53,\n\t\t0, -1303,\n\t\t0, -236,\n\t\t283, 36,\n\t\t-1, -54,\n\t\t269, -35,\n\t\t0, -83,\n\t\t0, -52,\n\t\t0, 730, 0, -3129,\n\t\t0, 813,\n\t\t0, -4299,\n\t\t1, 59,\n\t\t-6, 5130, 1, 16239, -1, -64603,\n\t\t0, -80,\n\t\t91, 12,\n\t\t0, -561,\n\t\t133, -17,\n\t\t0, 250,\n\t\t-12, 71,\n\t\t0, 155664,\n\t\t82, -11,\n\t\t0, 106,\n\t\t0, -604,\n\t\t0, 21862,\n\t\t55, -7,\n\t\t0, -1514, 0, 6501,\n\t\t0, 906,\n\t\t0, -68,\n\t\t0, 241,\n\t\t0, 366,\n\t\t0, 70,\n\t\t0, -1382, 0, 5957,\n\t\t0, 113,\n\t\t0, -51,\n\t\t0, -55,\n\t\t0, 731,\n\t\t0, -264,\n\t\t0, 65788,\n\t\t1, -1504, 0, 3147,\n\t\t0, 217,\n\t\t0, -4105, 0, 17658,\n\t\t1, 69,\n\t\t0, -3518,\n\t\t0, -1767,\n\t\t-43, -7044, -10, -22304, 0, 88685,\n\t\t3, 91,\n\t\t0, -485,\n\t\t0, -57,\n\t\t-1, 333548,\n\t\t-24, 172,\n\t\t11, 544, 1, -1132,\n\t\t0, 353,\n\t\t0, -188,\n\t\t0, 53,\n\t\t0, 77,\n\t\t158, -887,\n\t\t35, 131,\n\t\t-54, 13,\n\t\t0, 1994821,\n\t\t-53, 14,\n\t\t36, 125,\n\t\t2, 56,\n\t\t0, -243,\n\t\t0, -364,\n\t\t-2, 1916, 0, -8227,\n\t\t0, 15700, -1, -67308,\n\t\t1, 66,\n\t\t0, -53686,\n\t\t1, 3058, 1, -13177,\n\t\t0, -72,\n\t\t0, -72,\n\t\t0, 61,\n\t\t0, 15812,\n\t\t0, 165,\n\t\t8, -96,\n\t\t318, 1341, 803, -4252,\n\t\t24, 193,\n\t\t1137, -226, 310, 622,\n\t\t-56, 30,\n\t\t-3, 10101666,\n\t\t-56, 30,\n\t\t1096, -225, 300, 600,\n\t\t-31, 409,\n\t\t-1, -507,\n\t\t0, -287,\n\t\t0, -1869, 0, 8026,\n\t\t1, 544, -1, -1133,\n\t\t0, 27984,\n\t\t0, -62,\n\t\t0, -249,\n\t\t0, 187,\n\t\t0, -1096,\n\t\t1, 53,\n\t\t2, 12388, 0, -53107,\n\t\t0, -322,\n\t\t0, -94,\n\t\t0, 15157,\n\t\t0, -582,\n\t\t0, 3291,\n\t\t0, 565,\n\t\t0, 106,\n\t\t0, 112,\n\t\t0, 306,\n\t\t0, 809,\n\t\t0, 130,\n\t\t0, -961, 0, 4149,\n\t\t0, 174,\n\t\t0, -105,\n\t\t0, 2196,\n\t\t0, 59,\n\t\t0, 36737,\n\t\t-1, -1832, 0, 3835,\n\t\t0, -139,\n\t\t0, 24138,\n\t\t0, 1325,\n\t\t1, 64,\n\t\t0, -361,\n\t\t0, -1162,\n\t\t-44, -6320, -10, -20003, 0, 79588,\n\t\t2, 80,\n\t\t0, -2059,\n\t\t0, -304,\n\t\t0, 21460,\n\t\t0, -166,\n\t\t0, -87,\n\t\t89, -493,\n\t\t32, 114,\n\t\t34, 510, 1, 1172616,\n\t\t31, 113,\n\t\t-1, 57,\n\t\t0, 214,\n\t\t0, -656,\n\t\t0, -646,\n\t\t0, 1850, 0, -7931,\n\t\t0, -6674,\n\t\t0, 2944, 0, -12641,\n\t\t0, 916,\n\t\t45, -255,\n\t\t16, 60,\n\t\t-1, 619116,\n\t\t16, 57,\n\t\t0, -58,\n\t\t0, 1045,\n\t\t0, -156,\n\t\t-15, 88,\n\t\t0, -62964,\n\t\t0, -126,\n\t\t0, 1490, 0, -6387,\n\t\t0, 119,\n\t\t0, 1338,\n\t\t0, -56,\n\t\t0, 204,\n\t\t0, 153,\n\t\t0, 940,\n\t\t0, 251,\n\t\t0, 312,\n\t\t0, 584,\n\t\t0, -786, 0, 3388,\n\t\t0, -52,\n\t\t0, 4733,\n\t\t0, 618,\n\t\t0, 29982,\n\t\t0, 101,\n\t\t0, -174,\n\t\t0, -2637, 0, 11345,\n\t\t0, -284,\n\t\t0, -524,\n\t\t0, -121,\n\t\t0, 1464,\n\t\t11, -60,\n\t\t-1, 151205,\n\t\t0, 139,\n\t\t0, -2448,\n\t\t0, -51,\n\t\t0, -768,\n\t\t0, -638,\n\t\t0, 552, 0, -2370,\n\t\t0, 70,\n\t\t0, 64,\n\t\t0, 57,\n\t\t0, 39840,\n\t\t0, 104,\n\t\t0, -10194,\n\t\t0, -635,\n\t\t0, 69,\n\t\t0, 113,\n\t\t0, 67,\n\t\t0, 96,\n\t\t0, 367,\n\t\t0, 134,\n\t\t0, 596,\n\t\t0, 63,\n\t\t0, 1622,\n\t\t0, 483,\n\t\t0, 72,\n\t\t0, 11917,\n\t\t0, -63,\n\t\t0, 1273,\n\t\t0, -66,\n\t\t0, -262,\n\t\t0, -97,\n\t\t0, 103,\n\t\t0, 15196,\n\t\t0, -1445,\n\t\t0, -66,\n\t\t0, -55,\n\t\t0, -323,\n\t\t0, 2632,\n\t\t0, -1179,\n\t\t0, 59,\n\t\t0, -56,\n\t\t0, 78,\n\t\t0, 65,\n\t\t0, 422,\n\t\t0, 309,\n\t\t0, 2125,\n\t\t0, -66,\n\t\t0, 124,\n\t\t0, -57,\n\t\t0, 1379,\n\t\t0, -304,\n\t\t0, 177,\n\t\t0, -118,\n\t\t0, 146,\n\t\t0, 283,\n\t\t0, 119\n\t],\n\tlat_tbl: [],\n\trad_tbl: [],\n\targ_tbl: [\n\t\t0, 1,\n\t\t3, 1, 10, 1, 12, -1, 11, 1,\n\t\t4, 2, 10, 2, 12, -1, 13, -1, 11, 0,\n\t\t5, 2, 10, -1, 13, -1, 11, 3, 2, -3, 3, 0,\n\t\t5, 2, 10, -1, 13, -1, 11, 2, 3, -2, 5, 0,\n\t\t2, -1, 13, 1, 14, 1,\n\t\t5, -1, 13, 1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t2, 1, 13, -1, 11, 0,\n\t\t5, 1, 13, -1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t5, 2, 10, -1, 13, -1, 11, 2, 3, -3, 5, 0,\n\t\t4, 1, 10, 1, 12, -2, 13, 1, 11, 0,\n\t\t4, 1, 13, -1, 11, 1, 2, -1, 3, 0,\n\t\t5, 2, 10, -1, 13, -1, 11, 2, 2, -2, 3, 0,\n\t\t3, 1, 10, -2, 13, 1, 11, 0,\n\t\t4, 1, 13, -1, 11, 1, 3, -1, 5, 0,\n\t\t4, -1, 13, 1, 11, 1, 2, -1, 3, 0,\n\t\t3, 1, 12, 1, 13, -1, 11, 1,\n\t\t4, 2, 10, 1, 12, -1, 13, -1, 11, 1,\n\t\t2, 1, 10, -1, 11, 0,\n\t\t4, -1, 13, 1, 11, 1, 3, -1, 5, 0,\n\t\t3, 1, 12, -1, 13, 1, 11, 1,\n\t\t3, 2, 10, -3, 13, 1, 11, 0,\n\t\t3, 2, 12, 1, 13, -1, 11, 0,\n\t\t3, -2, 10, 1, 13, 1, 14, 0,\n\t\t6, -2, 10, 1, 13, 1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t3, 2, 10, -1, 13, -1, 11, 0,\n\t\t6, 2, 10, -1, 13, -1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t4, -1, 13, 1, 11, 2, 3, -2, 5, 0,\n\t\t4, -1, 13, 1, 11, 3, 2, -3, 3, 0,\n\t\t3, 1, 10, -1, 12, -1, 11, 0,\n\t\t3, 2, 12, -1, 13, 1, 11, 0,\n\t\t3, 2, 10, 1, 13, -3, 11, 0,\n\t\t5, -2, 10, 1, 13, 1, 11, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, -1, 12, -3, 13, 1, 11, 0,\n\t\t3, 3, 10, -2, 13, -1, 11, 0,\n\t\t5, -2, 10, 1, 13, 1, 11, 1, 3, -1, 5, 0,\n\t\t4, 2, 10, -1, 12, -1, 13, -1, 11, 1,\n\t\t2, 3, 10, -3, 11, 0,\n\t\t5, -2, 10, 1, 13, 1, 11, 2, 2, -2, 3, 0,\n\t\t4, 2, 10, -1, 12, 1, 13, -3, 11, 0,\n\t\t3, 4, 10, -3, 13, -1, 11, 0,\n\t\t4, 2, 10, -2, 12, -1, 13, -1, 11, 1,\n\t\t3, 4, 10, -1, 13, -3, 11, 0,\n\t\t4, 2, 10, -3, 12, -1, 13, -1, 11, 0,\n\t\t3, 4, 10, -1, 12, -3, 11, 0,\n\t\t3, 2, 10, -3, 12, -1, 11, 0,\n\t\t4, 4, 10, -1, 12, -2, 13, -1, 11, 0,\n\t\t2, 4, 10, -3, 11, 0,\n\t\t3, 2, 10, -2, 12, -1, 11, 1,\n\t\t4, 3, 10, -1, 12, -1, 13, -1, 11, 0,\n\t\t4, -2, 10, 1, 11, 2, 3, -2, 5, 0,\n\t\t3, 4, 10, -2, 13, -1, 11, 0,\n\t\t4, -2, 10, 1, 11, 2, 2, -2, 3, 0,\n\t\t3, 2, 10, -1, 12, -1, 11, 2,\n\t\t3, -2, 10, 1, 12, 1, 14, 0,\n\t\t4, -2, 10, 1, 11, 2, 3, -2, 4, 0,\n\t\t4, -2, 10, 1, 11, 1, 3, -1, 5, 0,\n\t\t3, 3, 10, -1, 13, -1, 11, 0,\n\t\t4, -2, 10, 1, 11, 3, 2, -4, 3, 0,\n\t\t4, -2, 10, 1, 11, 1, 3, -2, 5, 0,\n\t\t4, 2, 10, -1, 12, -2, 13, 1, 11, 0,\n\t\t4, -2, 10, 1, 11, 1, 2, -1, 3, 0,\n\t\t2, -1, 10, 1, 2, 0,\n\t\t3, 2, 10, 2, 13, -3, 11, 0,\n\t\t4, -2, 10, 1, 11, 2, 2, -3, 3, 0,\n\t\t3, 2, 12, -2, 13, 1, 11, 0,\n\t\t4, 1, 10, -1, 12, 1, 13, -1, 11, 0,\n\t\t3, -2, 10, 1, 11, 1, 5, 0,\n\t\t4, 2, 10, -1, 11, 1, 3, -2, 4, 0,\n\t\t3, 2, 10, -2, 11, 1, 14, 0,\n\t\t4, -2, 10, 1, 11, 8, 2, -13, 3, 0,\n\t\t5, -2, 10, -1, 13, 1, 11, 18, 2, -16, 3, 0,\n\t\t5, 2, 10, -1, 11, 4, 3, -8, 4, 3, 5, 1,\n\t\t2, 2, 10, -1, 11, 1,\n\t\t5, -2, 10, 1, 11, 4, 3, -8, 4, 3, 5, 1,\n\t\t5, 2, 10, -1, 13, -1, 11, 18, 2, -16, 3, 0,\n\t\t4, 2, 10, -1, 11, 8, 2, -13, 3, 0,\n\t\t2, -2, 10, 1, 14, 1,\n\t\t4, -2, 10, 1, 11, 1, 3, -2, 4, 0,\n\t\t3, 2, 10, -1, 11, 1, 5, 0,\n\t\t2, 2, 12, -1, 11, 0,\n\t\t4, 3, 10, 1, 12, -1, 13, -1, 11, 0,\n\t\t4, 2, 10, -1, 11, 2, 2, -3, 3, 0,\n\t\t3, 2, 10, -2, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 11, 1, 2, -1, 3, 0,\n\t\t3, 1, 10, 1, 2, -2, 3, 0,\n\t\t3, 1, 12, -2, 13, 1, 11, 1,\n\t\t3, 1, 10, 1, 13, -1, 11, 0,\n\t\t4, 2, 10, -1, 11, 1, 3, -1, 5, 0,\n\t\t3, 2, 10, 1, 12, -1, 11, 2,\n\t\t3, -2, 10, -1, 12, 1, 14, 0,\n\t\t2, 1, 12, -1, 11, 1,\n\t\t3, 1, 10, -1, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 11, 2, 2, -2, 3, 0,\n\t\t3, 1, 10, 2, 2, -3, 3, 0,\n\t\t4, 2, 10, 1, 12, -2, 13, 1, 11, 0,\n\t\t3, -1, 10, 1, 2, -2, 3, 0,\n\t\t3, -1, 11, 1, 2, -1, 3, 0,\n\t\t2, 2, 13, -1, 11, 0,\n\t\t2, -2, 13, 1, 14, 0,\n\t\t4, 2, 10, -1, 11, 2, 3, -2, 5, 0,\n\t\t4, 2, 10, -1, 11, 3, 2, -3, 3, 0,\n\t\t4, 2, 10, 2, 12, -2, 13, -1, 11, 0,\n\t\t3, 1, 10, 1, 3, -2, 5, 0,\n\t\t4, 1, 10, 1, 12, 1, 13, -1, 11, 0,\n\t\t3, 1, 10, 3, 2, -4, 3, 0,\n\t\t3, 1, 10, 1, 3, -1, 5, 0,\n\t\t3, 1, 10, 1, 3, -2, 6, 0,\n\t\t3, 1, 10, 2, 3, -2, 4, 0,\n\t\t4, 1, 10, 1, 12, -1, 13, -1, 11, 0,\n\t\t3, 2, 10, 2, 12, -1, 11, 2,\n\t\t4, 1, 10, 1, 3, 2, 5, -5, 6, 1,\n\t\t1, 1, 14, 2,\n\t\t3, 1, 10, 8, 2, -12, 3, 1,\n\t\t5, -2, 10, 1, 13, -1, 11, 20, 2, -21, 3, 0,\n\t\t5, 2, 10, -2, 13, 1, 11, 2, 3, -3, 5, 0,\n\t\t3, 1, 10, 1, 3, 1, 6, 0,\n\t\t4, -1, 13, -1, 11, 26, 2, -29, 3, 0,\n\t\t3, -1, 11, 8, 2, -13, 3, 0,\n\t\t4, -1, 13, -1, 11, 18, 2, -16, 3, 2,\n\t\t4, -1, 13, 1, 11, 10, 2, -3, 3, 1,\n\t\t1, 1, 11, 3,\n\t\t4, -1, 13, -1, 11, 10, 2, -3, 3, 1,\n\t\t4, -1, 13, 1, 11, 18, 2, -16, 3, 2,\n\t\t3, 1, 11, 8, 2, -13, 3, 0,\n\t\t2, 1, 10, 2, 4, 0,\n\t\t4, 2, 10, -1, 11, 5, 2, -6, 3, 1,\n\t\t5, 2, 10, -2, 13, -1, 11, 2, 3, -3, 5, 0,\n\t\t5, -2, 10, 1, 13, 1, 11, 20, 2, -21, 3, 0,\n\t\t3, 1, 10, 1, 3, 1, 5, 0,\n\t\t2, -2, 11, 1, 14, 0,\n\t\t5, 2, 10, -2, 13, 1, 11, 2, 3, -2, 5, 0,\n\t\t3, 1, 10, 5, 2, -7, 3, 0,\n\t\t4, 1, 10, 1, 12, -1, 13, 1, 11, 0,\n\t\t3, 1, 10, 2, 2, -2, 3, 0,\n\t\t4, 2, 10, 2, 12, -2, 13, 1, 11, 0,\n\t\t2, 2, 13, -3, 11, 0,\n\t\t4, 2, 10, -1, 11, 4, 2, -4, 3, 0,\n\t\t3, 1, 10, 4, 2, -5, 3, 0,\n\t\t3, 1, 10, -3, 13, 1, 11, 0,\n\t\t2, 1, 10, 1, 2, 0,\n\t\t3, 1, 11, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, -1, 11, 3, 3, -3, 5, 0,\n\t\t3, 1, 12, 2, 13, -1, 11, 1,\n\t\t4, 2, 10, 1, 12, -2, 13, -1, 11, 0,\n\t\t3, 1, 10, -1, 13, -1, 11, 0,\n\t\t3, 1, 11, 1, 3, -1, 5, 0,\n\t\t2, 1, 12, 1, 11, 2,\n\t\t4, 2, 10, -1, 11, 5, 2, -5, 3, 0,\n\t\t3, 1, 10, 5, 2, -6, 3, 0,\n\t\t3, 2, 10, 1, 12, -3, 11, 0,\n\t\t3, 1, 10, 2, 2, -1, 3, 0,\n\t\t3, 2, 10, -4, 13, 1, 11, 0,\n\t\t3, -2, 10, 2, 13, 1, 14, 0,\n\t\t3, 2, 10, -2, 13, -1, 11, 0,\n\t\t3, 1, 10, 3, 2, -2, 3, 0,\n\t\t4, 1, 10, -1, 12, -1, 13, -1, 11, 0,\n\t\t2, 2, 12, 1, 11, 0,\n\t\t2, 2, 10, -3, 11, 0,\n\t\t3, 1, 10, 4, 2, -3, 3, 0,\n\t\t4, 2, 10, -1, 12, -2, 13, -1, 11, 1,\n\t\t3, 2, 10, -1, 12, -3, 11, 0,\n\t\t3, 4, 10, -4, 13, -1, 11, 0,\n\t\t4, 2, 10, -2, 12, -2, 13, -1, 11, 0,\n\t\t4, 4, 10, -2, 12, -1, 13, -1, 11, 0,\n\t\t3, 6, 10, -3, 13, -1, 11, 0,\n\t\t4, 4, 10, -1, 12, -1, 13, -1, 11, 1,\n\t\t4, 2, 10, -3, 12, -1, 13, 1, 11, 0,\n\t\t3, 5, 10, -2, 13, -1, 11, 0,\n\t\t3, 4, 10, 1, 13, -3, 11, 0,\n\t\t4, 2, 10, -2, 12, 1, 13, -1, 11, 0,\n\t\t3, 3, 10, -1, 12, -1, 11, 0,\n\t\t3, 4, 10, -1, 13, -1, 11, 0,\n\t\t4, 2, 10, -2, 12, -1, 13, 1, 11, 1,\n\t\t3, 4, 10, -3, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 12, 1, 13, -1, 11, 1,\n\t\t5, -2, 10, 1, 13, -1, 11, 2, 2, -2, 3, 0,\n\t\t2, 3, 10, -1, 11, 0,\n\t\t4, 4, 10, 1, 12, -1, 13, -1, 11, 0,\n\t\t4, 2, 10, -1, 12, -1, 13, 1, 11, 2,\n\t\t5, -2, 10, 1, 13, -1, 11, 1, 3, -1, 5, 0,\n\t\t3, 3, 10, -2, 13, 1, 11, 0,\n\t\t5, -2, 10, 1, 13, -1, 11, 1, 2, -1, 3, 0,\n\t\t3, 2, 10, 1, 13, -1, 11, 0,\n\t\t3, -2, 10, -1, 13, 1, 14, 0,\n\t\t3, 2, 12, -1, 13, -1, 11, 1,\n\t\t3, 3, 10, 1, 12, -1, 11, 0,\n\t\t3, 1, 10, -1, 12, 1, 11, 0,\n\t\t4, -1, 13, -1, 11, 3, 2, -3, 3, 0,\n\t\t4, -1, 13, -1, 11, 2, 3, -2, 5, 0,\n\t\t3, 2, 10, -1, 13, 1, 14, 0,\n\t\t4, -2, 10, -1, 11, 18, 2, -16, 3, 0,\n\t\t6, 2, 10, -1, 13, 1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t3, 2, 10, -1, 13, 1, 11, 0,\n\t\t6, -2, 10, 1, 13, -1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t5, 2, 10, -2, 13, 1, 11, 18, 2, -16, 3, 0,\n\t\t4, -2, 10, 1, 13, -2, 11, 1, 14, 0,\n\t\t3, 1, 12, -3, 13, 1, 11, 0,\n\t\t3, 1, 10, 2, 13, -1, 11, 0,\n\t\t4, 2, 10, 1, 12, 1, 13, -1, 11, 1,\n\t\t3, 1, 12, -1, 13, -1, 11, 1,\n\t\t4, -1, 13, -1, 11, 1, 3, -1, 5, 0,\n\t\t2, 1, 10, 1, 11, 0,\n\t\t4, 2, 10, 1, 12, -1, 13, 1, 11, 1,\n\t\t3, 1, 12, 1, 13, -3, 11, 0,\n\t\t4, -1, 13, -1, 11, 1, 2, -1, 3, 0,\n\t\t5, 2, 10, -1, 13, 1, 11, 2, 2, -2, 3, 0,\n\t\t2, 3, 13, -1, 11, 0,\n\t\t4, 1, 10, 1, 12, -2, 13, -1, 11, 0,\n\t\t4, 2, 10, 2, 12, 1, 13, -1, 11, 0,\n\t\t2, 1, 13, 1, 14, 1,\n\t\t5, 2, 10, -1, 13, 1, 11, 2, 3, -3, 5, 0,\n\t\t4, -2, 13, -1, 11, 18, 2, -16, 3, 1,\n\t\t5, 1, 13, 1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t2, 1, 13, 1, 11, 0,\n\t\t5, -1, 13, -1, 11, 4, 3, -8, 4, 3, 5, 0,\n\t\t3, 1, 11, 18, 2, -16, 3, 1,\n\t\t3, -1, 13, -2, 11, 1, 14, 0,\n\t\t5, 2, 10, -1, 13, 1, 11, 2, 3, -2, 5, 0,\n\t\t5, 2, 10, -1, 13, 1, 11, 3, 2, -3, 3, 0,\n\t\t3, 1, 10, 1, 12, 1, 11, 1,\n\t\t4, 2, 10, 2, 12, -1, 13, 1, 11, 1,\n\t\t2, 1, 13, -3, 11, 0,\n\t\t4, 1, 13, 1, 11, 1, 2, -1, 3, 0,\n\t\t3, 1, 12, 3, 13, -1, 11, 0,\n\t\t4, 2, 10, 1, 12, -3, 13, -1, 11, 0,\n\t\t3, 1, 10, -2, 13, -1, 11, 0,\n\t\t4, 1, 13, 1, 11, 1, 3, -1, 5, 0,\n\t\t3, 1, 12, 1, 13, 1, 11, 1,\n\t\t2, 1, 10, -3, 11, 0,\n\t\t3, 1, 12, -1, 13, 3, 11, 0,\n\t\t3, 2, 10, -3, 13, -1, 11, 0,\n\t\t3, 2, 12, 1, 13, 1, 11, 0,\n\t\t3, 2, 10, -1, 13, -3, 11, 0,\n\t\t4, 2, 10, -1, 12, -3, 13, -1, 11, 0,\n\t\t4, 2, 10, -1, 12, -1, 13, -3, 11, 0,\n\t\t4, 6, 10, -1, 12, -2, 13, -1, 11, 0,\n\t\t3, 4, 10, -2, 12, -1, 11, 0,\n\t\t3, 6, 10, -2, 13, -1, 11, 0,\n\t\t4, 4, 10, -2, 12, -2, 13, 1, 11, 0,\n\t\t3, 4, 10, -1, 12, -1, 11, 1,\n\t\t3, 2, 10, -3, 12, 1, 11, 0,\n\t\t3, 5, 10, -1, 13, -1, 11, 0,\n\t\t4, 4, 10, -1, 12, -2, 13, 1, 11, 0,\n\t\t4, 2, 10, -2, 12, 2, 13, -1, 11, 0,\n\t\t2, 4, 10, -1, 11, 0,\n\t\t3, 2, 10, -2, 12, 1, 11, 1,\n\t\t4, 3, 10, -1, 12, -1, 13, 1, 11, 0,\n\t\t3, 4, 10, -2, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 12, 2, 13, -1, 11, 0,\n\t\t4, -2, 10, -1, 11, 2, 2, -2, 3, 0,\n\t\t3, 3, 10, 1, 13, -1, 11, 0,\n\t\t3, 4, 10, 1, 12, -1, 11, 0,\n\t\t3, 2, 10, -1, 12, 1, 11, 2,\n\t\t4, -2, 10, -1, 11, 1, 3, -1, 5, 0,\n\t\t3, 3, 10, -1, 13, 1, 11, 0,\n\t\t4, 4, 10, 1, 12, -2, 13, 1, 11, 0,\n\t\t3, 2, 10, 2, 13, -1, 11, 0,\n\t\t3, 2, 12, -2, 13, -1, 11, 0,\n\t\t4, 1, 10, -1, 12, 1, 13, 1, 11, 0,\n\t\t2, 2, 10, 1, 14, 0,\n\t\t5, -2, 10, -1, 13, -1, 11, 18, 2, -16, 3, 0,\n\t\t2, 2, 10, 1, 11, 1,\n\t\t5, 2, 10, -1, 13, 1, 11, 18, 2, -16, 3, 0,\n\t\t3, -2, 10, -2, 11, 1, 14, 0,\n\t\t4, 3, 10, 1, 12, -1, 13, 1, 11, 0,\n\t\t3, 2, 10, -2, 13, 3, 11, 0,\n\t\t4, 2, 10, 1, 12, 2, 13, -1, 11, 0,\n\t\t3, 1, 12, -2, 13, -1, 11, 1,\n\t\t3, 1, 10, 1, 13, 1, 11, 0,\n\t\t3, 2, 10, 1, 12, 1, 11, 1,\n\t\t2, 4, 13, -1, 11, 0,\n\t\t2, 2, 13, 1, 14, 0,\n\t\t4, -3, 13, -1, 11, 18, 2, -16, 3, 0,\n\t\t2, 2, 13, 1, 11, 0,\n\t\t4, 1, 13, 1, 11, 18, 2, -16, 3, 0,\n\t\t4, 2, 10, 1, 11, 2, 3, -2, 5, 0,\n\t\t4, 1, 10, 1, 12, 1, 13, 1, 11, 0,\n\t\t3, 2, 10, 2, 12, 1, 11, 0,\n\t\t2, 2, 11, 1, 14, 0,\n\t\t1, 3, 11, 0,\n\t\t3, 1, 10, -3, 13, -1, 11, 0,\n\t\t3, 1, 12, 2, 13, 1, 11, 1,\n\t\t2, 1, 12, 3, 11, 0,\n\t\t3, 2, 10, -4, 13, -1, 11, 0,\n\t\t3, 2, 12, 2, 13, 1, 11, 0,\n\t\t3, 2, 10, -2, 13, -3, 11, 0,\n\t\t4, 6, 10, -1, 12, -1, 13, -1, 11, 0,\n\t\t3, 6, 10, -1, 13, -1, 11, 0,\n\t\t4, 4, 10, -2, 12, -1, 13, 1, 11, 0,\n\t\t3, 6, 10, -3, 13, 1, 11, 0,\n\t\t4, 4, 10, -1, 12, 1, 13, -1, 11, 0,\n\t\t4, 4, 10, -1, 12, -1, 13, 1, 11, 1,\n\t\t3, 5, 10, -2, 13, 1, 11, 0,\n\t\t3, 4, 10, 1, 13, -1, 11, 0,\n\t\t4, 2, 10, -2, 12, 1, 13, 1, 11, 0,\n\t\t3, 4, 10, -1, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 12, 3, 13, -1, 11, 0,\n\t\t4, 4, 10, 1, 12, 1, 13, -1, 11, 0,\n\t\t4, 2, 10, -1, 12, 1, 13, 1, 11, 1,\n\t\t2, 3, 10, 1, 11, 0,\n\t\t4, 4, 10, 1, 12, -1, 13, 1, 11, 0,\n\t\t4, 2, 10, -1, 12, -1, 13, 3, 11, 0,\n\t\t3, 2, 10, 3, 13, -1, 11, 0,\n\t\t3, 2, 10, 1, 13, 1, 14, 0,\n\t\t3, 2, 10, 1, 13, 1, 11, 0,\n\t\t3, 3, 10, 1, 12, 1, 11, 0,\n\t\t3, 2, 10, -1, 13, 3, 11, 0,\n\t\t4, 2, 10, 1, 12, 3, 13, -1, 11, 0,\n\t\t3, 1, 12, -3, 13, -1, 11, 0,\n\t\t3, 1, 10, 2, 13, 1, 11, 0,\n\t\t4, 2, 10, 1, 12, 1, 13, 1, 11, 1,\n\t\t3, 1, 12, -1, 13, -3, 11, 0,\n\t\t2, 1, 10, 3, 11, 0,\n\t\t2, 5, 13, -1, 11, 0,\n\t\t2, 3, 13, 1, 11, 0,\n\t\t4, 1, 10, 1, 12, 2, 13, 1, 11, 0,\n\t\t2, 1, 13, 3, 11, 0,\n\t\t3, 1, 12, 3, 13, 1, 11, 0,\n\t\t3, 1, 12, 1, 13, 3, 11, 0,\n\t\t3, 2, 10, -5, 13, -1, 11, 0,\n\t\t3, 6, 10, -1, 12, -1, 11, 0,\n\t\t4, 6, 10, -1, 12, -2, 13, 1, 11, 0,\n\t\t2, 6, 10, -1, 11, 0,\n\t\t3, 4, 10, -2, 12, 1, 11, 0,\n\t\t3, 6, 10, -2, 13, 1, 11, 0,\n\t\t4, 4, 10, -1, 12, 2, 13, -1, 11, 0,\n\t\t3, 4, 10, -1, 12, 1, 11, 0,\n\t\t3, 4, 10, 2, 13, -1, 11, 0,\n\t\t4, 2, 10, -2, 12, 2, 13, 1, 11, 0,\n\t\t2, 4, 10, 1, 11, 0,\n\t\t3, 4, 10, -2, 13, 3, 11, 0,\n\t\t4, 2, 10, -1, 12, 2, 13, 1, 11, 0,\n\t\t3, 3, 10, 1, 13, 1, 11, 0,\n\t\t3, 4, 10, 1, 12, 1, 11, 0,\n\t\t3, 2, 10, -1, 12, 3, 11, 0,\n\t\t3, 2, 10, 4, 13, -1, 11, 0,\n\t\t3, 2, 10, 2, 13, 1, 11, 0,\n\t\t2, 2, 10, 3, 11, 0,\n\t\t3, 1, 12, -4, 13, -1, 11, 0,\n\t\t3, 1, 10, 3, 13, 1, 11, 0,\n\t\t4, 2, 10, 1, 12, 2, 13, 1, 11, 0,\n\t\t2, 4, 13, 1, 11, 0,\n\t\t2, 2, 13, 3, 11, 0,\n\t\t1, 5, 11, 0,\n\t\t3, 1, 12, 4, 13, 1, 11, 0,\n\t\t4, 6, 10, -1, 12, -1, 13, 1, 11, 0,\n\t\t3, 6, 10, 1, 13, -1, 11, 0,\n\t\t3, 6, 10, -1, 13, 1, 11, 0,\n\t\t4, 4, 10, -1, 12, 1, 13, 1, 11, 0,\n\t\t3, 4, 10, 1, 13, 1, 11, 0,\n\t\t3, 4, 10, -1, 13, 3, 11, 0,\n\t\t4, 2, 10, -1, 12, 3, 13, 1, 11, 0,\n\t\t4, 4, 10, 1, 12, 1, 13, 1, 11, 0,\n\t\t3, 2, 10, 3, 13, 1, 11, 0,\n\t\t3, 2, 10, 1, 13, 3, 11, 0,\n\t\t2, 5, 13, 1, 11, 0,\n\t\t2, 3, 13, 3, 11, 0,\n\t\t2, 6, 10, 1, 11, 0,\n\t\t3, 4, 10, 2, 13, 1, 11, 0,\n\t\t3, 2, 10, 4, 13, 1, 11, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/moonlat.js?");

/***/ }),

/***/ "./src/ptables/moonlr.js":
/*!*******************************!*\
  !*** ./src/ptables/moonlr.js ***!
  \*******************************/
/*! exports provided: moonlr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"moonlr\", function() { return moonlr; });\nconst moonlr = {\n\tmaxargs: 14,\n\tmax_harmonic: [3, 26, 29, 23, 5, 10, 0, 0, 0, 8, 4, 4, 6, 2, 0, 0, 0, 0],\n\tmax_power_of_t: 3,\n\tdistance: 2.5735686895300000e-03,\n\ttimescale: 3.6525000000000000e+06,\n\ttrunclvl: 1.0000000000000000e-04,\n\tlon_tbl: [\t175667, 66453, 5249, -42,\n\t\t20057, 403, -2360, 6148,\n\t\t-7644, 24646, -1273, 9127,\n\t\t-1395, 1958,\n\t\t232, -289,\n\t\t-97, 553, 69, 130,\n\t\t-80, 6,\n\t\t129, -868, 26, -89,\n\t\t1042, 1172, 194, -112,\n\t\t-47433, -241666, 224626, -103752,\n\t\t63419, 127606,\n\t\t2294, -691, -1827, -1254,\n\t\t-1, -119,\n\t\t1057, 324,\n\t\t505, -195, 254, -641,\n\t\t-36, 1008, -1082, -3,\n\t\t-87, 122,\n\t\t161, 11,\n\t\t2, -106,\n\t\t29, -123,\n\t\t-32, 41,\n\t\t-524, -35,\n\t\t133, -595,\n\t\t225, 837, -108, -191,\n\t\t-2294, 841, -340, -394,\n\t\t-351, -1039, 238, -108,\n\t\t-66, 21,\n\t\t1405, 869, 520, 2776,\n\t\t-174, 71,\n\t\t425, 652, -1260, -80,\n\t\t249, 77,\n\t\t-192, -17,\n\t\t-97, 134,\n\t\t-7, -54,\n\t\t-802, -7436, -2824, 70869,\n\t\t-35, 2481,\n\t\t1865, 1749, -2166, 2415,\n\t\t33, -183,\n\t\t-835, 283,\n\t\t27, -45,\n\t\t56, 235,\n\t\t2, 718,\n\t\t-1206, 275, -87, -158,\n\t\t-7, -2534, 0, 10774,\n\t\t1, -324,\n\t\t-208, 821,\n\t\t281, 1340, -797, 440,\n\t\t224, 72,\n\t\t-65, -5,\n\t\t-7, -44,\n\t\t-48, 66,\n\t\t-151, -40,\n\t\t-41, -45,\n\t\t76, -108,\n\t\t-18, 1202, 0, -2501,\n\t\t1438, -595, 900, 3040,\n\t\t-3435, -5,\n\t\t-100, -26,\n\t\t0, -13714,\n\t\t-183, 68,\n\t\t453, -83,\n\t\t-228, 325,\n\t\t97, 13,\n\t\t2, 105,\n\t\t-61, 257,\n\t\t0, 57,\n\t\t88, -11,\n\t\t-1, -8220,\n\t\t0, 275,\n\t\t-43, -10,\n\t\t-199, 105,\n\t\t1, -5849, 2, 24887,\n\t\t-128, 48,\n\t\t712, 970, -1407, 845,\n\t\t-266, 378,\n\t\t311, 1526, -1751, 27,\n\t\t0, -185858,\n\t\t133, 6383,\n\t\t-108, 25,\n\t\t-7, 1944,\n\t\t5, 390,\n\t\t-11, 31,\n\t\t277, -384, 158, 72,\n\t\t-81, -41, -13, -111,\n\t\t-2332, -65804, -698, 505812,\n\t\t34, 1676716, -72, -6664384,\n\t\t154, -57, 52, 95,\n\t\t-4, -5,\n\t\t-7, 37,\n\t\t-63, -32,\n\t\t4, 3349, 1, -14370,\n\t\t16, -83,\n\t\t0, -401,\n\t\t13, 3013,\n\t\t48, -20,\n\t\t0, 250,\n\t\t51, -79,\n\t\t-7, -146,\n\t\t148, 9,\n\t\t0, -64,\n\t\t-17, -59,\n\t\t-67, -492,\n\t\t-2, 2116601,\n\t\t-12, -1848,\n\t\t8, -436,\n\t\t-6, 324, 0, -1363,\n\t\t-163, 9,\n\t\t0, -74,\n\t\t63, 8167, -29, 37587,\n\t\t-22, -74501,\n\t\t-71, 497,\n\t\t-1, 551747,\n\t\t-87, -22,\n\t\t0, -51,\n\t\t-1, -463,\n\t\t0, -444,\n\t\t3, 89,\n\t\t15, -84,\n\t\t-36, -6829, -5, -21663,\n\t\t0, 86058,\n\t\t0, -298,\n\t\t-2, 751, -2, -1015,\n\t\t0, 69,\n\t\t1, -4989, 0, 21458,\n\t\t0, -330,\n\t\t0, -7,\n\t\t0, -226,\n\t\t0, -1407, 0, 2942,\n\t\t0, 66,\n\t\t0, 667,\n\t\t0, -155,\n\t\t0, 105,\n\t\t0, -107,\n\t\t0, -74,\n\t\t0, -52,\n\t\t0, 91,\n\t\t0, 59,\n\t\t0, 235,\n\t\t-1, -1819, 0, 2470,\n\t\t71, 13,\n\t\t0, 1026,\n\t\t14, -54,\n\t\t0, -174,\n\t\t-121, -19,\n\t\t0, -200,\n\t\t0, 3008,\n\t\t-16, -8043, -10, -37136,\n\t\t-3, 73724,\n\t\t-157, -5,\n\t\t0, -854,\n\t\t8, 147,\n\t\t-13, -893,\n\t\t0, 11869,\n\t\t-23, -172,\n\t\t89, 14,\n\t\t-1, 872, 0, -3744,\n\t\t11, 1606,\n\t\t0, -559,\n\t\t-1, -2530,\n\t\t0, 454,\n\t\t0, -193,\n\t\t-60, -10,\n\t\t-82, -13,\n\t\t-75, 6,\n\t\t36, 81,\n\t\t354, -162836, 148, -516569,\n\t\t4, 2054441,\n\t\t4, -94,\n\t\t39, 38,\n\t\t61, -30,\n\t\t2, 121,\n\t\t-11, 590,\n\t\t62, 2108,\n\t\t0, -12242,\n\t\t-476, -42,\n\t\t-84, 113,\n\t\t-394, 236,\n\t\t0, 276,\n\t\t-49, 31,\n\t\t0, 86,\n\t\t1, -1313,\n\t\t1, 69,\n\t\t-60, 88,\n\t\t-46, 18,\n\t\t0, -63818,\n\t\t14, -93,\n\t\t113, 547, -618, 17,\n\t\t-7, 12290, -1, -25679,\n\t\t0, 92,\n\t\t-115, 50,\n\t\t-48, 233,\n\t\t4, 1311, 1, -5567,\n\t\t3, 1251,\n\t\t29, 548,\n\t\t-244, 257,\n\t\t-2, 1825,\n\t\t42, 637,\n\t\t-46, 68,\n\t\t-62, 8,\n\t\t3, 110,\n\t\t445, -100, -316, -202,\n\t\t2925, -621, 763, 1495,\n\t\t-169, -184, 20, -76,\n\t\t-475, -138, 8, -141,\n\t\t-197, 1351, -1284, 422,\n\t\t-129, 1879, -102, 8382,\n\t\t-9, 45864958,\n\t\t-215, 1350, -1285, 422,\n\t\t-481, -136, 8, -140,\n\t\t40, -53,\n\t\t2622, -543, 700, 1406,\n\t\t402, -95, -318, -194,\n\t\t122, 13,\n\t\t-30, 147,\n\t\t-121, -902,\n\t\t61, -23,\n\t\t-63, 7,\n\t\t69, 479,\n\t\t-224, 228,\n\t\t-7, 500,\n\t\t0, -429,\n\t\t-42, 193,\n\t\t-92, 37,\n\t\t67, 5,\n\t\t-350, -31,\n\t\t0, 67,\n\t\t-55, -5,\n\t\t0, 47,\n\t\t-36, 53,\n\t\t5, 561,\n\t\t0, -126,\n\t\t0, 871,\n\t\t-52, 4,\n\t\t-201, 116922, -22, 371352,\n\t\t-12, -1473285,\n\t\t0, 87,\n\t\t-164, 84,\n\t\t-3, 422,\n\t\t30, 1434,\n\t\t-26, 38,\n\t\t2, -1249943,\n\t\t-404, -34,\n\t\t-57, 79,\n\t\t5, 509,\n\t\t1, 131,\n\t\t-344, 168,\n\t\t112, 22540, 30, 71218,\n\t\t18, -283983,\n\t\t0, -851,\n\t\t0, -1538,\n\t\t0, 1360,\n\t\t-12, 51,\n\t\t-48, 68,\n\t\t88, -20,\n\t\t1, 63,\n\t\t0, -568,\n\t\t303, 25,\n\t\t0, -122,\n\t\t87, 586, -606, -14,\n\t\t0, -100,\n\t\t-85, 8,\n\t\t-165, 54,\n\t\t-45, 140,\n\t\t0, -54,\n\t\t4, -831, 1, 3495,\n\t\t31, 116,\n\t\t-46, -11,\n\t\t-371, 190,\n\t\t-507, 399,\n\t\t-2, 57,\n\t\t-60, 36,\n\t\t-198, -1174, -613, 4988,\n\t\t-87, -4,\n\t\t141, 560, -276, 187,\n\t\t1876, 1379, 778, 4386,\n\t\t24, -15,\n\t\t167, -774,\n\t\t-71, -9,\n\t\t-62, 90,\n\t\t98, 580, -663, -7,\n\t\t34, -112,\n\t\t57, 15,\n\t\t-355, -214,\n\t\t-3240, -13605, 12229, -5723,\n\t\t3496, 7063,\n\t\t33, -51,\n\t\t1908, 1160, -226, 715,\n\t\t964, 1170, -1264, 623,\n\t\t14071, 5280, 5614, 3026,\n\t\t488, 1576, -2, 226395859,\n\t\t824, 1106, -1287, 617,\n\t\t1917, 1156, -214, 718,\n\t\t90, -97,\n\t\t12078, -2366, 3282, 6668,\n\t\t-219, 9179, 593, 2015,\n\t\t-282, -186,\n\t\t57, 25,\n\t\t31, -102,\n\t\t-77, -4,\n\t\t-268, -341, -7, -45,\n\t\t-3, 74,\n\t\t15, -615,\n\t\t-88, -7,\n\t\t234, -353,\n\t\t1, -119,\n\t\t-163, -1159, -601, 4969,\n\t\t22, -58,\n\t\t-17, -11434,\n\t\t17, 54,\n\t\t348, 348, -460, 434,\n\t\t-371, 175,\n\t\t-11, -204,\n\t\t4, -6440,\n\t\t-5, -53,\n\t\t-4, -14388, -37, -45231,\n\t\t-7, 179562,\n\t\t-44, 136,\n\t\t-160, 49,\n\t\t-101, 81,\n\t\t-1, -188,\n\t\t0, 2,\n\t\t-4, 12124, -11, -25217,\n\t\t71, 543, -557, -14,\n\t\t-75, 526,\n\t\t0, 395274,\n\t\t-233, -16,\n\t\t93, -20,\n\t\t-43, 61,\n\t\t0, -1275,\n\t\t0, -824,\n\t\t1, -415, 0, 1762,\n\t\t-261, 131,\n\t\t-45, 64,\n\t\t-297, -25,\n\t\t0, -17533,\n\t\t-6, -56,\n\t\t21, 1100,\n\t\t1, 327,\n\t\t1, 66,\n\t\t23, -217,\n\t\t-83, -7,\n\t\t83, 86847, 49, 275754,\n\t\t-4, -1093857,\n\t\t-46, 2,\n\t\t0, -24,\n\t\t0, -419,\n\t\t0, -5833,\n\t\t1, 506,\n\t\t0, -827,\n\t\t-1, -377,\n\t\t-11, -78,\n\t\t0, 131945,\n\t\t-2, -334,\n\t\t1, -75,\n\t\t0, -72,\n\t\t0, -213,\n\t\t-6, 5564, -2, -11618,\n\t\t0, 1790,\n\t\t0, -131,\n\t\t0, 6,\n\t\t0, -76,\n\t\t0, -130,\n\t\t0, -1115, 0, 4783,\n\t\t0, -195,\n\t\t0, -627,\n\t\t0, -55,\n\t\t0, -83,\n\t\t0, 163,\n\t\t0, -54,\n\t\t0, 82,\n\t\t0, 149,\n\t\t0, -754, 0, 1578,\n\t\t0, 138,\n\t\t0, 68,\n\t\t2, -2506, 0, 3399,\n\t\t0, -125,\n\t\t86, 16,\n\t\t0, -6350, 0, 27316,\n\t\t18, -63,\n\t\t0, -169,\n\t\t-1, 46,\n\t\t-136, -21,\n\t\t0, -239,\n\t\t-30, -8788, -15, -40549,\n\t\t-4, 80514,\n\t\t-46, -8,\n\t\t-168, -6,\n\t\t-1, 536, 0, -2314,\n\t\t9, 148,\n\t\t-13, -842,\n\t\t-1, 307713,\n\t\t-23, -175,\n\t\t95, 15,\n\t\t0, -297,\n\t\t11, 1341,\n\t\t0, -106,\n\t\t0, 5,\n\t\t-4, 68,\n\t\t-114, 10,\n\t\t32, 75,\n\t\t159, -130487, 98, -413967,\n\t\t2, 1647339,\n\t\t-4, -85,\n\t\t100, -46,\n\t\t2, 95,\n\t\t-11, 461,\n\t\t51, 1647,\n\t\t0, -32090,\n\t\t-375, -33,\n\t\t-65, 86,\n\t\t-300, 180,\n\t\t0, 836, 0, -3576,\n\t\t0, -222,\n\t\t0, -993,\n\t\t-41, 60,\n\t\t0, -4537,\n\t\t-431, -34,\n\t\t2, 927, 0, -1931,\n\t\t-79, 33,\n\t\t-31, 144,\n\t\t-1, 284, 0, -1207,\n\t\t0, 88,\n\t\t-11, 315,\n\t\t-178, 177,\n\t\t-1, 144,\n\t\t-58, 986,\n\t\t11, 86,\n\t\t-228, -110,\n\t\t2636, -494, 718, 1474,\n\t\t28, -35,\n\t\t-24, 782, -797, 277,\n\t\t2142, -1231, 856, 1853,\n\t\t74, 10797, 0, 23699298,\n\t\t-21, 786, -796, 277,\n\t\t27, -34,\n\t\t2615, -494, 712, 1461,\n\t\t-226, -109,\n\t\t-11, 663,\n\t\t0, -123,\n\t\t-169, 157,\n\t\t-54, 266,\n\t\t0, -76,\n\t\t1, -634, 0, 2738,\n\t\t-25, 106,\n\t\t-63, 24,\n\t\t0, -372,\n\t\t-221, -24,\n\t\t0, -5356,\n\t\t0, -219,\n\t\t0, 91,\n\t\t-28, 7684, -6, 24391,\n\t\t-1, -96795,\n\t\t-77, 43,\n\t\t2, 95,\n\t\t-47, -3,\n\t\t0, -84530,\n\t\t2, 310,\n\t\t1, 88,\n\t\t111, 19331, 32, 61306,\n\t\t4, -243595,\n\t\t0, 770,\n\t\t0, -103,\n\t\t0, 160,\n\t\t0, 356,\n\t\t0, 236,\n\t\t-41, 354,\n\t\t39, 303,\n\t\t12, -56,\n\t\t873, -143, 238, 482,\n\t\t-28, 35,\n\t\t-93, 31,\n\t\t-3, 7690211,\n\t\t-91, 33,\n\t\t-34, 43,\n\t\t824, -130, 226, 450,\n\t\t-39, 341,\n\t\t-1, -687,\n\t\t0, -303,\n\t\t11, -2935, 1, 12618,\n\t\t121, 924, 9, -1836,\n\t\t-268, -1144, -678, 3685,\n\t\t-69, -261,\n\t\t0, -4115951,\n\t\t-69, -261,\n\t\t5, -151,\n\t\t0, -88,\n\t\t0, 91,\n\t\t0, 187,\n\t\t0, -1281,\n\t\t1, 77,\n\t\t1, 6059, 3, 19238,\n\t\t0, -76305,\n\t\t0, -90,\n\t\t0, -238,\n\t\t0, -962, 0, 4133,\n\t\t0, 96,\n\t\t0, 9483,\n\t\t0, 85,\n\t\t0, -688,\n\t\t0, -5607,\n\t\t0, 55,\n\t\t0, -752,\n\t\t0, 71,\n\t\t0, 303,\n\t\t0, -288,\n\t\t0, 57,\n\t\t0, 45,\n\t\t0, 189,\n\t\t0, 401,\n\t\t0, -1474, 0, 3087,\n\t\t0, -71,\n\t\t0, 2925,\n\t\t0, -75,\n\t\t0, 359,\n\t\t0, 55,\n\t\t1, -10155, 0, 43735,\n\t\t0, -572,\n\t\t0, -49,\n\t\t0, -660,\n\t\t0, -3591, 0, 7516,\n\t\t0, 668,\n\t\t-1, -53,\n\t\t-2, 384259,\n\t\t0, -163,\n\t\t0, -93,\n\t\t1, 112,\n\t\t-95, -11528, -22, -36505,\n\t\t-1, 145308,\n\t\t5, 145,\n\t\t0, 4047,\n\t\t1, 1483, 0, -6352,\n\t\t0, 991, 0, -4262,\n\t\t0, -93,\n\t\t0, -334,\n\t\t0, -160,\n\t\t0, -153,\n\t\t-10, 127,\n\t\t51, 185,\n\t\t-77, 18,\n\t\t56, 1217, 6, 1919574,\n\t\t-74, 17,\n\t\t50, 180,\n\t\t-5, 93,\n\t\t0, -104,\n\t\t0, -58,\n\t\t-3, -353, -1, 1499,\n\t\t0, -229,\n\t\t-15, 86,\n\t\t0, -93657,\n\t\t0, 1561, 0, -6693,\n\t\t0, -5839,\n\t\t1, 6791, 0, -29143,\n\t\t1, -701, 0, 3015,\n\t\t0, 2543,\n\t\t0, 693,\n\t\t-1, 361233,\n\t\t0, -50,\n\t\t0, 946,\n\t\t-1, -140,\n\t\t-70, 407,\n\t\t0, -450995,\n\t\t0, -368,\n\t\t0, 54,\n\t\t0, -802,\n\t\t0, -96,\n\t\t0, 1274, 0, -5459,\n\t\t0, -614, 0, 2633,\n\t\t0, 685,\n\t\t0, -915,\n\t\t0, -85,\n\t\t0, 88,\n\t\t0, 106,\n\t\t0, 928,\n\t\t0, -726, 0, 1523,\n\t\t0, 5715,\n\t\t0, -4338, 0, 18706,\n\t\t0, -135,\n\t\t0, -132,\n\t\t0, -158,\n\t\t0, -98,\n\t\t0, 680,\n\t\t-1, 138968,\n\t\t0, -192,\n\t\t0, -1698,\n\t\t0, -2734, 0, 11769,\n\t\t0, 4,\n\t\t0, 673, 0, -2891,\n\t\t0, 889, 0, -3821,\n\t\t0, 121,\n\t\t-1, 143783,\n\t\t0, 231,\n\t\t-9, 51,\n\t\t0, -57413,\n\t\t0, -483,\n\t\t0, -407,\n\t\t0, 676, 0, -2902,\n\t\t0, 531,\n\t\t0, 445,\n\t\t0, 672,\n\t\t0, 19336,\n\t\t0, 70,\n\t\t0, -39976,\n\t\t0, -68,\n\t\t0, 4203,\n\t\t0, -406,\n\t\t0, 446,\n\t\t0, -108,\n\t\t0, 79,\n\t\t0, 84,\n\t\t0, 734,\n\t\t0, 255,\n\t\t0, 3944,\n\t\t0, -655, 0, 2825,\n\t\t0, -109,\n\t\t0, -234,\n\t\t0, 57,\n\t\t0, 19773,\n\t\t0, -2013,\n\t\t0, 958,\n\t\t0, -521,\n\t\t0, -757,\n\t\t0, 10594,\n\t\t0, -9901,\n\t\t0, 199,\n\t\t0, -275,\n\t\t0, 64,\n\t\t0, 54,\n\t\t0, 165,\n\t\t0, 1110,\n\t\t0, -3286,\n\t\t0, 909,\n\t\t0, 54,\n\t\t0, 87,\n\t\t0, 258,\n\t\t0, 1261,\n\t\t0, -51,\n\t\t0, 336,\n\t\t0, -114,\n\t\t0, 2185,\n\t\t0, -850,\n\t\t0, 75,\n\t\t0, -69,\n\t\t0, -103,\n\t\t0, 776,\n\t\t0, -1238,\n\t\t0, 137,\n\t\t0, 67,\n\t\t0, -260,\n\t\t0, 130,\n\t\t0, 49,\n\t\t0, 228,\n\t\t0, 215,\n\t\t0, -178,\n\t\t0, 57,\n\t\t0, -133\n\t],\n\tlat_tbl: [],\n\trad_tbl: [\n\t\t-5422, -2120, 1077, 772,\n\t\t39, 75, 3, 10,\n\t\t-468, -326, -113, -78,\n\t\t-4, -2,\n\t\t1, 3,\n\t\t29, 24, 4, 2,\n\t\t1, 0,\n\t\t-9, 7, -2, 0,\n\t\t-32, -13, -3, -3,\n\t\t233, 126, 89, 77,\n\t\t-33, 16,\n\t\t3, -3, 0, -1,\n\t\t2, 0,\n\t\t0, 1,\n\t\t4, 9, 1, 1,\n\t\t16, -1, 0, 18,\n\t\t3, 2,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t0, -1,\n\t\t-22, -5,\n\t\t10, 3, 1, 1,\n\t\t-15, 7, -2, 1,\n\t\t-8, -11, -1, -2,\n\t\t-1, 1,\n\t\t46, -58, 126, -23,\n\t\t4, 8,\n\t\t35, 8, 10, -17,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-10, -7,\n\t\t0, 0,\n\t\t-23, 3, 151, 10,\n\t\t-327, 0,\n\t\t4, -5, 6, 5,\n\t\t1, 0,\n\t\t-1, -3,\n\t\t0, 0,\n\t\t0, 1,\n\t\t-185, 0,\n\t\t-3, -24, -5, -2,\n\t\t-1062, 3, 4560, 0,\n\t\t-3, 0,\n\t\t4, 1,\n\t\t8, -1, 2, 4,\n\t\t0, 1,\n\t\t0, -1,\n\t\t0, 0,\n\t\t-1, 0,\n\t\t0, 1,\n\t\t0, 0,\n\t\t-1, -1,\n\t\t277, 3, -583, 1,\n\t\t-1, 4, -32, 7,\n\t\t0, -34,\n\t\t1, -1,\n\t\t-23685, 0,\n\t\t-1, -2,\n\t\t-1, -7,\n\t\t-5, -4,\n\t\t0, 2,\n\t\t-2, 0,\n\t\t-5, -1,\n\t\t35, 0,\n\t\t0, 2,\n\t\t202, 0,\n\t\t180, 0,\n\t\t0, -1,\n\t\t-3, -6,\n\t\t-193, 0, 770, -1,\n\t\t-2, -4,\n\t\t-32, 23, -28, -46,\n\t\t-13, -9,\n\t\t-54, 10, -1, -61,\n\t\t-44895, 0,\n\t\t-230, 5,\n\t\t-1, -4,\n\t\t-71, 0,\n\t\t-15, 0,\n\t\t1, 0,\n\t\t15, 11, -3, 6,\n\t\t2, -3, 4, -1,\n\t\t2576, -138, -19881, -47,\n\t\t-65906, -1, 261925, -4,\n\t\t-2, -7, 4, -2,\n\t\t0, 0,\n\t\t-1, 0,\n\t\t1, -3,\n\t\t172, -2, -727, 0,\n\t\t4, 1,\n\t\t324, 0,\n\t\t-139, 1,\n\t\t1, 3,\n\t\t-276, 0,\n\t\t5, 3,\n\t\t9, 0,\n\t\t-1, 10,\n\t\t-37, 0,\n\t\t5, -1,\n\t\t76, -10,\n\t\t1318810, 1,\n\t\t12, -1,\n\t\t-38, 1,\n\t\t-141, 0, 611, 0,\n\t\t0, -11,\n\t\t4, 0,\n\t\t-627, 2, -2882, -3,\n\t\t5711, -2,\n\t\t-48, -7,\n\t\t55294, 0,\n\t\t2, -7,\n\t\t31, 0,\n\t\t34, 0,\n\t\t-259, 0,\n\t\t-55, 2,\n\t\t6, 3,\n\t\t-4273, 20, -13554, 3,\n\t\t53878, 0,\n\t\t-46, 0,\n\t\t-85, 0, 114, 0,\n\t\t-45, 0,\n\t\t-818, 0, 3520, 0,\n\t\t34, 0,\n\t\t-157, 0,\n\t\t29, 0,\n\t\t-878, 0, 1838, 0,\n\t\t-428, 0,\n\t\t161, 0,\n\t\t24, 0,\n\t\t65, 0,\n\t\t19, 0,\n\t\t15, 0,\n\t\t12, 0,\n\t\t-26, 0,\n\t\t-14, 0,\n\t\t-149, 0,\n\t\t584, 0, -793, 0,\n\t\t4, -23,\n\t\t-238, 0,\n\t\t-18, -5,\n\t\t45, 0,\n\t\t-7, 42,\n\t\t79, 0,\n\t\t-1723, 0,\n\t\t2895, -6, 13362, -4,\n\t\t-26525, -1,\n\t\t-2, 57,\n\t\t291, 0,\n\t\t52, -3,\n\t\t-327, 5,\n\t\t-2755, 0,\n\t\t-63, 9,\n\t\t5, -33,\n\t\t-261, -1, 1122, 0,\n\t\t621, -4,\n\t\t-227, 0,\n\t\t1077, 0,\n\t\t-167, 0,\n\t\t85, 0,\n\t\t-4, 23,\n\t\t-5, 32,\n\t\t3, 30,\n\t\t-32, 14,\n\t\t64607, 141, 204958, 59,\n\t\t-815115, 2,\n\t\t-37, -1,\n\t\t15, -15,\n\t\t12, 24,\n\t\t48, -1,\n\t\t235, 4,\n\t\t843, -25,\n\t\t4621, 0,\n\t\t-17, 191,\n\t\t45, 34,\n\t\t95, 159,\n\t\t-132, 0,\n\t\t13, 20,\n\t\t32, 0,\n\t\t-540, 0,\n\t\t29, 0,\n\t\t37, 25,\n\t\t8, 19,\n\t\t22127, 0,\n\t\t-35, -5,\n\t\t232, -48, 7, 262,\n\t\t5428, 3, -11342, 1,\n\t\t-45, 0,\n\t\t-21, -49,\n\t\t-100, -21,\n\t\t-626, 1, 2665, 0,\n\t\t532, -2,\n\t\t235, -12,\n\t\t-111, -105,\n\t\t774, 1,\n\t\t-283, 17,\n\t\t29, 20,\n\t\t3, 27,\n\t\t47, -2,\n\t\t-43, -192, -87, 136,\n\t\t-269, -1264, 646, -330,\n\t\t-79, 73, -33, -9,\n\t\t60, -205, 61, 4,\n\t\t-584, -85, -182, -555,\n\t\t-780, -57, -3488, -45,\n\t\t-19818328, -4,\n\t\t583, 93, 182, 555,\n\t\t-59, 208, -60, -4,\n\t\t23, 17,\n\t\t235, 1133, -608, 302,\n\t\t41, 174, 84, -137,\n\t\t6, -53,\n\t\t63, 13,\n\t\t-392, 52,\n\t\t-10, -27,\n\t\t-3, -27,\n\t\t199, -31,\n\t\t99, 97,\n\t\t-218, -3,\n\t\t209, 0,\n\t\t84, 18,\n\t\t16, 40,\n\t\t2, -30,\n\t\t14, -154,\n\t\t30, 0,\n\t\t-2, 24,\n\t\t-108, 0,\n\t\t-24, -16,\n\t\t262, -2,\n\t\t55, 0,\n\t\t-304, 0,\n\t\t2, 25,\n\t\t55112, 95, 175036, 11,\n\t\t-694477, 5,\n\t\t41, 0,\n\t\t-38, -76,\n\t\t199, 1,\n\t\t679, -14,\n\t\t-17, -12,\n\t\t582619, 1,\n\t\t-16, 191,\n\t\t38, 27,\n\t\t-234, 2,\n\t\t-60, 0,\n\t\t80, 163,\n\t\t-10296, 48, -32526, 13,\n\t\t129703, 8,\n\t\t-1366, 0,\n\t\t-741, 0,\n\t\t-646, 0,\n\t\t25, 6,\n\t\t33, 23,\n\t\t10, 43,\n\t\t-31, 0,\n\t\t-6, 0,\n\t\t-12, 147,\n\t\t59, 0,\n\t\t287, -42, -7, 297,\n\t\t-59, 0,\n\t\t-4, -42,\n\t\t-27, -81,\n\t\t-69, -22,\n\t\t27, 0,\n\t\t-423, -2, 1779, -1,\n\t\t-57, 15,\n\t\t5, -23,\n\t\t94, 182,\n\t\t-197, -250,\n\t\t24, 1,\n\t\t-18, -30,\n\t\t581, -98, -2473, -303,\n\t\t-2, 43,\n\t\t-277, 70, -92, -136,\n\t\t-681, 925, -2165, 384,\n\t\t-8, -12,\n\t\t382, 82,\n\t\t-4, 35,\n\t\t-45, -31,\n\t\t-286, 48, 3, -328,\n\t\t-55, -17,\n\t\t8, -28,\n\t\t-106, 175,\n\t\t-6735, 1601, -2832, -6052,\n\t\t3495, -1730,\n\t\t-25, -17,\n\t\t-574, 944, -354, -112,\n\t\t-579, 476, -308, -625,\n\t\t-2411, 7074, -1529, 2828,\n\t\t-1335, 247, -112000844, -1,\n\t\t545, -409, 305, 637,\n\t\t572, -950, 356, 106,\n\t\t48, 44,\n\t\t1170, 5974, -3298, 1624,\n\t\t-4538, -106, -996, 294,\n\t\t92, -139,\n\t\t-12, 28,\n\t\t50, 16,\n\t\t2, -38,\n\t\t169, -133, 22, -3,\n\t\t38, 1,\n\t\t305, 7,\n\t\t4, -44,\n\t\t175, 116,\n\t\t59, 1,\n\t\t-573, 81, 2453, 297,\n\t\t29, 11,\n\t\t5674, -8,\n\t\t-27, 9,\n\t\t173, -173, 215, 228,\n\t\t-87, -184,\n\t\t102, -5,\n\t\t3206, 2,\n\t\t-53, 2,\n\t\t7159, -7, 22505, -19,\n\t\t-89344, -3,\n\t\t67, 22,\n\t\t24, 79,\n\t\t-40, -50,\n\t\t94, 0,\n\t\t186, 0,\n\t\t-6063, 0, 12612, -5,\n\t\t-271, 35, 7, -278,\n\t\t-479, -74,\n\t\t426754, 0,\n\t\t8, -116,\n\t\t-10, -47,\n\t\t-31, -22,\n\t\t645, 0,\n\t\t426, 0,\n\t\t-213, 0, 903, 0,\n\t\t-67, -133,\n\t\t-33, -23,\n\t\t13, -152,\n\t\t-9316, 0,\n\t\t29, -3,\n\t\t-564, 11,\n\t\t-167, 0,\n\t\t-34, 0,\n\t\t114, 12,\n\t\t4, -44,\n\t\t-44561, 42, -141493, 25,\n\t\t561256, -2,\n\t\t-1, -24,\n\t\t-261, 0,\n\t\t211, 0,\n\t\t-4263, 0,\n\t\t-262, 1,\n\t\t1842, 0,\n\t\t202, 0,\n\t\t41, -6,\n\t\t77165, 0,\n\t\t176, -1,\n\t\t39, 1,\n\t\t-24, 0,\n\t\t118, 0,\n\t\t-2991, -4, 6245, -1,\n\t\t46886, 0,\n\t\t-75, 0,\n\t\t-100, 0,\n\t\t40, 0,\n\t\t75, 0,\n\t\t-618, 0, 2652, 0,\n\t\t112, 0,\n\t\t1780, 0,\n\t\t30, 0,\n\t\t49, 0,\n\t\t86, 0,\n\t\t33, 0,\n\t\t-30, 0,\n\t\t-95, 0,\n\t\t277, 0, -580, 0,\n\t\t-35, 0,\n\t\t-319, 0,\n\t\t1622, 1, -2201, 0,\n\t\t79, 0,\n\t\t10, -57,\n\t\t2363, 0, -10162, 0,\n\t\t-41, -12,\n\t\t62, 0,\n\t\t30, 1,\n\t\t-14, 89,\n\t\t-2721, 0,\n\t\t5780, -19, 26674, -10,\n\t\t-52964, -2,\n\t\t-5, 30,\n\t\t-4, 111,\n\t\t-317, -1, 1369, 0,\n\t\t93, -6,\n\t\t-564, 9,\n\t\t-115913, 0,\n\t\t-113, 15,\n\t\t10, -62,\n\t\t99, 0,\n\t\t891, -7,\n\t\t36, 0,\n\t\t108, 0,\n\t\t-42, -2,\n\t\t7, 75,\n\t\t-50, 21,\n\t\t86822, 104, 275441, 65,\n\t\t-1096109, 1,\n\t\t-56, 3,\n\t\t31, 66,\n\t\t63, -1,\n\t\t307, 7,\n\t\t1097, -34,\n\t\t17453, 0,\n\t\t-22, 250,\n\t\t57, 43,\n\t\t120, 200,\n\t\t-297, 0, 1269, 0,\n\t\t166, 0,\n\t\t-662, 0,\n\t\t40, 28,\n\t\t1521, 0,\n\t\t-23, 288,\n\t\t351, -2, -729, 0,\n\t\t-22, -52,\n\t\t-96, -21,\n\t\t-139, -1, 589, 0,\n\t\t35, 0,\n\t\t210, 7,\n\t\t-118, -119,\n\t\t62, 0,\n\t\t-583, -26,\n\t\t-42, 5,\n\t\t-73, 152,\n\t\t-330, -1759, 983, -479,\n\t\t-23, -19,\n\t\t-522, -15, -185, -533,\n\t\t739, 1559, -1300, 614,\n\t\t-7332, 52, -15836758, 0,\n\t\t524, 16, 185, 532,\n\t\t23, 18,\n\t\t330, 1751, -978, 476,\n\t\t73, -151,\n\t\t519, 18,\n\t\t38, 0,\n\t\t105, 113,\n\t\t-178, -37,\n\t\t26, 0,\n\t\t262, 1, -1139, 0,\n\t\t71, 17,\n\t\t16, 42,\n\t\t151, 0,\n\t\t16, -148,\n\t\t4147, 0,\n\t\t149, 0,\n\t\t-30, 0,\n\t\t2980, 9, 9454, 2,\n\t\t-37519, 0,\n\t\t-28, -49,\n\t\t37, -1,\n\t\t2, -31,\n\t\t33870, 0,\n\t\t-208, 1,\n\t\t-59, 1,\n\t\t-13105, 68, -41564, 21,\n\t\t165148, 3,\n\t\t-1022, 0,\n\t\t-40, 0,\n\t\t-132, 0,\n\t\t-228, 0,\n\t\t95, 0,\n\t\t-138, -16,\n\t\t-126, 16,\n\t\t24, 5,\n\t\t-57, -346, 191, -94,\n\t\t-14, -11,\n\t\t-12, -37,\n\t\t-3053364, -1,\n\t\t13, 36,\n\t\t17, 13,\n\t\t51, 327, -179, 90,\n\t\t138, 16,\n\t\t233, 0,\n\t\t62, 0,\n\t\t1164, 0, -5000, 0,\n\t\t-407, 117, 770, 9,\n\t\t-4, 1, 21, 2,\n\t\t1, 0,\n\t\t-16869, 0,\n\t\t-1, 0,\n\t\t1, 0,\n\t\t35, 0,\n\t\t-78, 0,\n\t\t78, 0,\n\t\t-533, 0,\n\t\t-31, 1,\n\t\t-2448, -6, -7768, -1,\n\t\t30812, 0,\n\t\t37, 0,\n\t\t-227, 0,\n\t\t197, 0, -846, 0,\n\t\t-77, 0,\n\t\t4171, 0,\n\t\t-67, 0,\n\t\t287, 0,\n\t\t2532, 0,\n\t\t-19, 0,\n\t\t-40, 0,\n\t\t-56, 0,\n\t\t128, 0,\n\t\t83, 0,\n\t\t-45, 0,\n\t\t-36, 0,\n\t\t-92, 0,\n\t\t-134, 0,\n\t\t714, 0, -1495, 0,\n\t\t32, 0,\n\t\t-981, 0,\n\t\t15, 0,\n\t\t-166, 0,\n\t\t-59, 0,\n\t\t4923, 0, -21203, 0,\n\t\t246, 0,\n\t\t15, 0,\n\t\t104, 0,\n\t\t1683, 0, -3523, 0,\n\t\t-865, 0,\n\t\t-25, 1,\n\t\t-186329, -1,\n\t\t10, 0,\n\t\t50, 0,\n\t\t53, 0,\n\t\t5455, -45, 17271, -10,\n\t\t-68747, 0,\n\t\t69, -2,\n\t\t-7604, 0,\n\t\t-724, 1, 3101, 0,\n\t\t-46, 0, 200, 0,\n\t\t-44, 0,\n\t\t97, 0,\n\t\t-53, 0,\n\t\t62, 0,\n\t\t-54, -4,\n\t\t88, -24,\n\t\t-9, -36,\n\t\t-581, 27, -914711, 3,\n\t\t8, 35,\n\t\t-86, 24,\n\t\t51, 3,\n\t\t48, 0,\n\t\t26, 0,\n\t\t133, 1, -577, 0,\n\t\t105, 0,\n\t\t-3, -1,\n\t\t3194, 0,\n\t\t528, 0, -2263, 0,\n\t\t2028, 0,\n\t\t-3266, 1, 14016, 0,\n\t\t10, 0, -41, 0,\n\t\t-100, 0,\n\t\t-32, 0,\n\t\t-124348, 0,\n\t\t16, 0,\n\t\t-325, 0,\n\t\t50, -1,\n\t\t1, 0,\n\t\t-553, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t2, 0,\n\t\t-34, 0,\n\t\t-444, 0, 1902, 0,\n\t\t9, 0, -37, 0,\n\t\t254, 0,\n\t\t156, 0,\n\t\t-2, 0,\n\t\t-35, 0,\n\t\t-48, 0,\n\t\t-368, 0,\n\t\t327, 0, -686, 0,\n\t\t-2263, 0,\n\t\t1952, 0, -8418, 0,\n\t\t-13, 0,\n\t\t52, 0,\n\t\t9, 0,\n\t\t21, 0,\n\t\t-261, 0,\n\t\t-62404, 0,\n\t\t0, 0,\n\t\t79, 0,\n\t\t1056, 0, -4547, 0,\n\t\t-351, 0,\n\t\t-305, 0, 1310, 0,\n\t\t-1, 0, 6, 0,\n\t\t0, 0,\n\t\t-55953, 0,\n\t\t-80, 0,\n\t\t0, 0,\n\t\t168, 0,\n\t\t-147, 0,\n\t\t127, 0,\n\t\t-265, 0, 1138, 0,\n\t\t-1, 0,\n\t\t-9, 0,\n\t\t-8, 0,\n\t\t-5984, 0,\n\t\t-22, 0,\n\t\t-5, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t127, 0,\n\t\t-2, 0,\n\t\t10, 0,\n\t\t-31, 0,\n\t\t-29, 0,\n\t\t-286, 0,\n\t\t-98, 0,\n\t\t-1535, 0,\n\t\t252, 0, -1087, 0,\n\t\t43, 0,\n\t\t4, 0,\n\t\t-19, 0,\n\t\t-7620, 0,\n\t\t29, 0,\n\t\t-322, 0,\n\t\t203, 0,\n\t\t0, 0,\n\t\t-3587, 0,\n\t\t10, 0,\n\t\t0, 0,\n\t\t94, 0,\n\t\t0, 0,\n\t\t-1, 0,\n\t\t-1, 0,\n\t\t-315, 0,\n\t\t1, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-30, 0,\n\t\t-94, 0,\n\t\t-460, 0,\n\t\t1, 0,\n\t\t-114, 0,\n\t\t0, 0,\n\t\t-746, 0,\n\t\t4, 0,\n\t\t-23, 0,\n\t\t24, 0,\n\t\t0, 0,\n\t\t-237, 0,\n\t\t1, 0,\n\t\t0, 0,\n\t\t-18, 0,\n\t\t0, 0,\n\t\t0, 0,\n\t\t-16, 0,\n\t\t-76, 0,\n\t\t-67, 0,\n\t\t0, 0,\n\t\t-16, 0,\n\t\t0, 0\n\t],\n\targ_tbl: [\n\t\t0, 3,\n\t\t3, 4, 3, -8, 4, 3, 5, 1,\n\t\t2, 2, 5, -5, 6, 2,\n\t\t5, -1, 10, 2, 13, -1, 11, 3, 3, -7, 4, 0,\n\t\t3, 1, 13, -1, 11, 2, 5, 1,\n\t\t2, 4, 5, -10, 6, 0,\n\t\t4, 2, 10, -2, 13, 14, 3, -23, 4, 1,\n\t\t3, 3, 2, -7, 3, 4, 4, 1,\n\t\t3, -1, 13, 18, 2, -16, 3, 2,\n\t\t2, 8, 2, -13, 3, 1,\n\t\t5, 2, 10, -2, 13, 2, 3, -3, 5, 1, 6, 0,\n\t\t3, -1, 13, 26, 2, -29, 3, 0,\n\t\t3, 1, 10, -1, 11, 2, 4, 1,\n\t\t4, 1, 10, -1, 13, 3, 2, -4, 3, 1,\n\t\t4, 1, 10, -1, 13, 3, 3, -4, 4, 0,\n\t\t3, -1, 10, 15, 2, -12, 3, 0,\n\t\t4, 2, 10, -3, 13, 24, 2, -24, 3, 0,\n\t\t3, -1, 10, 23, 2, -25, 3, 0,\n\t\t4, 1, 10, -1, 11, 1, 3, 1, 6, 0,\n\t\t4, 2, 10, -2, 11, 5, 2, -6, 3, 0,\n\t\t4, 2, 10, -2, 13, 6, 2, -8, 3, 0,\n\t\t4, -2, 10, 1, 13, 12, 2, -8, 3, 1,\n\t\t5, -1, 10, 1, 13, -1, 11, 20, 2, -20, 3, 1,\n\t\t4, -2, 10, 1, 13, 3, 1, -1, 3, 1,\n\t\t5, 2, 10, -2, 13, 2, 3, -5, 5, 5, 6, 0,\n\t\t4, 2, 10, -2, 13, 2, 3, -3, 5, 1,\n\t\t4, 2, 10, -2, 13, 6, 3, -8, 4, 0,\n\t\t4, -2, 10, 1, 13, 20, 2, -21, 3, 1,\n\t\t4, 1, 10, -1, 11, 1, 3, 1, 5, 0,\n\t\t1, 1, 6, 0,\n\t\t4, 2, 10, -2, 13, 5, 3, -6, 4, 0,\n\t\t3, 3, 2, -5, 3, 2, 5, 0,\n\t\t2, -1, 11, 1, 14, 1,\n\t\t4, 2, 10, -2, 13, 2, 3, -2, 5, 0,\n\t\t2, 1, 3, -2, 4, 1,\n\t\t4, 1, 10, -1, 11, 5, 2, -7, 3, 0,\n\t\t1, 1, 5, 0,\n\t\t2, 7, 3, -13, 4, 0,\n\t\t4, -2, 10, 1, 13, 15, 2, -13, 3, 0,\n\t\t4, 2, 10, -2, 13, 3, 2, -3, 3, 0,\n\t\t2, -2, 11, 2, 14, 1,\n\t\t3, 1, 10, 1, 12, -1, 13, 1,\n\t\t3, -1, 13, 21, 2, -21, 3, 0,\n\t\t2, 3, 2, -5, 3, 0,\n\t\t2, 2, 3, -4, 4, 1,\n\t\t2, 5, 2, -8, 3, 0,\n\t\t3, -1, 13, 23, 2, -24, 3, 0,\n\t\t2, 6, 3, -11, 4, 0,\n\t\t1, 2, 5, 0,\n\t\t2, 3, 3, -6, 4, 0,\n\t\t2, 5, 3, -9, 4, 0,\n\t\t4, 1, 10, -1, 11, 1, 3, -2, 5, 0,\n\t\t3, 2, 10, 2, 12, -2, 13, 1,\n\t\t2, 2, 2, -3, 3, 2,\n\t\t2, 4, 3, -7, 4, 0,\n\t\t2, 2, 13, -2, 11, 0,\n\t\t2, 3, 3, -5, 4, 0,\n\t\t2, 1, 2, -2, 3, 0,\n\t\t2, 2, 3, -3, 4, 0,\n\t\t4, 1, 10, -1, 11, 4, 2, -5, 3, 0,\n\t\t2, 1, 3, -1, 4, 0,\n\t\t2, 4, 2, -6, 3, 0,\n\t\t4, 2, 10, -2, 13, 2, 2, -2, 3, 0,\n\t\t3, 1, 10, -1, 11, 1, 2, 0,\n\t\t2, 1, 2, -1, 3, 0,\n\t\t3, 1, 12, 2, 13, -2, 11, 0,\n\t\t2, 5, 3, -8, 4, 0,\n\t\t2, 1, 3, -3, 5, 0,\n\t\t3, 2, 10, 1, 12, -2, 13, 1,\n\t\t2, 4, 3, -6, 4, 0,\n\t\t2, 1, 3, -2, 5, 1,\n\t\t2, 3, 3, -4, 4, 0,\n\t\t2, 3, 2, -4, 3, 1,\n\t\t2, 1, 10, -1, 13, 0,\n\t\t2, 1, 3, -1, 5, 0,\n\t\t2, 1, 3, -2, 6, 0,\n\t\t2, 2, 3, -2, 4, 0,\n\t\t2, 1, 3, -1, 6, 0,\n\t\t2, 8, 2, -14, 3, 0,\n\t\t3, 1, 3, 2, 5, -5, 6, 1,\n\t\t3, 5, 3, -8, 4, 3, 5, 1,\n\t\t1, 1, 12, 3,\n\t\t3, 3, 3, -8, 4, 3, 5, 1,\n\t\t3, 1, 3, -2, 5, 5, 6, 0,\n\t\t2, 8, 2, -12, 3, 0,\n\t\t2, 1, 3, 1, 5, 0,\n\t\t3, 2, 10, 1, 12, -2, 11, 1,\n\t\t2, 5, 2, -7, 3, 0,\n\t\t3, 1, 10, 1, 13, -2, 11, 0,\n\t\t2, 2, 2, -2, 3, 0,\n\t\t2, 5, 3, -7, 4, 0,\n\t\t3, 1, 12, -2, 13, 2, 11, 0,\n\t\t2, 4, 3, -5, 4, 0,\n\t\t2, 3, 3, -3, 4, 0,\n\t\t1, 1, 2, 0,\n\t\t3, 3, 10, 1, 12, -3, 13, 0,\n\t\t2, 2, 3, -4, 5, 0,\n\t\t2, 2, 3, -3, 5, 0,\n\t\t2, 2, 10, -2, 13, 0,\n\t\t2, 2, 3, -2, 5, 0,\n\t\t2, 3, 2, -3, 3, 0,\n\t\t3, 1, 10, -1, 12, -1, 13, 1,\n\t\t2, 2, 3, -1, 5, 0,\n\t\t2, 2, 3, -2, 6, 0,\n\t\t1, 2, 12, 2,\n\t\t3, -2, 10, 1, 11, 1, 14, 0,\n\t\t2, 2, 10, -2, 11, 0,\n\t\t2, 2, 2, -1, 3, 0,\n\t\t4, -2, 10, 2, 13, 1, 2, -1, 3, 0,\n\t\t2, 4, 2, -4, 3, 0,\n\t\t2, 3, 10, -3, 13, 0,\n\t\t4, -2, 10, 2, 13, 1, 3, -1, 5, 0,\n\t\t2, 3, 3, -3, 5, 0,\n\t\t3, 2, 10, -1, 12, -2, 13, 2,\n\t\t3, 3, 10, -1, 13, -2, 11, 0,\n\t\t1, 3, 12, 1,\n\t\t4, -2, 10, 2, 13, 2, 2, -2, 3, 0,\n\t\t3, 2, 10, -1, 12, -2, 11, 1,\n\t\t2, 5, 2, -5, 3, 0,\n\t\t2, 4, 10, -4, 13, 0,\n\t\t2, 6, 2, -6, 3, 0,\n\t\t3, 2, 10, -2, 12, -2, 13, 1,\n\t\t3, 4, 10, -2, 13, -2, 11, 0,\n\t\t3, 2, 10, -2, 12, -2, 11, 0,\n\t\t2, 7, 2, -7, 3, 0,\n\t\t3, 2, 10, -3, 12, -2, 13, 0,\n\t\t2, 8, 2, -8, 3, 0,\n\t\t2, 9, 2, -9, 3, 0,\n\t\t2, 10, 2, -10, 3, 0,\n\t\t3, 2, 10, -4, 12, -1, 13, 0,\n\t\t3, 4, 10, -2, 12, -3, 13, 0,\n\t\t4, 4, 10, -1, 12, -1, 13, -2, 11, 0,\n\t\t3, 2, 10, -3, 12, -1, 13, 1,\n\t\t4, -2, 10, 1, 13, 3, 3, -2, 5, 0,\n\t\t3, 4, 10, -1, 12, -3, 13, 0,\n\t\t4, -2, 10, 1, 13, 3, 3, -3, 5, 0,\n\t\t4, 2, 10, -2, 12, 1, 13, -2, 11, 0,\n\t\t4, -2, 10, 1, 13, 2, 2, -1, 3, 0,\n\t\t3, 3, 10, -1, 12, -2, 11, 0,\n\t\t3, 4, 10, -1, 13, -2, 11, 0,\n\t\t3, 2, 10, -2, 12, -1, 13, 2,\n\t\t4, -2, 10, 1, 13, 2, 3, -1, 5, 0,\n\t\t3, 3, 10, -1, 12, -2, 13, 0,\n\t\t4, -2, 10, 1, 13, 3, 2, -3, 3, 0,\n\t\t4, -2, 10, 1, 13, 2, 3, -2, 5, 0,\n\t\t2, 4, 10, -3, 13, 0,\n\t\t4, -2, 10, 1, 13, 2, 3, -3, 5, 0,\n\t\t3, -2, 10, 1, 13, 1, 2, 0,\n\t\t4, 2, 10, -1, 12, 1, 13, -2, 11, 1,\n\t\t4, -2, 10, 1, 13, 2, 2, -2, 3, 0,\n\t\t2, 3, 12, -1, 13, 0,\n\t\t2, 3, 10, -2, 11, 0,\n\t\t2, 1, 10, -2, 12, 0,\n\t\t4, 4, 10, 1, 12, -1, 13, -2, 11, 0,\n\t\t3, -1, 13, 3, 2, -2, 3, 0,\n\t\t3, -1, 13, 3, 3, -2, 5, 0,\n\t\t3, -2, 10, 18, 2, -15, 3, 0,\n\t\t5, 2, 10, -1, 13, 3, 3, -8, 4, 3, 5, 0,\n\t\t3, 2, 10, -1, 12, -1, 13, 2,\n\t\t5, -2, 10, 1, 13, 5, 3, -8, 4, 3, 5, 0,\n\t\t5, -2, 10, 1, 13, 1, 3, 2, 5, -5, 6, 0,\n\t\t4, 2, 10, -2, 13, 18, 2, -17, 3, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -1, 6, 0,\n\t\t4, -2, 10, 1, 13, 2, 3, -2, 4, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -1, 5, 0,\n\t\t2, 3, 10, -2, 13, 0,\n\t\t4, -2, 10, 1, 13, 3, 2, -4, 3, 0,\n\t\t4, -2, 10, 1, 13, 3, 3, -4, 4, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -2, 5, 0,\n\t\t3, 4, 10, 1, 12, -3, 13, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -3, 5, 0,\n\t\t3, -1, 13, 4, 2, -4, 3, 0,\n\t\t4, -2, 10, 1, 13, 1, 2, -1, 3, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -1, 4, 0,\n\t\t4, -2, 10, 1, 13, 2, 3, -3, 4, 0,\n\t\t4, -2, 10, 1, 13, 3, 3, -5, 4, 0,\n\t\t3, 2, 10, 1, 13, -2, 11, 0,\n\t\t4, -2, 10, -1, 13, 1, 11, 1, 14, 0,\n\t\t4, -2, 10, 1, 13, 2, 2, -3, 3, 1,\n\t\t2, 2, 12, -1, 13, 1,\n\t\t3, 3, 10, 1, 12, -2, 11, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -4, 4, 0,\n\t\t4, 2, 10, -1, 13, 3, 2, -5, 3, 0,\n\t\t2, 1, 10, -1, 12, 1,\n\t\t3, -1, 13, 3, 2, -3, 3, 0,\n\t\t3, -2, 10, 1, 13, 1, 5, 0,\n\t\t4, 2, 10, -1, 13, 1, 3, -2, 4, 0,\n\t\t3, -1, 13, 2, 3, -2, 5, 0,\n\t\t4, 2, 10, -1, 13, -1, 11, 1, 14, 0,\n\t\t3, -1, 13, 5, 3, -6, 4, 0,\n\t\t3, -2, 10, 1, 13, 1, 6, 0,\n\t\t3, -1, 10, 1, 3, -1, 5, 0,\n\t\t4, -2, 10, 1, 13, 8, 2, -13, 3, 1,\n\t\t3, -2, 10, 18, 2, -16, 3, 1,\n\t\t5, -2, 10, 1, 13, 3, 2, -7, 3, 4, 4, 1,\n\t\t4, 2, 10, -1, 13, 2, 5, -5, 6, 1,\n\t\t5, 2, 10, -1, 13, 4, 3, -8, 4, 3, 5, 1,\n\t\t2, 2, 10, -1, 13, 2,\n\t\t5, -2, 10, 1, 13, 4, 3, -8, 4, 3, 5, 1,\n\t\t4, -2, 10, 1, 13, 2, 5, -5, 6, 1,\n\t\t5, 2, 10, -1, 13, 3, 2, -7, 3, 4, 4, 0,\n\t\t4, 2, 10, -2, 13, 18, 2, -16, 3, 1,\n\t\t4, 2, 10, -1, 13, 8, 2, -13, 3, 1,\n\t\t3, -1, 10, 3, 2, -4, 3, 0,\n\t\t3, -1, 13, 6, 2, -8, 3, 0,\n\t\t3, -1, 13, 2, 3, -3, 5, 0,\n\t\t3, -1, 13, 6, 3, -8, 4, 0,\n\t\t3, 2, 10, -1, 13, 1, 6, 0,\n\t\t4, -2, 10, 1, 13, -1, 11, 1, 14, 0,\n\t\t4, -2, 10, 1, 13, 1, 3, -2, 4, 0,\n\t\t3, 2, 10, -1, 13, 1, 5, 0,\n\t\t3, 3, 10, 1, 12, -2, 13, 0,\n\t\t4, -2, 10, 1, 13, 3, 2, -5, 3, 0,\n\t\t4, -2, 10, 1, 13, 2, 3, -4, 4, 0,\n\t\t2, -1, 13, 1, 2, 0,\n\t\t4, 2, 10, -1, 13, 2, 2, -3, 3, 0,\n\t\t3, -1, 10, 1, 2, -1, 3, 0,\n\t\t3, -1, 13, 4, 2, -5, 3, 0,\n\t\t3, 2, 10, -3, 13, 2, 11, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -3, 4, 0,\n\t\t3, -1, 13, 2, 2, -2, 3, 0,\n\t\t4, 2, 10, -1, 13, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, 1, 12, 1, 13, -2, 11, 0,\n\t\t3, -2, 13, 18, 2, -15, 3, 0,\n\t\t2, 1, 12, -1, 13, 2,\n\t\t3, -1, 13, 1, 3, -1, 6, 0,\n\t\t4, 2, 10, -1, 13, 1, 3, -2, 5, 0,\n\t\t3, -1, 13, 2, 3, -2, 4, 0,\n\t\t3, -1, 13, 1, 3, -1, 5, 0,\n\t\t4, 2, 10, -1, 13, 3, 3, -4, 4, 0,\n\t\t1, 1, 10, 0,\n\t\t3, -1, 13, 3, 2, -4, 3, 0,\n\t\t3, -1, 13, 3, 3, -4, 4, 0,\n\t\t4, 2, 10, -1, 13, 1, 3, -1, 5, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -2, 4, 0,\n\t\t3, -1, 13, 1, 3, -2, 5, 0,\n\t\t3, 2, 10, 1, 12, -1, 13, 2,\n\t\t3, 1, 12, 1, 13, -2, 11, 0,\n\t\t3, -1, 13, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, -1, 13, 2, 2, -2, 3, 0,\n\t\t3, -1, 13, 4, 2, -6, 3, 0,\n\t\t3, -1, 13, 2, 3, -3, 4, 0,\n\t\t3, 1, 13, 1, 2, -2, 3, 0,\n\t\t4, 2, 10, -1, 13, 3, 3, -3, 4, 0,\n\t\t2, 3, 13, -2, 11, 0,\n\t\t4, 2, 10, -1, 13, 4, 2, -5, 3, 0,\n\t\t3, 1, 10, 1, 2, -1, 3, 0,\n\t\t3, -1, 13, 2, 2, -3, 3, 1,\n\t\t3, 2, 10, 2, 12, -3, 13, 0,\n\t\t3, 2, 10, -1, 13, 1, 2, 0,\n\t\t3, 1, 13, 2, 3, -4, 4, 0,\n\t\t3, 1, 13, 3, 2, -5, 3, 0,\n\t\t2, 21, 2, -21, 3, 0,\n\t\t3, 1, 10, 1, 12, -2, 13, 1,\n\t\t4, 2, 10, -1, 13, 2, 3, -4, 5, 0,\n\t\t4, 2, 10, -1, 13, 7, 3, -10, 4, 0,\n\t\t2, -1, 13, 1, 5, 0,\n\t\t3, 1, 13, 1, 3, -2, 4, 0,\n\t\t4, 2, 10, -3, 13, 2, 3, -2, 5, 0,\n\t\t3, 1, 10, 1, 3, -2, 5, 0,\n\t\t3, 1, 13, -1, 11, 1, 14, 1,\n\t\t2, -1, 13, 1, 6, 0,\n\t\t4, 2, 10, -1, 13, 6, 3, -8, 4, 1,\n\t\t4, 2, 10, -1, 13, 2, 3, -3, 5, 1,\n\t\t3, -1, 13, 8, 3, -15, 4, 0,\n\t\t4, 2, 10, -1, 13, 6, 2, -8, 3, 0,\n\t\t5, 2, 10, -1, 13, -2, 11, 5, 2, -6, 3, 0,\n\t\t3, 1, 10, 3, 3, -4, 4, 0,\n\t\t3, 1, 10, 3, 2, -4, 3, 1,\n\t\t4, 1, 10, -1, 13, -1, 11, 2, 4, 0,\n\t\t3, -2, 13, 26, 2, -29, 3, 0,\n\t\t3, -1, 13, 8, 2, -13, 3, 0,\n\t\t3, -2, 13, 18, 2, -16, 3, 2,\n\t\t4, -1, 13, 3, 2, -7, 3, 4, 4, 0,\n\t\t3, 1, 13, 2, 5, -5, 6, 1,\n\t\t4, 1, 13, 4, 3, -8, 4, 3, 5, 1,\n\t\t1, 1, 13, 3,\n\t\t4, -1, 13, 4, 3, -8, 4, 3, 5, 1,\n\t\t3, -1, 13, 2, 5, -5, 6, 1,\n\t\t4, 1, 13, 3, 2, -7, 3, 4, 4, 0,\n\t\t2, 18, 2, -16, 3, 1,\n\t\t3, 1, 13, 8, 2, -13, 3, 2,\n\t\t2, 26, 2, -29, 3, 0,\n\t\t4, 1, 10, 1, 13, -1, 11, 2, 4, 0,\n\t\t5, 2, 10, 1, 13, -2, 11, 5, 2, -6, 3, 0,\n\t\t3, 1, 13, 8, 3, -15, 4, 1,\n\t\t4, 2, 10, -3, 13, 2, 3, -3, 5, 0,\n\t\t3, 1, 10, 1, 3, -1, 5, 0,\n\t\t2, 1, 13, 1, 6, 0,\n\t\t4, 2, 10, -1, 13, 5, 3, -6, 4, 0,\n\t\t3, 1, 10, 2, 3, -2, 4, 0,\n\t\t3, -1, 13, -1, 11, 1, 14, 1,\n\t\t4, 2, 10, -1, 13, 2, 3, -5, 6, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -2, 5, 0,\n\t\t5, 2, 10, -1, 13, 2, 3, -4, 5, 5, 6, 0,\n\t\t3, -1, 13, 1, 3, -2, 4, 1,\n\t\t2, 1, 13, 1, 5, 0,\n\t\t4, 2, 10, -1, 13, 4, 3, -4, 4, 0,\n\t\t4, 2, 10, -1, 13, 3, 2, -3, 3, 0,\n\t\t4, 2, 10, 2, 12, -1, 13, -2, 11, 0,\n\t\t2, 1, 10, 1, 12, 2,\n\t\t3, -1, 13, 3, 2, -5, 3, 0,\n\t\t3, -1, 13, 2, 3, -4, 4, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -1, 5, 0,\n\t\t4, 2, 10, -1, 13, 2, 3, -2, 6, 0,\n\t\t3, 1, 10, 1, 12, -2, 11, 0,\n\t\t3, 2, 10, 2, 12, -1, 13, 1,\n\t\t3, 1, 13, 2, 2, -3, 3, 1,\n\t\t3, -1, 13, 1, 11, 1, 14, 0,\n\t\t2, 1, 13, -2, 11, 0,\n\t\t4, 2, 10, -1, 13, 5, 2, -6, 3, 0,\n\t\t3, -1, 13, 1, 2, -2, 3, 0,\n\t\t3, 1, 13, 2, 3, -3, 4, 0,\n\t\t3, 1, 13, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, -1, 13, 4, 2, -4, 3, 0,\n\t\t3, 2, 10, 1, 12, -3, 13, 1,\n\t\t3, 1, 13, 1, 3, -2, 5, 0,\n\t\t3, 1, 13, 3, 3, -4, 4, 0,\n\t\t3, 1, 13, 3, 2, -4, 3, 0,\n\t\t2, 1, 10, -2, 13, 0,\n\t\t4, 2, 10, -1, 13, 3, 3, -4, 5, 0,\n\t\t3, 1, 13, 1, 3, -1, 5, 0,\n\t\t3, 1, 13, 2, 3, -2, 4, 0,\n\t\t3, 1, 13, 1, 3, -1, 6, 0,\n\t\t4, 2, 10, -1, 13, 3, 3, -3, 5, 0,\n\t\t4, 2, 10, -1, 13, 6, 2, -7, 3, 0,\n\t\t2, 1, 12, 1, 13, 2,\n\t\t4, 2, 10, -1, 13, 3, 3, -2, 5, 0,\n\t\t4, 2, 10, 1, 12, -1, 13, -2, 11, 0,\n\t\t2, 1, 10, 2, 12, 0,\n\t\t2, 1, 10, -2, 11, 0,\n\t\t3, 1, 13, 2, 2, -2, 3, 0,\n\t\t3, 1, 12, -1, 13, 2, 11, 0,\n\t\t4, 2, 10, -1, 13, 5, 2, -5, 3, 0,\n\t\t3, 1, 13, 2, 3, -3, 5, 0,\n\t\t2, 2, 10, -3, 13, 0,\n\t\t3, 1, 13, 2, 3, -2, 5, 0,\n\t\t3, 1, 13, 3, 2, -3, 3, 0,\n\t\t3, 1, 10, -1, 12, -2, 13, 0,\n\t\t4, 2, 10, -1, 13, 6, 2, -6, 3, 0,\n\t\t2, 2, 12, 1, 13, 1,\n\t\t3, 2, 10, -1, 13, -2, 11, 0,\n\t\t3, 1, 10, -1, 12, -2, 11, 0,\n\t\t3, 2, 10, 1, 13, -4, 11, 0,\n\t\t3, 1, 13, 4, 2, -4, 3, 0,\n\t\t4, 2, 10, -1, 13, 7, 2, -7, 3, 0,\n\t\t3, 2, 10, -1, 12, -3, 13, 1,\n\t\t2, 3, 12, 1, 13, 0,\n\t\t4, 2, 10, -1, 12, -1, 13, -2, 11, 0,\n\t\t3, 1, 13, 5, 2, -5, 3, 0,\n\t\t4, 2, 10, -1, 13, 8, 2, -8, 3, 0,\n\t\t3, 2, 10, -2, 12, -3, 13, 0,\n\t\t4, 2, 10, -1, 13, 9, 2, -9, 3, 0,\n\t\t3, 4, 10, -3, 12, -2, 13, 0,\n\t\t2, 2, 10, -4, 12, 0,\n\t\t3, 4, 10, -2, 12, -2, 13, 1,\n\t\t2, 6, 10, -4, 13, 0,\n\t\t3, 4, 10, -1, 12, -2, 11, 0,\n\t\t2, 2, 10, -3, 12, 1,\n\t\t3, 3, 10, -2, 12, -1, 13, 0,\n\t\t3, -2, 10, 3, 3, -2, 5, 0,\n\t\t3, 4, 10, -1, 12, -2, 13, 1,\n\t\t3, -2, 10, 3, 3, -3, 5, 0,\n\t\t2, 5, 10, -3, 13, 0,\n\t\t3, -2, 10, 4, 2, -4, 3, 0,\n\t\t3, -2, 10, 2, 2, -1, 3, 0,\n\t\t2, 4, 10, -2, 11, 0,\n\t\t2, 2, 10, -2, 12, 2,\n\t\t3, -2, 10, 3, 3, -2, 4, 0,\n\t\t3, -2, 10, 2, 3, -1, 5, 0,\n\t\t3, 3, 10, -1, 12, -1, 13, 1,\n\t\t3, -2, 10, 3, 2, -3, 3, 0,\n\t\t3, -2, 10, 2, 3, -2, 5, 0,\n\t\t2, 4, 10, -2, 13, 0,\n\t\t3, -2, 10, 2, 3, -3, 5, 0,\n\t\t2, -2, 10, 1, 2, 0,\n\t\t4, 2, 10, -1, 12, 2, 13, -2, 11, 0,\n\t\t3, -2, 10, 2, 2, -2, 3, 0,\n\t\t3, 3, 10, 1, 13, -2, 11, 0,\n\t\t3, 4, 10, 1, 12, -2, 11, 0,\n\t\t4, 2, 10, -1, 12, -1, 11, 1, 14, 0,\n\t\t4, -2, 10, -1, 13, 18, 2, -15, 3, 0,\n\t\t4, 2, 10, 3, 3, -8, 4, 3, 5, 0,\n\t\t2, 2, 10, -1, 12, 2,\n\t\t4, -2, 10, 5, 3, -8, 4, 3, 5, 0,\n\t\t4, 2, 10, -1, 13, 18, 2, -17, 3, 0,\n\t\t3, -2, 10, 1, 3, -1, 6, 0,\n\t\t3, -2, 10, 2, 3, -2, 4, 0,\n\t\t3, -2, 10, 1, 3, -1, 5, 0,\n\t\t2, 3, 10, -1, 13, 0,\n\t\t3, -2, 10, 3, 2, -4, 3, 0,\n\t\t3, -2, 10, 3, 3, -4, 4, 0,\n\t\t3, -2, 10, 1, 3, -2, 5, 0,\n\t\t3, 4, 10, 1, 12, -2, 13, 1,\n\t\t4, 2, 10, -1, 12, -2, 13, 2, 11, 0,\n\t\t3, -2, 10, 1, 2, -1, 3, 0,\n\t\t3, -2, 10, 2, 3, -3, 4, 0,\n\t\t3, 2, 10, 2, 13, -2, 11, 0,\n\t\t3, -2, 10, 2, 2, -3, 3, 0,\n\t\t2, 2, 12, -2, 13, 1,\n\t\t3, 2, 10, 2, 3, -4, 4, 0,\n\t\t3, 2, 10, 3, 2, -5, 3, 0,\n\t\t3, 1, 10, -1, 12, 1, 13, 1,\n\t\t3, -2, 13, 3, 2, -3, 3, 0,\n\t\t2, -2, 10, 1, 5, 0,\n\t\t3, 2, 10, 1, 3, -2, 4, 0,\n\t\t3, -2, 13, 2, 3, -2, 5, 0,\n\t\t3, 2, 10, -1, 11, 1, 14, 0,\n\t\t4, 4, 10, -2, 13, 2, 3, -3, 5, 0,\n\t\t3, -2, 10, 8, 2, -13, 3, 0,\n\t\t4, -2, 10, -1, 13, 18, 2, -16, 3, 1,\n\t\t4, -2, 10, 3, 2, -7, 3, 4, 4, 0,\n\t\t4, 2, 10, 4, 3, -8, 4, 3, 5, 1,\n\t\t1, 2, 10, 3,\n\t\t4, -2, 10, 4, 3, -8, 4, 3, 5, 1,\n\t\t4, 2, 10, 3, 2, -7, 3, 4, 4, 0,\n\t\t4, 2, 10, -1, 13, 18, 2, -16, 3, 1,\n\t\t3, 2, 10, 8, 2, -13, 3, 0,\n\t\t3, -2, 10, -1, 11, 1, 14, 0,\n\t\t4, 4, 10, -2, 13, 2, 3, -2, 5, 0,\n\t\t3, -2, 10, 1, 3, -2, 4, 0,\n\t\t2, 2, 10, 1, 5, 0,\n\t\t4, 4, 10, -2, 13, 3, 2, -3, 3, 0,\n\t\t3, 3, 10, 1, 12, -1, 13, 1,\n\t\t3, -2, 10, 3, 2, -5, 3, 0,\n\t\t3, -2, 10, 2, 3, -4, 4, 0,\n\t\t3, 4, 10, 2, 12, -2, 13, 0,\n\t\t3, 2, 10, 2, 2, -3, 3, 0,\n\t\t3, 2, 10, -2, 13, 2, 11, 0,\n\t\t3, 2, 10, 1, 2, -1, 3, 0,\n\t\t4, 2, 10, 1, 12, 2, 13, -2, 11, 0,\n\t\t2, 1, 12, -2, 13, 2,\n\t\t3, 2, 10, 1, 3, -2, 5, 0,\n\t\t3, -2, 13, 1, 3, -1, 5, 0,\n\t\t3, 2, 10, 3, 2, -4, 3, 0,\n\t\t2, 1, 10, 1, 13, 0,\n\t\t3, 2, 10, 1, 3, -1, 5, 0,\n\t\t3, 2, 10, 2, 3, -2, 4, 0,\n\t\t2, 2, 10, 1, 12, 2,\n\t\t2, 1, 12, -2, 11, 0,\n\t\t3, -2, 13, 1, 2, -1, 3, 0,\n\t\t3, 1, 10, -1, 13, 2, 11, 0,\n\t\t3, 2, 10, 2, 2, -2, 3, 0,\n\t\t3, 1, 10, 1, 12, -3, 13, 0,\n\t\t3, 2, 13, -1, 11, 1, 14, 0,\n\t\t3, 2, 10, 2, 3, -3, 5, 0,\n\t\t3, 2, 10, 6, 2, -8, 3, 0,\n\t\t3, -3, 13, 18, 2, -16, 3, 1,\n\t\t3, 2, 13, 2, 5, -5, 6, 0,\n\t\t4, 2, 13, 4, 3, -8, 4, 3, 5, 0,\n\t\t1, 2, 13, 0,\n\t\t4, -2, 13, 4, 3, -8, 4, 3, 5, 0,\n\t\t3, -2, 13, 2, 5, -5, 6, 0,\n\t\t3, 1, 13, 18, 2, -16, 3, 1,\n\t\t3, -2, 13, -1, 11, 1, 14, 0,\n\t\t3, 2, 10, 2, 3, -2, 5, 0,\n\t\t3, 2, 10, 3, 2, -3, 3, 0,\n\t\t3, 1, 10, 1, 12, 1, 13, 1,\n\t\t2, 2, 10, 2, 12, 1,\n\t\t2, 1, 11, 1, 14, 1,\n\t\t4, -1, 13, -2, 11, 18, 2, -16, 3, 0,\n\t\t1, 2, 11, 0,\n\t\t4, -1, 13, 2, 11, 18, 2, -16, 3, 0,\n\t\t2, -3, 11, 1, 14, 0,\n\t\t3, 2, 13, 1, 2, -1, 3, 0,\n\t\t3, 2, 10, 4, 2, -4, 3, 0,\n\t\t3, 2, 10, 1, 12, -4, 13, 0,\n\t\t2, 1, 10, -3, 13, 0,\n\t\t3, 2, 13, 1, 3, -1, 5, 0,\n\t\t2, 1, 12, 2, 13, 2,\n\t\t3, 1, 10, 2, 12, 1, 13, 0,\n\t\t3, 1, 10, -1, 13, -2, 11, 0,\n\t\t2, 1, 12, 2, 11, 1,\n\t\t3, 2, 10, 5, 2, -5, 3, 0,\n\t\t2, 2, 10, -4, 13, 0,\n\t\t3, 2, 10, 6, 2, -6, 3, 0,\n\t\t2, 2, 12, 2, 13, 0,\n\t\t3, 2, 10, -2, 13, -2, 11, 0,\n\t\t2, 2, 12, 2, 11, 0,\n\t\t2, 2, 10, -4, 11, 0,\n\t\t3, 2, 10, 7, 2, -7, 3, 0,\n\t\t3, 2, 10, -1, 12, -4, 13, 0,\n\t\t4, 2, 10, -1, 12, -2, 13, -2, 11, 0,\n\t\t3, 2, 10, 8, 2, -8, 3, 0,\n\t\t3, 2, 10, 9, 2, -9, 3, 0,\n\t\t3, 4, 10, -3, 12, -1, 13, 0,\n\t\t3, 6, 10, -1, 12, -3, 13, 0,\n\t\t3, 4, 10, -2, 12, -1, 13, 1,\n\t\t3, 5, 10, -1, 12, -2, 13, 0,\n\t\t2, 6, 10, -3, 13, 0,\n\t\t4, 4, 10, -1, 12, 1, 13, -2, 11, 0,\n\t\t3, 2, 10, -3, 12, 1, 13, 0,\n\t\t2, 3, 10, -2, 12, 0,\n\t\t3, 4, 10, -1, 12, -1, 13, 1,\n\t\t2, 5, 10, -2, 13, 0,\n\t\t3, 6, 10, 1, 12, -3, 13, 0,\n\t\t3, 4, 10, 1, 13, -2, 11, 0,\n\t\t3, 2, 10, -2, 12, 1, 13, 1,\n\t\t2, 3, 10, -1, 12, 0,\n\t\t4, -2, 10, -1, 13, 2, 3, -2, 5, 0,\n\t\t2, 4, 10, -1, 13, 0,\n\t\t4, 2, 10, -2, 12, -1, 13, 2, 11, 0,\n\t\t3, 4, 10, -3, 13, 2, 11, 0,\n\t\t4, -2, 10, -1, 13, 2, 2, -2, 3, 0,\n\t\t3, 2, 10, -1, 12, 1, 13, 2,\n\t\t4, -2, 10, -1, 13, 1, 3, -1, 5, 0,\n\t\t1, 3, 10, 0,\n\t\t3, 4, 10, 1, 12, -1, 13, 1,\n\t\t4, 2, 10, -1, 12, -1, 13, 2, 11, 1,\n\t\t4, -2, 10, -1, 13, 1, 2, -1, 3, 0,\n\t\t3, 2, 10, 3, 13, -2, 11, 0,\n\t\t2, 2, 12, -3, 13, 0,\n\t\t3, 1, 10, -1, 12, 2, 13, 0,\n\t\t4, 2, 10, 1, 13, -1, 11, 1, 14, 0,\n\t\t4, -2, 10, -2, 13, 18, 2, -16, 3, 0,\n\t\t5, 2, 10, 1, 13, 4, 3, -8, 4, 3, 5, 0,\n\t\t2, 2, 10, 1, 13, 1,\n\t\t5, -2, 10, -1, 13, 4, 3, -8, 4, 3, 5, 0,\n\t\t3, 2, 10, 18, 2, -16, 3, 0,\n\t\t4, -2, 10, -1, 13, -1, 11, 1, 14, 0,\n\t\t4, 4, 10, -1, 13, 2, 3, -2, 5, 0,\n\t\t4, 4, 10, -1, 13, 3, 2, -3, 3, 0,\n\t\t2, 3, 10, 1, 12, 1,\n\t\t3, 4, 10, 2, 12, -1, 13, 0,\n\t\t4, 2, 10, -1, 13, 1, 11, 1, 14, 0,\n\t\t3, 2, 10, -1, 13, 2, 11, 0,\n\t\t2, 1, 12, -3, 13, 1,\n\t\t2, 1, 10, 2, 13, 0,\n\t\t3, 2, 10, 1, 12, 1, 13, 1,\n\t\t3, 1, 12, -1, 13, -2, 11, 1,\n\t\t2, 1, 10, 2, 11, 0,\n\t\t4, 2, 10, 1, 12, -1, 13, 2, 11, 0,\n\t\t1, 3, 13, 0,\n\t\t4, 2, 10, 1, 13, 2, 3, -2, 5, 0,\n\t\t3, 1, 10, 1, 12, 2, 13, 0,\n\t\t3, 2, 10, 2, 12, 1, 13, 0,\n\t\t3, 1, 13, 1, 11, 1, 14, 0,\n\t\t2, 1, 13, 2, 11, 0,\n\t\t3, 1, 10, 1, 12, 2, 11, 0,\n\t\t4, 2, 10, 2, 12, -1, 13, 2, 11, 0,\n\t\t2, 1, 13, -4, 11, 0,\n\t\t2, 1, 10, -4, 13, 0,\n\t\t2, 1, 12, 3, 13, 1,\n\t\t3, 1, 12, 1, 13, 2, 11, 1,\n\t\t2, 2, 10, -5, 13, 0,\n\t\t3, 2, 10, -3, 13, -2, 11, 0,\n\t\t3, 2, 10, -1, 13, -4, 11, 0,\n\t\t3, 6, 10, -2, 12, -2, 13, 0,\n\t\t2, 4, 10, -3, 12, 0,\n\t\t3, 6, 10, -1, 12, -2, 13, 0,\n\t\t2, 4, 10, -2, 12, 1,\n\t\t2, 6, 10, -2, 13, 0,\n\t\t2, 4, 10, -1, 12, 1,\n\t\t2, 5, 10, -1, 13, 0,\n\t\t3, 6, 10, 1, 12, -2, 13, 0,\n\t\t4, 4, 10, -1, 12, -2, 13, 2, 11, 0,\n\t\t3, 4, 10, 2, 13, -2, 11, 0,\n\t\t3, 2, 10, -2, 12, 2, 13, 0,\n\t\t1, 4, 10, 0,\n\t\t3, 2, 10, -2, 12, 2, 11, 0,\n\t\t3, 4, 10, -2, 13, 2, 11, 0,\n\t\t3, 2, 10, -1, 12, 2, 13, 1,\n\t\t2, 3, 10, 1, 13, 0,\n\t\t2, 4, 10, 1, 12, 1,\n\t\t3, 2, 10, -1, 12, 2, 11, 1,\n\t\t3, 3, 10, -1, 13, 2, 11, 0,\n\t\t2, 2, 10, 2, 13, 0,\n\t\t3, 3, 10, 1, 12, 1, 13, 0,\n\t\t3, 2, 10, 1, 11, 1, 14, 0,\n\t\t2, 2, 10, 2, 11, 0,\n\t\t2, 1, 12, -4, 13, 0,\n\t\t2, 1, 10, 3, 13, 0,\n\t\t3, 2, 10, 1, 12, 2, 13, 1,\n\t\t3, 1, 12, -2, 13, -2, 11, 0,\n\t\t3, 1, 10, 1, 13, 2, 11, 0,\n\t\t3, 2, 10, 1, 12, 2, 11, 0,\n\t\t1, 4, 13, 0,\n\t\t3, 1, 10, 1, 12, 3, 13, 0,\n\t\t2, 2, 13, 2, 11, 0,\n\t\t4, 1, 10, 1, 12, 1, 13, 2, 11, 0,\n\t\t1, 4, 11, 0,\n\t\t2, 1, 12, 4, 13, 0,\n\t\t3, 1, 12, 2, 13, 2, 11, 0,\n\t\t3, 2, 10, -4, 13, -2, 11, 0,\n\t\t3, 6, 10, -2, 12, -1, 13, 0,\n\t\t2, 8, 10, -3, 13, 0,\n\t\t3, 6, 10, -1, 12, -1, 13, 0,\n\t\t3, 4, 10, -2, 12, 1, 13, 0,\n\t\t2, 6, 10, -1, 13, 0,\n\t\t3, 4, 10, -1, 12, 1, 13, 1,\n\t\t3, 6, 10, 1, 12, -1, 13, 0,\n\t\t4, 4, 10, -1, 12, -1, 13, 2, 11, 0,\n\t\t3, 2, 10, -2, 12, 3, 13, 0,\n\t\t2, 4, 10, 1, 13, 0,\n\t\t3, 4, 10, -1, 13, 2, 11, 0,\n\t\t3, 2, 10, -1, 12, 3, 13, 0,\n\t\t3, 4, 10, 1, 12, 1, 13, 0,\n\t\t4, 2, 10, -1, 12, 1, 13, 2, 11, 0,\n\t\t2, 2, 10, 3, 13, 0,\n\t\t3, 2, 10, 1, 13, 2, 11, 0,\n\t\t3, 2, 10, -1, 13, 4, 11, 0,\n\t\t3, 2, 10, 1, 12, 3, 13, 0,\n\t\t3, 1, 12, -3, 13, -2, 11, 0,\n\t\t3, 1, 10, 2, 13, 2, 11, 0,\n\t\t4, 2, 10, 1, 12, 1, 13, 2, 11, 0,\n\t\t1, 5, 13, 0,\n\t\t2, 3, 13, 2, 11, 0,\n\t\t2, 1, 13, 4, 11, 0,\n\t\t3, 1, 12, 3, 13, 2, 11, 0,\n\t\t2, 8, 10, -2, 13, 0,\n\t\t2, 6, 10, -1, 12, 0,\n\t\t1, 6, 10, 0,\n\t\t3, 6, 10, -2, 13, 2, 11, 0,\n\t\t3, 4, 10, -1, 12, 2, 13, 0,\n\t\t3, 4, 10, -1, 12, 2, 11, 0,\n\t\t2, 4, 10, 2, 13, 0,\n\t\t2, 4, 10, 2, 11, 0,\n\t\t3, 2, 10, -1, 12, 4, 13, 0,\n\t\t3, 4, 10, 1, 12, 2, 13, 0,\n\t\t4, 2, 10, -1, 12, 2, 13, 2, 11, 0,\n\t\t2, 2, 10, 4, 13, 0,\n\t\t3, 2, 10, 2, 13, 2, 11, 0,\n\t\t2, 2, 10, 4, 11, 0,\n\t\t1, 6, 13, 0,\n\t\t2, 4, 13, 2, 11, 0,\n\t\t2, 2, 13, 4, 11, 0,\n\t\t3, 6, 10, -1, 12, 1, 13, 0,\n\t\t2, 6, 10, 1, 13, 0,\n\t\t2, 4, 10, 3, 13, 0,\n\t\t3, 4, 10, 1, 13, 2, 11, 0,\n\t\t2, 2, 10, 5, 13, 0,\n\t\t3, 2, 10, 3, 13, 2, 11, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/moonlr.js?");

/***/ }),

/***/ "./src/ptables/neptune.js":
/*!********************************!*\
  !*** ./src/ptables/neptune.js ***!
  \********************************/
/*! exports provided: neptunePTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"neptunePTable\", function() { return neptunePTable; });\nconst neptunePTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 0, 0, 0, 3, 8, 7, 9, 0],\n\tmax_power_of_t: 3,\n\tdistance: 3.0110386869399999e+01,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t-1376.86480, 730.38970, 78655362.50948, 1095691.38676,\n\t\t-196.19023, 2086.77782,\n\t\t-122.04650, -276.81592,\n\t\t184.56164, -148.08924,\n\t\t3.39142, -14.75027,\n\t\t-9.22741, 0.87688,\n\t\t-0.13903, -0.44707,\n\t\t-0.17668, -0.36299,\n\t\t-0.12682, -0.26636,\n\t\t-0.51426, -0.24667,\n\t\t-0.04965, -0.03177,\n\t\t0.05050, -0.00249,\n\t\t-0.80362, -0.07363, -0.15436, -0.07180,\n\t\t2.45034, -3.50145, 0.86698, 0.09777,\n\t\t7.72386, 7.16565, 2.10273, 8.86682,\n\t\t2.44705, 77.90155,\n\t\t0.28323, -11.87157, -13.64083, 252.70556,\n\t\t-4.94214, -6.17988, -305.60504, 51.23962,\n\t\t-2759.81719, 2476.20912,\n\t\t12.65762, 13.31543,\n\t\t0.36996, -0.19077, 0.67363, 0.36737,\n\t\t0.02312, 0.02216,\n\t\t0.09953, 0.04777,\n\t\t-0.00572, -0.02772,\n\t\t-0.02478, -0.21920,\n\t\t-0.15289, -1.50784,\n\t\t-0.17822, 0.34638, -0.70473, -8.61559,\n\t\t-2.65756, 1.25632,\n\t\t-0.31453, -1.40348, -4.02571, -1.50467,\n\t\t-69.62308, 3.21315,\n\t\t0.69973, 0.08832,\n\t\t-0.00551, -0.04964,\n\t\t-0.02264, -0.34881,\n\t\t0.00762, -1.85072,\n\t\t0.01407, -0.30457,\n\t\t-0.09851, -0.02372,\n\t\t-0.07729, -0.11602, -0.75995, -0.71884,\n\t\t-0.08585, -0.30406, 0.45818, 0.14921,\n\t\t-0.01033, -0.11776,\n\t\t0.00640, -0.57717,\n\t\t-0.01014, -0.01357, -0.00544, -0.02168,\n\t\t0.40468, 0.28195, 0.00668, 0.14448,\n\t\t0.01245, -0.08956,\n\t\t-0.26283, 0.01864, -0.00641, 18.55347,\n\t\t0.01460, 0.08284,\n\t\t-0.04785, 0.11360,\n\t\t-0.33861, 0.01327, -0.06392, -0.18758,\n\t\t0.05449, -0.05583,\n\t\t-0.00435, -0.09869,\n\t\t-0.00286, -0.04613,\n\t\t-0.00395, -0.14564,\n\t\t-0.01385, -0.01762,\n\t\t0.21160, -0.61631, -0.52100, -0.04583,\n\t\t0.32812, 0.32138,\n\t\t0.04749, -0.05724,\n\t\t0.11239, 0.13216,\n\t\t-0.01203, 0.40084, -0.05207, 34.07903,\n\t\t-0.21457, -0.34938, -0.04594, 0.11198,\n\t\t-0.30662, -0.20776, -0.01076, -0.10959,\n\t\t0.10891, -0.10304,\n\t\t-0.28141, 0.25061, -0.20293, 0.79930\n\t],\n\tlat_tbl: [\n\t\t-391.05987, -243.95958, -23.83558, 58.13857,\n\t\t5.04859, -3.93183,\n\t\t-14.21914, 7.14247,\n\t\t-12.09415, -9.70132,\n\t\t1.04307, 0.47323,\n\t\t-0.07504, 0.70575,\n\t\t-0.05239, 0.00482,\n\t\t-0.02916, 0.00877,\n\t\t-0.00528, -0.00286,\n\t\t0.00028, -0.00228,\n\t\t-0.00056, -0.00149,\n\t\t0.00049, 0.00047,\n\t\t-0.18765, -0.59571, 0.03742, -0.14653,\n\t\t2.30535, 0.65092, 0.42216, 0.24521,\n\t\t-2.86932, 2.37808, -0.58456, 0.27446,\n\t\t-1.12264, -2.04413,\n\t\t-11.71318, -1.41554, -23.30671, -24.70499,\n\t\t8.82738, 85.64657, -90.02223, 22.42604,\n\t\t-4749.41359, -4244.46820,\n\t\t25.20811, -18.51469,\n\t\t-1.19892, -0.61067, 0.67734, -1.08912,\n\t\t-0.01607, 0.00626,\n\t\t-0.00008, 0.00126,\n\t\t-0.00330, -0.00078,\n\t\t-0.01503, 0.00758,\n\t\t-0.13208, -0.00218,\n\t\t-0.04522, 0.20297, -0.94708, -0.77897,\n\t\t-2.74075, -3.01122,\n\t\t-1.03394, 0.00886, 1.55485, -4.68416,\n\t\t-0.13244, -57.26983,\n\t\t0.05589, -0.55396,\n\t\t-0.00130, 0.00526,\n\t\t-0.01028, 0.02086,\n\t\t0.01334, 0.00699,\n\t\t0.08565, 0.02020,\n\t\t0.01001, -0.08402,\n\t\t0.08558, -0.04488, 0.57268, -0.59574,\n\t\t0.00807, 0.00492, 0.21993, -0.18949,\n\t\t-0.00396, 0.00735,\n\t\t0.00487, 0.00230,\n\t\t0.00699, -0.00473, 0.01406, -0.00139,\n\t\t0.00738, 0.00099, 0.00161, 0.00019,\n\t\t-0.00067, -0.00047,\n\t\t0.00572, -0.00486, -0.00842, 0.00322,\n\t\t0.00018, -0.00109,\n\t\t-0.00272, 0.00112,\n\t\t-0.00041, 0.00763, 0.00211, 0.00118,\n\t\t-0.46842, -0.17877,\n\t\t0.00209, -0.00179,\n\t\t0.00090, -0.00075,\n\t\t0.00618, 0.00610,\n\t\t0.00015, 0.00032,\n\t\t-0.00123, 0.00026, 0.00332, 0.00135,\n\t\t0.39130, -0.34727,\n\t\t0.00015, -0.00027,\n\t\t-0.00026, -0.00052,\n\t\t0.00162, 0.00913, -0.00697, 0.00308,\n\t\t-0.00333, -0.00258, -0.00117, 0.00035,\n\t\t0.00766, 0.00194, 0.00135, 0.00067,\n\t\t-0.41171, 0.24241,\n\t\t0.00106, 0.00025, 0.00013, -0.00019\n\t],\n\trad_tbl: [\n\t\t-767.68936, -460.59576, -52.41861, -273.85897,\n\t\t59.52489, 1.85006,\n\t\t-39.64750, 23.63348,\n\t\t-34.60399, -23.41681,\n\t\t2.74937, 1.55389,\n\t\t0.20343, 2.15502,\n\t\t-0.12846, 0.07199,\n\t\t-0.07555, 0.05582,\n\t\t-0.04354, 0.01546,\n\t\t-0.03931, 0.07623,\n\t\t-0.00491, 0.00661,\n\t\t0.00322, 0.01540,\n\t\t-0.06741, -0.35343, 0.00469, -0.08073,\n\t\t1.94975, 0.66376, 0.06137, 0.31426,\n\t\t-2.93841, 4.27732, -4.00342, 1.11157,\n\t\t-36.87785, 1.24960,\n\t\t4.69573, 2.15164, -114.24899, -6.69320,\n\t\t12.99919, -9.47795, -21.82350, -156.88624,\n\t\t-1237.19769, -1379.88864,\n\t\t6.54369, -6.20873,\n\t\t-0.14163, -0.32700, 0.17937, -0.34864,\n\t\t0.01393, -0.01286,\n\t\t0.02876, -0.05767,\n\t\t0.02210, -0.00128,\n\t\t0.16495, -0.01242,\n\t\t1.15915, -0.10365,\n\t\t-0.33224, -0.10045, 6.83719, -0.27499,\n\t\t-0.31284, -0.94332,\n\t\t1.63704, -0.33318, 1.48134, -1.32257,\n\t\t0.96498, -8.31047,\n\t\t-0.00402, -0.09441,\n\t\t0.04292, -0.00444,\n\t\t0.30325, -0.02012,\n\t\t1.67999, 0.00353,\n\t\t0.00467, 0.03556,\n\t\t0.01393, -0.01229,\n\t\t0.01188, -0.01390, 0.04615, -0.03509,\n\t\t0.32423, -0.12491, 0.13682, 0.15131,\n\t\t0.11221, -0.01201,\n\t\t0.57239, 0.00093,\n\t\t0.02068, -0.01162, 0.00647, -0.00325,\n\t\t0.27010, -0.42993, 0.14314, -0.01353,\n\t\t-0.08757, -0.00699,\n\t\t0.00199, 0.31873, 18.80329, 0.01681,\n\t\t0.08009, -0.00998,\n\t\t-0.14421, -0.15912,\n\t\t0.37208, 0.49744, 0.35144, 0.06582,\n\t\t-0.11501, -0.14037,\n\t\t0.10352, -0.00768,\n\t\t0.04826, -0.00423,\n\t\t0.19850, 0.00310,\n\t\t-0.01780, 0.01350,\n\t\t-0.61106, -0.20525, -0.04388, 0.52143,\n\t\t0.19300, -0.21446,\n\t\t-0.05749, -0.04776,\n\t\t0.12877, -0.10908,\n\t\t0.39821, 0.00627, 34.03956, 0.04392,\n\t\t-0.34455, 0.22015, 0.11743, 0.04638,\n\t\t0.20723, -0.30447, 0.10976, -0.01008,\n\t\t-0.20778, -0.21822,\n\t\t0.24939, 0.27976, 0.79790, 0.20200\n\t],\n\targ_tbl: [\n\t\t0, 3,\n\t\t2, 1, 7, -2, 8, 0,\n\t\t3, 3, 5, -8, 6, 3, 8, 0,\n\t\t2, 2, 7, -4, 8, 0,\n\t\t3, 1, 5, -3, 6, 3, 8, 0,\n\t\t2, 3, 7, -6, 8, 0,\n\t\t2, 4, 7, -8, 8, 0,\n\t\t3, 1, 6, -6, 7, 6, 8, 0,\n\t\t3, 1, 6, -5, 7, 4, 8, 0,\n\t\t3, 1, 6, -4, 7, 2, 8, 0,\n\t\t2, 1, 6, -3, 7, 0,\n\t\t3, 1, 6, -2, 7, -1, 8, 0,\n\t\t2, 5, 7, -9, 8, 1,\n\t\t2, 4, 7, -7, 8, 1,\n\t\t2, 3, 7, -5, 8, 1,\n\t\t2, 2, 7, -3, 8, 0,\n\t\t2, 1, 7, -1, 8, 1,\n\t\t1, 1, 8, 2,\n\t\t2, 1, 7, -3, 8, 0,\n\t\t2, 2, 7, -5, 8, 1,\n\t\t3, 1, 6, -6, 7, 5, 8, 0,\n\t\t3, 1, 6, -5, 7, 3, 8, 0,\n\t\t2, 5, 7, -8, 8, 0,\n\t\t2, 4, 7, -6, 8, 0,\n\t\t2, 3, 7, -4, 8, 0,\n\t\t2, 2, 7, -2, 8, 1,\n\t\t1, 1, 7, 0,\n\t\t1, 2, 8, 2,\n\t\t2, 1, 7, -4, 8, 0,\n\t\t2, 5, 7, -7, 8, 0,\n\t\t2, 4, 7, -5, 8, 0,\n\t\t2, 3, 7, -3, 8, 0,\n\t\t2, 2, 7, -1, 8, 0,\n\t\t2, 1, 7, 1, 8, 0,\n\t\t1, 3, 8, 1,\n\t\t2, 1, 6, -2, 8, 1,\n\t\t2, 5, 7, -6, 8, 0,\n\t\t2, 4, 7, -4, 8, 0,\n\t\t1, 4, 8, 1,\n\t\t3, 2, 5, -4, 6, -1, 8, 1,\n\t\t3, 1, 6, 1, 7, -3, 8, 0,\n\t\t2, 1, 6, -1, 8, 1,\n\t\t3, 1, 6, -1, 7, 1, 8, 0,\n\t\t3, 2, 5, -6, 6, 1, 8, 0,\n\t\t2, 5, 7, -5, 8, 1,\n\t\t1, 1, 6, 0,\n\t\t2, 6, 7, -6, 8, 0,\n\t\t2, 7, 7, -7, 8, 0,\n\t\t2, 2, 6, -2, 8, 0,\n\t\t3, 2, 5, -3, 6, -1, 8, 0,\n\t\t2, 2, 6, -1, 8, 1,\n\t\t2, 1, 5, -2, 8, 0,\n\t\t3, 3, 5, -5, 6, -1, 8, 0,\n\t\t2, 4, 7, 5, 8, 0,\n\t\t2, 1, 5, -1, 8, 1,\n\t\t3, 1, 5, -1, 7, 1, 8, 1,\n\t\t3, 1, 5, -5, 6, 1, 8, 1,\n\t\t1, 1, 5, 0,\n\t\t2, 2, 5, -1, 8, 1,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/neptune.js?");

/***/ }),

/***/ "./src/ptables/pluto.js":
/*!******************************!*\
  !*** ./src/ptables/pluto.js ***!
  \******************************/
/*! exports provided: plutoPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"plutoPTable\", function() { return plutoPTable; });\nconst plutoPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 0, 0, 0, 2, 2, 9, 13, 13],\n\tmax_power_of_t: 7,\n\tdistance: 3.9539999999999999e+01,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t74986469.33577, 100898343.73690, 48199471.54076, 9520076.03177,\n\t\t690431.67340, -427355.12716, 52266623.77862, 860190.70714,\n\t\t-21.08511, -143.39295,\n\t\t-126.71124, 48.18528,\n\t\t-88.74508, 40.50942,\n\t\t51.29367, -10.24075,\n\t\t0.63094, 32.03258,\n\t\t-410.00781, 399.90234, -116.54319, 51.50329,\n\t\t116.84565, 687.76781, -13.38605, 182.70107,\n\t\t-1668.12226, -5162.22648, -585.68297, -2247.56041,\n\t\t-20.95875, -193.13703,\n\t\t-57.12097, -10.35058,\n\t\t-1778.01442, -6463.73779, -657.86093, -2713.44436,\n\t\t-41.32560, -211.82042,\n\t\t-107.16513, -36.58628,\n\t\t97929588.08231, -33582903.63417, 143382679.31770, -47411568.92345,\n\t\t79428827.73581, -24658834.87499, 19861233.17488, -5755585.62084,\n\t\t1995060.95931, -693507.08147, 135176.31467, 109360.38672,\n\t\t-8188.00598, -1680.95072, 71020.19608, -70785.39049,\n\t\t-24.56034, -20.34919,\n\t\t1618.45976, -2079.48538, 635.62954, -850.87068,\n\t\t44.95257, -64.04459,\n\t\t-18.61475, -1.77734,\n\t\t9.38079, 5.19958,\n\t\t17422.08783, -4872.53852, 10985.76629, -1137.68569,\n\t\t1771.28893, 288.93745, 40.22664, 37.90027,\n\t\t6.81361, -32.65868,\n\t\t16.97268, 11.76152,\n\t\t29.33024, -12.92289,\n\t\t-55.13187, -14.73791,\n\t\t7.52474, -102.05060,\n\t\t182.53144, -20.18960,\n\t\t-490237997.49400, 486646248.63360, -781277018.26430, 602300460.57290,\n\t\t-463787999.46420, 249529525.96100, -123964746.86420, 31353019.97807,\n\t\t-13353800.92159, -3463382.63269, -35469.17654, -1035343.45385,\n\t\t65076.64025, -38181.61312, -16473.33813, 3928.44674,\n\t\t188.60263, 1000.42530,\n\t\t-208376.39376, -700566.62363, 114839.84613, -342407.71113,\n\t\t39467.04812, -14553.84849,\n\t\t581895.26100, 1012499.16715, 406317.22416, 310804.78515,\n\t\t43625.07033, -4157.26545,\n\t\t-5930.13795, -2070.62413,\n\t\t3348.17582, -10871.23729,\n\t\t144609.18550, 60383.63650, 27912.02226, 15254.61228,\n\t\t-98561.37758, -67442.28158, -15573.63338, -19931.99773,\n\t\t24323.06905, -37473.32558, 2840.64042, -8911.23694,\n\t\t-19636.31898, 71725.21946, -12280.54554, 12251.00101,\n\t\t88626.52260, 5513.68450, 18506.41546, -6513.87434,\n\t\t-83350.14621, 44300.00743, -22075.37353, 3731.57531,\n\t\t-29167.76020, -21642.67384,\n\t\t56602666.72177, -22225578.01823, 50576897.80669, -50319847.79086,\n\t\t5689259.25622, -29585299.79697, -4249711.27661, -4490830.29568,\n\t\t-727678.08724, 366050.85631, 19183.62792, 55647.98226,\n\t\t1897.78091, -1091.03988, 432.38158, -138.62556,\n\t\t101.38743, 25.67379,\n\t\t320.20735, 362.16615, 85.06067, 54.02616,\n\t\t2.39460, 18.70004,\n\t\t-8.43353, 2.72100,\n\t\t-3.11205, -3.06201,\n\t\t136.31503, -28.33620, 48.68781, -18.45285,\n\t\t1.15302, -1.52360,\n\t\t-0.13706, -0.37489,\n\t\t0.08750, -0.14579,\n\t\t-0.07051, -0.06518,\n\t\t0.30237, -0.00448,\n\t\t4.83172, 6.83684,\n\t\t1752447.78043, -945086.75857, 2340978.12819, -1963675.42559,\n\t\t1254147.25257, -1274861.91191, 279459.60237, -263954.01378,\n\t\t11835.62290, -16344.44434, 9119.98960, -2390.44218,\n\t\t-23.67909, 86.73916, -642.78635, -1290.12208,\n\t\t-0.43345, -1.85348,\n\t\t0.03094, -0.01655,\n\t\t0.12380, 0.31834,\n\t\t5.54756, -1.63109, 1.10598, -0.17578,\n\t\t2.66994, -2.17573, 0.97360, -0.92226,\n\t\t-0.18533, -0.39747,\n\t\t0.45809, -0.65286,\n\t\t0.26129, 0.91922,\n\t\t0.81068, 0.11183,\n\t\t6.32182, 14.16786, 0.20872, 3.28489,\n\t\t-1.47458, -2.11724,\n\t\t1.70020, -1.99889,\n\t\t3.13003, 1.90638,\n\t\t-4483669.52795, -446454.90158, -6586256.67478, -671890.16779,\n\t\t-3620444.55554, -499672.41074, -855998.32655, -191073.94266,\n\t\t-73186.69110, -22649.38582, -2414.81729, -1294.40542,\n\t\t436.80907, 125.48109, -81.16877, 458.86508,\n\t\t-11.57414, -26.39114, -4.00801, -5.01054,\n\t\t-18.17569, 20.86879, -4.80965, 3.10535,\n\t\t-4.71122, 1.18169,\n\t\t74.75544, 649.21464, -26.55060, 272.35592,\n\t\t-8.06982, 16.86110,\n\t\t-26.54868, 26.75711,\n\t\t-35.82910, 38.51063,\n\t\t22.22814, 19.38336,\n\t\t-6.30462, 0.90602,\n\t\t0.62856, -0.34981,\n\t\t-0.10232, -0.00939,\n\t\t0.04439, -0.18875,\n\t\t0.16025, 0.11306,\n\t\t-0.06803, 0.06004,\n\t\t-91305.66728, 262370.61704, -194633.44577, 304838.17733,\n\t\t-124505.90904, 94111.75602, -22317.18255, 1575.23438,\n\t\t748.66316, -349.78711, 166.64450, -89.05045,\n\t\t120.76207, -100.26715,\n\t\t3.13806, 3.71747,\n\t\t-1.44731, -0.35235,\n\t\t-0.51660, -1.50621,\n\t\t2.81310, -3.93573, 1.20292, -0.36412,\n\t\t-0.03340, -0.00561,\n\t\t-5.29764, 26.02941, 1.91382, 3.30686,\n\t\t-3.35265, -3.20868,\n\t\t0.05807, -0.11885,\n\t\t-0.78588, 0.34807, -0.19038, 0.11295,\n\t\t-0.03642, -0.03794,\n\t\t0.00251, 0.03449,\n\t\t-0.08426, -0.00310,\n\t\t0.05297, -0.09278,\n\t\t0.10941, 0.00099,\n\t\t-228688.56632, 312567.73069, -331458.31119, 328200.19460,\n\t\t-143760.57524, 104182.01134, -17313.30132, 12591.15513,\n\t\t-440.32735, -105.67674, 104.35854, -852.84590,\n\t\t0.95527, 0.30212, -54.63983, 4.06948,\n\t\t0.07545, -0.13429,\n\t\t16.21005, 29.24658, 9.23410, 50.48867,\n\t\t30.55641, 12.76809, 0.11781, 0.70929,\n\t\t-0.04100, 13.60859,\n\t\t0.04976, -0.02083,\n\t\t0.36279, 0.30130, -0.02129, 0.09363,\n\t\t-0.07812, 0.01570,\n\t\t-0.06217, -0.37181,\n\t\t-29348.55031, 43889.87672, -35765.41577, 33855.90070,\n\t\t-10128.69894, 4535.32148, 281.75353, -218.49194,\n\t\t-7.55224, 134.28640, 2.11319, -2.13109,\n\t\t15.71244, 11.07183,\n\t\t-0.05406, -0.23337,\n\t\t-1.28949, 1.34281,\n\t\t0.04212, -0.02080,\n\t\t0.08109, 0.14820,\n\t\t-6010.46564, 3639.41780, -5973.16000, 1381.66999,\n\t\t-1177.36865, -501.06937, 166.14792, -103.36431,\n\t\t14.92766, 4.12877, -2.20893, -6.32033,\n\t\t-0.29038, -0.43172,\n\t\t-0.59341, 0.20477, -0.13143, -0.03150,\n\t\t0.10992, 0.01976,\n\t\t-0.00254, 0.02028,\n\t\t-0.30044, -0.44658, -0.03409, -0.10758,\n\t\t0.08349, 0.06153,\n\t\t-0.06055, 0.18249,\n\t\t-1.15341, -8.68699, -0.11348, -3.30688,\n\t\t1.08604, 1.04018,\n\t\t-0.46892, -0.69765, 0.21504, 0.01968,\n\t\t-0.00455, -0.01678,\n\t\t3.95643, -3.17191, 3.95220, -2.12670,\n\t\t0.99305, -0.16651,\n\t\t0.34839, -0.49162,\n\t\t0.85744, 0.20173, -0.00975, 0.20225,\n\t\t-0.02627, -0.02281,\n\t\t-0.18002, -0.01803,\n\t\t-0.06144, -0.21510,\n\t\t0.15935, -0.01251,\n\t\t-0.21378, 0.44806, -0.01174, 0.05779,\n\t\t0.07646, -0.19656, -0.04044, -0.02521,\n\t\t0.02996, 0.06169,\n\t\t0.16698, -0.04710, -0.06506, -0.02114,\n\t\t0.05500, 0.00276,\n\t\t0.08433, 0.03160,\n\t\t0.08193, 0.35773, 0.05454, 0.10718,\n\t\t-0.02823, -0.00839,\n\t\t0.54078, 0.49347, 0.09609, 0.11825,\n\t\t-0.16092, -0.11897,\n\t\t0.09059, 0.08254,\n\t\t0.16712, 0.05860,\n\t\t-0.09547, -0.03206,\n\t\t0.03876, 0.04719,\n\t\t-0.02345, 0.02240,\n\t\t-0.00609, -0.00649,\n\t\t0.03859, 0.00077,\n\t\t0.47819, 0.26196, 0.09780, 0.08104,\n\t\t-0.16919, 0.05042,\n\t\t-0.42652, 0.30810,\n\t\t-0.03409, -0.51452,\n\t\t-0.23120, -0.01380,\n\t\t-0.01157, -0.00143,\n\t\t-0.00512, -0.01628,\n\t\t-0.00189, 0.00183,\n\t\t-0.01427, -0.02861,\n\t\t0.00618, -0.00015,\n\t\t0.13087, 0.13870,\n\t\t0.15158, -0.21056,\n\t\t-3.94829, -1.06028, -1.36602, 0.77954,\n\t\t0.08709, -0.03118,\n\t\t-44.74949, 91.17393, 8.78173, 45.84010,\n\t\t1.97560, -15.02849, -0.10755, -0.02884,\n\t\t3.38670, 0.30615,\n\t\t130.92778, -24.33209, 43.01636, -40.81327,\n\t\t-19.43900, 22.18162, -0.12691, 0.33795,\n\t\t-6.44790, -6.23145,\n\t\t0.00319, 0.01141,\n\t\t-0.03252, 0.03872,\n\t\t0.04467, 0.01614,\n\t\t-0.00382, -0.00019,\n\t\t0.05955, 0.01533,\n\t\t16.11371, 41.37565, 61.44963, 6.90615,\n\t\t1.41326, -0.73920, -0.03871, 24.81978,\n\t\t-0.10229, -0.32775, -0.05188, -0.05628,\n\t\t-2.33618, 2.39053,\n\t\t-0.00584, 0.00436,\n\t\t0.20903, 0.02220,\n\t\t-0.01738, -0.02765,\n\t\t-0.00217, 0.00613,\n\t\t-0.01772, 0.01903,\n\t\t0.07075, -0.00530,\n\t\t0.15234, -0.37760, -0.11641, -0.20102,\n\t\t-0.63675, 0.20525, -0.15783, 0.58945,\n\t\t-0.06243, 0.04306\n\t],\n\tlat_tbl: [\n\t\t-35042727.30412, -49049197.81293, -25374963.60995, -5761406.03035,\n\t\t-467370.57540, 14040.11453, 2329.15763, -13978.69390,\n\t\t45.43441, 29.70305,\n\t\t32.33772, -38.34012,\n\t\t26.43575, -28.76136,\n\t\t-18.59040, 12.64837,\n\t\t5.56569, -12.51581,\n\t\t248.37350, -64.44466, 54.02618, 4.39466,\n\t\t-269.35114, -290.63134, -48.03841, -52.83576,\n\t\t1508.94995, 1682.78967, 554.02336, 715.65819,\n\t\t34.37602, 58.44397,\n\t\t16.63685, 16.10176,\n\t\t-1069.51609, 2300.89166, -437.16796, 927.89245,\n\t\t-33.17679, 68.74495,\n\t\t18.72022, 32.97640,\n\t\t-34004958.12619, -17758805.77098, -48416073.75788, -24973405.03542,\n\t\t-25374996.23732, -13351084.97340, -5738294.54942, -3082092.63350,\n\t\t-519989.39256, -206440.89101, 44186.23548, -87639.22630,\n\t\t2506.47602, 2327.01164, -53878.47903, -19670.13471,\n\t\t2.66934, -3.86086,\n\t\t106.32427, 576.47944, 46.56388, 218.28339,\n\t\t4.35402, 15.04642,\n\t\t2.68717, -2.86835,\n\t\t0.81728, -2.34417,\n\t\t-1604.85823, -1999.24986, -631.47343, -1382.19156,\n\t\t-15.74075, -256.97077, 6.99648, -4.54257,\n\t\t2.63478, 1.88838,\n\t\t0.17628, -2.11518,\n\t\t-2.46735, -1.48743,\n\t\t1.83456, 4.68487,\n\t\t-7.10919, 3.57046,\n\t\t-5.36342, -7.70367,\n\t\t28395956.20816, -37176795.74372, 48969952.83034, -48145798.96248,\n\t\t31155823.23557, -21163596.14822, 9057634.38260, -3167688.51696,\n\t\t1167488.70078, 219103.97591, -19017.97335, 107849.61195,\n\t\t-3814.43474, 4405.92120, 5800.13959, 12619.88708,\n\t\t22.18168, -89.47801,\n\t\t52202.81929, 55119.44083, 5082.58907, 37955.06062,\n\t\t-3165.24355, 3316.67588,\n\t\t-113906.43970, -69279.41495, -57358.07767, -10176.17329,\n\t\t-4179.79867, 2495.99374,\n\t\t787.87180, -154.35591,\n\t\t-1148.62509, 1034.58199,\n\t\t-22194.95235, 3341.97949, -4578.53994, 108.30832,\n\t\t7444.39789, 16646.40725, 509.75430, 3808.92686,\n\t\t-179.85869, 7408.76716, 340.65366, 1504.64227,\n\t\t-3783.09873, -13505.60867, 875.74489, -3181.27898,\n\t\t-16220.93983, 8041.37347, -2631.07448, 2899.50781,\n\t\t18894.92095, -20072.81471, 5925.05701, -1947.91902,\n\t\t-6731.56601, 8014.52403,\n\t\t-987793.49463, 6491762.34471, -279205.73643, 6117135.96868,\n\t\t-140925.91402, 2259422.06929, 114028.61646, 605600.90358,\n\t\t91858.00186, 56506.65187, 8949.15777, -9782.67413,\n\t\t-394.66541, -105.19208, -76.54752, -32.59411,\n\t\t-19.28741, 10.40013,\n\t\t-107.64003, -7.36229, -22.25126, 4.05952,\n\t\t-3.74402, -2.79308,\n\t\t1.03337, -2.13968,\n\t\t1.53794, -0.02617,\n\t\t35.70756, 12.97733, 14.46213, 6.20518,\n\t\t1.79381, 1.65422,\n\t\t-0.31216, 0.29053,\n\t\t-0.03538, -0.01584,\n\t\t-0.08934, 0.00079,\n\t\t0.05539, -0.21591,\n\t\t2.86929, -2.24724,\n\t\t320797.07455, 93342.16556, -20903.39115, 79523.22083,\n\t\t-226588.37473, -121017.23944, -48472.25935, -74195.36778,\n\t\t-7962.48081, -4607.76339, -4597.33274, -7983.12541,\n\t\t-20.34500, 56.82999, -1038.19507, 619.69624,\n\t\t1.08907, -0.91278,\n\t\t-0.13391, 0.34956,\n\t\t-0.19982, -0.18296,\n\t\t-0.97688, 2.36806, -0.30127, 0.50980,\n\t\t0.96103, 1.96432, 0.43338, 0.87317,\n\t\t0.36997, -0.01583,\n\t\t-0.44692, -0.25159,\n\t\t-0.53525, 0.01154,\n\t\t-0.13231, 0.35562,\n\t\t3.88928, -4.02882, 1.06967, -0.56305,\n\t\t-0.45204, 0.77213,\n\t\t-0.82873, -0.25854,\n\t\t0.21136, -1.06696,\n\t\t458529.05491, 616790.47568, 698431.01349, 1124501.41713,\n\t\t300226.10339, 766533.33698, 26896.22954, 207880.75720,\n\t\t1116.29607, 21793.26153, -850.64044, 3528.95568,\n\t\t29.61278, -120.13367, 376.95131, 66.45758,\n\t\t-3.64868, 2.76062, -0.85352, 0.95115,\n\t\t5.35056, 2.52803, 0.90026, 0.76403,\n\t\t0.43191, 0.83605,\n\t\t125.81792, -39.65364, 50.14425, -5.75891,\n\t\t2.78555, 2.05055,\n\t\t-4.27266, -4.92428,\n\t\t6.78868, 5.73537,\n\t\t3.35229, -3.70143,\n\t\t0.08488, 1.07465,\n\t\t0.10227, 0.06074,\n\t\t0.00291, 0.01522,\n\t\t-0.02274, 0.00297,\n\t\t0.01095, -0.01856,\n\t\t-0.02862, 0.00178,\n\t\t143640.07486, 707.21331, 177163.08586, 53386.52697,\n\t\t56856.89297, 48268.74645, 1764.52814, 7711.76224,\n\t\t352.34159, -968.03169, -45.16568, -81.60481,\n\t\t-76.35993, -98.06932,\n\t\t-1.42185, 1.81425,\n\t\t-0.23427, 0.59023,\n\t\t0.57127, -0.36335,\n\t\t1.89975, 0.66890, 0.28797, 0.43592,\n\t\t-0.03769, 0.03273,\n\t\t-6.06571, -2.68515, -0.55315, 0.86977,\n\t\t1.53840, -0.59422,\n\t\t-0.05453, 0.02447,\n\t\t-0.12658, 0.22814, -0.01715, 0.08497,\n\t\t-0.01288, -0.00606,\n\t\t0.01547, -0.00692,\n\t\t0.01157, 0.02407,\n\t\t-0.03883, 0.00835,\n\t\t-0.01542, -0.04761,\n\t\t174386.39024, 158048.26273, 159192.81681, 220154.55148,\n\t\t33716.11953, 87537.86597, -116.90381, 7535.83928,\n\t\t-962.06994, -132.28837, -644.90482, -110.52332,\n\t\t3.42499, 3.74660, -0.94008, 41.55548,\n\t\t-0.03824, -0.05607,\n\t\t28.74787, -37.31399, 30.87853, -26.11940,\n\t\t10.79742, -5.97905, 1.01237, -0.04429,\n\t\t0.54402, 0.41905,\n\t\t-0.02440, -0.03991,\n\t\t-0.00347, -0.04362, -0.00347, -0.00469,\n\t\t-0.02707, 0.02761,\n\t\t-0.17773, -0.11789,\n\t\t26475.02580, 35363.04345, 19877.11475, 41430.35940,\n\t\t2948.09998, 12983.41406, 281.93744, 570.70054,\n\t\t147.83157, 16.00090, -1.62814, -8.30846,\n\t\t9.29131, -10.16496,\n\t\t-0.15799, 0.03843,\n\t\t1.44716, 0.46953,\n\t\t-0.02150, -0.02502,\n\t\t0.08861, -0.06690,\n\t\t2237.41551, 3739.08722, 753.74867, 3460.41553,\n\t\t-298.69226, 520.47031, -33.62615, -138.12767,\n\t\t3.61843, -8.29860, -4.56656, 0.79553,\n\t\t0.20041, -0.25771,\n\t\t-0.35233, -0.27913, -0.02799, -0.08328,\n\t\t-0.06889, -0.16853,\n\t\t0.01701, -0.00964,\n\t\t-0.37737, 0.18030, -0.08525, 0.01906,\n\t\t0.05236, -0.05155,\n\t\t0.11320, 0.05991,\n\t\t-5.66926, -0.54402, -2.08508, -0.39407,\n\t\t0.82155, -0.55975,\n\t\t0.39168, -0.25551, 0.00623, 0.16162,\n\t\t-0.02519, 0.02420,\n\t\t-1.23293, -3.19649, -0.60519, -2.79729,\n\t\t0.05362, -0.61569,\n\t\t-0.25638, -0.27033,\n\t\t-0.03987, 0.46623, -0.12070, 0.00643,\n\t\t0.00849, -0.00768,\n\t\t-0.03687, 0.10445,\n\t\t-0.13544, -0.00592,\n\t\t0.02078, 0.09172,\n\t\t0.15824, 0.15815, 0.02020, 0.00747,\n\t\t0.10919, 0.09553, 0.01953, -0.00135,\n\t\t0.04266, -0.00218,\n\t\t0.02182, -0.13742, -0.01249, 0.01724,\n\t\t-0.02200, 0.02975,\n\t\t-0.01401, 0.03416,\n\t\t-0.28873, 0.04235, -0.08137, 0.04223,\n\t\t-0.00326, 0.02144,\n\t\t-0.40423, 0.14281, -0.08256, 0.02142,\n\t\t0.08116, -0.03680,\n\t\t-0.02324, 0.07260,\n\t\t-0.06746, 0.11645,\n\t\t0.03233, -0.05997,\n\t\t-0.03101, 0.02197,\n\t\t-0.00896, -0.00491,\n\t\t0.00574, 0.00855,\n\t\t0.00052, 0.01209,\n\t\t-0.31828, 0.29955, -0.08133, 0.04318,\n\t\t0.06787, -0.08865,\n\t\t-0.13228, -0.06507,\n\t\t0.34008, 0.06417,\n\t\t-0.00177, -0.15116,\n\t\t-0.00553, -0.01950,\n\t\t0.01144, -0.00309,\n\t\t-0.00115, -0.00153,\n\t\t0.02063, -0.00791,\n\t\t-0.00314, 0.00493,\n\t\t-0.10614, 0.08338,\n\t\t0.08845, 0.20168,\n\t\t1.38955, -2.52285, -0.30475, -1.05787,\n\t\t0.00580, 0.06623,\n\t\t-44.33263, -47.70073, -29.80583, -8.77838,\n\t\t7.02948, 2.77221, 0.05248, -0.13702,\n\t\t-0.78176, 1.77489,\n\t\t-16.32831, 46.68457, 2.54516, 21.78145,\n\t\t-5.09080, -8.42611, -0.24419, -0.03315,\n\t\t2.80629, -1.12755,\n\t\t-0.00402, 0.00053,\n\t\t0.00024, -0.00043,\n\t\t0.00403, -0.00210,\n\t\t0.00603, 0.00411,\n\t\t-0.00260, 0.00416,\n\t\t2.29235, 3.05992, 2.36465, -0.58750,\n\t\t0.14030, 0.13523, 0.89998, 0.70156,\n\t\t-0.02188, 0.02003, -0.00533, 0.00447,\n\t\t2.96411, 1.30183,\n\t\t0.01422, 0.00624,\n\t\t-0.10737, -0.38316,\n\t\t-0.05968, 0.04379,\n\t\t0.01171, 0.01180,\n\t\t-0.00989, -0.01375,\n\t\t-0.00845, 0.03782,\n\t\t0.09484, 0.09909, 0.07640, -0.00898,\n\t\t-0.01076, 0.02760, 0.01630, 0.02198,\n\t\t0.05985, 0.04130\n\t],\n\trad_tbl: [\n\t\t17990649.12487, 24806479.30874, 12690953.00645, 2892671.69562,\n\t\t249947.71316, -5138.71425, 1142.68629, 6075.25751,\n\t\t-34.76785, -19.72399,\n\t\t-15.81516, 30.47718,\n\t\t-11.73638, 21.87955,\n\t\t9.42107, -10.40957,\n\t\t-5.59670, 6.85778,\n\t\t-167.06735, -2.31999, -32.42575, -13.72714,\n\t\t130.16635, 117.97555, 31.33915, 39.64331,\n\t\t-1378.54934, -395.83244, -562.79856, -167.74359,\n\t\t-45.12476, -17.08986,\n\t\t-4.20576, -16.56724,\n\t\t1762.12089, -1148.86987, 736.55320, -423.09108,\n\t\t56.13621, -26.26674,\n\t\t9.77810, -38.05151,\n\t\t4702224.98754, 27254904.94363, 5306232.25993, 39518429.29982,\n\t\t1725110.05669, 21833263.27069, 46010.62605, 5425411.66252,\n\t\t17238.09865, 536771.62156, -61263.36051, 66270.70142,\n\t\t2084.66296, -1936.71208, 35898.49503, 34885.28549,\n\t\t1.93276, 10.66292,\n\t\t-665.11445, 3.70467, -265.68478, 16.16272,\n\t\t-19.45954, 2.32738,\n\t\t3.04237, 3.97339,\n\t\t-2.64312, 0.66308,\n\t\t-3207.68754, 3418.03720, -2342.62310, 1729.15030,\n\t\t-450.84643, 179.00943, -13.20367, -1.86087,\n\t\t-4.95659, 7.22347,\n\t\t-5.08890, -1.28891,\n\t\t-6.21713, 5.10551,\n\t\t13.97276, 0.44529,\n\t\t3.25177, 25.02775,\n\t\t-45.56672, 11.58470,\n\t\t124443355.55450, -100018293.41775, 190506421.77863, -118262753.40162,\n\t\t108199328.45091, -45247957.63323, 27272084.41143, -4125106.01144,\n\t\t2583469.66051, 1024678.12935, -22702.55109, 199269.51481,\n\t\t-15783.14789, 5564.52481, -427.22231, -6330.86079,\n\t\t-97.50757, -204.32241,\n\t\t-9060.54822, 156661.77631, -47791.83678, 59725.58975,\n\t\t-8807.74881, -92.38886,\n\t\t-28886.11572, -244419.59744, -53336.36915, -92232.16479,\n\t\t-8724.89354, -2446.76739,\n\t\t889.71335, 936.51108,\n\t\t494.80305, 2252.83602,\n\t\t-18326.60823, -25443.13554, -3130.86382, -5426.29135,\n\t\t23494.08846, 91.28882, 4664.14726, 1552.06143,\n\t\t-8090.43357, 2843.48366, -1445.73506, 1023.11482,\n\t\t11664.20863, -7020.08612, 3100.21504, -64.16577,\n\t\t-9724.97938, -12261.47155, -3008.08276, -1523.06301,\n\t\t6788.74046, 10708.27853, 343.09434, 1701.52760,\n\t\t14743.99857, -4781.96586,\n\t\t-15922236.41469, 1825172.51825, -14006084.36972, 10363332.64447,\n\t\t-979550.91360, 6542446.18797, 1160614.26915, 570804.88172,\n\t\t89912.68112, -171247.08757, -13899.52899, -6182.25841,\n\t\t-240.64725, 412.42581, -66.24510, 71.30726,\n\t\t-15.81125, -15.76899,\n\t\t-21.85515, -102.12717, -10.18287, -19.38527,\n\t\t1.43749, -3.87533,\n\t\t1.97109, 0.20138,\n\t\t0.32012, 1.02928,\n\t\t-40.22077, 20.80684, -15.69766, 9.63663,\n\t\t-1.26010, 0.56197,\n\t\t0.08592, 0.18540,\n\t\t-0.07303, 0.03897,\n\t\t0.01438, -0.08809,\n\t\t0.15479, 0.10354,\n\t\t0.19052, 2.08790,\n\t\t405480.24475, -607986.83623, 582811.58843, -915111.10396,\n\t\t258696.21023, -493391.09443, 23403.62628, -119503.67282,\n\t\t-4036.86957, -9766.17805, -663.93268, 2544.07799,\n\t\t40.36638, 76.26390, 246.67716, -13.93440,\n\t\t0.12403, 0.25378,\n\t\t0.14004, -0.08501,\n\t\t0.07904, 0.12731,\n\t\t1.02117, -1.34663, 0.25142, -0.26903,\n\t\t0.18135, -0.57683, -0.30092, -0.36121,\n\t\t-0.09623, 0.05873,\n\t\t-0.05803, 0.02869,\n\t\t-0.01194, 0.04983,\n\t\t0.04250, 0.04894,\n\t\t1.34245, 0.70137, 0.24217, 0.25912,\n\t\t-0.32759, -0.03575,\n\t\t0.06780, -0.41277,\n\t\t0.43865, 0.17857,\n\t\t-763933.02226, 465658.17048, -1082753.91241, 593319.68634,\n\t\t-553911.89340, 274748.95145, -122250.71547, 56608.95768,\n\t\t-9914.17300, 2988.43709, 707.94605, -765.01470,\n\t\t52.73260, -34.22263, -43.58300, -38.43647,\n\t\t-4.95939, -1.97173, -1.04406, -0.13072,\n\t\t-0.34281, 4.75202, -0.35513, 0.93597,\n\t\t-0.54380, 0.70536,\n\t\t84.83116, 102.93003, 26.34884, 48.57746,\n\t\t0.02853, 2.91676,\n\t\t-8.07116, 1.66613,\n\t\t-2.07908, 11.62592,\n\t\t6.64704, 0.98291,\n\t\t-1.19192, 0.93791,\n\t\t0.18822, 0.00900,\n\t\t-0.03181, -0.02000,\n\t\t0.02755, -0.01398,\n\t\t-0.03971, -0.03756,\n\t\t0.13454, -0.04193,\n\t\t-18672.98484, 28230.75834, -28371.58823, 26448.45214,\n\t\t-13352.09393, 7461.71279, -2609.33578, 726.50321,\n\t\t-309.72942, -86.71982, 12.48589, -9.69726,\n\t\t1.82185, 14.92220,\n\t\t-0.04748, 0.42510,\n\t\t-0.20047, 0.00154,\n\t\t0.00176, -0.26262,\n\t\t0.78218, -0.73243, 0.23694, -0.03132,\n\t\t-0.00290, -0.03678,\n\t\t14.03094, 4.25948, 0.79368, -0.78489,\n\t\t-2.30962, 2.31946,\n\t\t0.00158, -0.04125,\n\t\t-0.01387, 0.28503, 0.00892, 0.05154,\n\t\t0.00184, -0.01727,\n\t\t-0.00889, 0.03526,\n\t\t-0.00521, -0.02093,\n\t\t0.00200, 0.04872,\n\t\t-0.02163, 0.00578,\n\t\t20699.27413, -2175.57827, 31177.33085, 4572.02063,\n\t\t15486.28190, 8747.74091, 2455.51737, 3839.83609,\n\t\t51.31433, 507.91086, 15.90082, 44.75942,\n\t\t-0.98374, -2.64477, 2.52336, -3.09203,\n\t\t-0.08897, -0.00083,\n\t\t-15.91892, 0.72597, 14.04523, -3.16525,\n\t\t4.33379, -30.82980, 0.40462, -0.75845,\n\t\t13.14831, -0.02721,\n\t\t-0.01779, 0.00481,\n\t\t0.42365, -0.09048, 0.08653, 0.04391,\n\t\t0.00846, 0.01082,\n\t\t-0.04736, 0.02308,\n\t\t6282.21778, -4952.70286, 7886.57505, -5328.36122,\n\t\t3113.76826, -1696.84590, 330.70011, -155.51989,\n\t\t-18.31559, -3.90798, -3.11242, 1.87818,\n\t\t-1.05578, 0.11198,\n\t\t0.05077, -0.01571,\n\t\t2.41291, 2.40568,\n\t\t-0.01136, -0.00076,\n\t\t-0.00392, -0.02774,\n\t\t634.85065, -352.21937, 674.31665, -260.73473,\n\t\t199.16422, -28.44198, 6.54187, 6.44960,\n\t\t-1.55155, 0.29755, 0.16977, 0.17540,\n\t\t-0.02652, 0.03726,\n\t\t-0.00623, 0.11777, -0.00933, 0.02602,\n\t\t-0.13943, -0.24818,\n\t\t0.02876, -0.01463,\n\t\t-0.07166, 0.06747, -0.01578, 0.01628,\n\t\t0.00233, -0.00686,\n\t\t0.00431, -0.00276,\n\t\t0.21774, 0.09735, 0.07894, 0.07279,\n\t\t-0.01300, -0.00268,\n\t\t0.10824, 0.09435, 0.00720, 0.02111,\n\t\t-0.01960, 0.06154,\n\t\t0.56867, -0.07544, 0.18210, 0.06343,\n\t\t-0.00906, 0.01942,\n\t\t-0.00850, -0.00351,\n\t\t-0.06988, 0.01713, -0.01110, -0.00663,\n\t\t0.00196, -0.02064,\n\t\t-0.00008, 0.00043,\n\t\t0.00375, 0.00084,\n\t\t-0.00279, 0.00100,\n\t\t0.00271, -0.02017, -0.00074, -0.00357,\n\t\t0.03793, -0.10108, -0.01083, -0.03952,\n\t\t0.00030, 0.00012,\n\t\t0.01576, 0.01142, 0.00351, 0.00277,\n\t\t0.01409, -0.00774,\n\t\t-0.00065, 0.01895,\n\t\t0.07350, -0.02519, 0.01528, -0.01057,\n\t\t-0.00099, -0.00295,\n\t\t0.21347, -0.17458, 0.04940, -0.02757,\n\t\t-0.06243, 0.05203,\n\t\t0.01055, -0.00109,\n\t\t0.00003, -0.04201,\n\t\t-0.00263, 0.02387,\n\t\t0.00886, -0.01168,\n\t\t0.00479, 0.00204,\n\t\t-0.00239, 0.00022,\n\t\t-0.00223, -0.02029,\n\t\t-0.14130, -0.15237, -0.01827, -0.04877,\n\t\t0.12104, 0.06796,\n\t\t0.16379, 0.31892,\n\t\t-0.15605, 0.07048,\n\t\t-0.00700, 0.07481,\n\t\t-0.00370, -0.00142,\n\t\t-0.00446, 0.00329,\n\t\t-0.00018, 0.00117,\n\t\t-0.00910, 0.00510,\n\t\t-0.00055, -0.00114,\n\t\t0.04131, -0.04013,\n\t\t-0.13238, 0.02680,\n\t\t-0.10369, 1.38709, 0.35515, 0.41437,\n\t\t-0.01327, -0.02692,\n\t\t38.02603, 13.38166, 15.33389, -7.40145,\n\t\t-8.55293, -0.13185, -0.03316, 0.13016,\n\t\t0.04428, -1.60953,\n\t\t-12.87829, -76.97922, -23.96039, -22.45636,\n\t\t14.83309, 14.09854, 0.24252, 0.13850,\n\t\t-4.16582, 4.08846,\n\t\t0.00751, -0.00051,\n\t\t0.03456, 0.02900,\n\t\t0.01625, -0.04660,\n\t\t0.01390, -0.00530,\n\t\t0.01665, -0.04571,\n\t\t40.90768, -14.11641, 7.46071, -58.07356,\n\t\t-0.27859, -1.33816, 23.76074, -0.03124,\n\t\t-0.27860, 0.13654, -0.04800, 0.05375,\n\t\t4.38091, 4.39337,\n\t\t0.02233, 0.00514,\n\t\t-0.25616, -0.54439,\n\t\t-0.05155, 0.11553,\n\t\t0.02944, -0.00818,\n\t\t0.00570, 0.00119,\n\t\t-0.00733, -0.02700,\n\t\t-0.23759, -0.08712, -0.12433, 0.07397,\n\t\t0.20629, 0.60251, 0.56512, 0.14790,\n\t\t0.07778, 0.11614\n\t],\n\targ_tbl: [\n\t\t0, 7,\n\t\t2, 3, 7, -9, 9, 0,\n\t\t2, 4, 7, -12, 9, 0,\n\t\t2, 4, 7, -8, 8, 0,\n\t\t3, -4, 7, 5, 8, 4, 9, 0,\n\t\t3, 3, 7, -5, 8, -1, 9, 0,\n\t\t2, 1, 6, -8, 9, 1,\n\t\t2, 3, 8, -5, 9, 1,\n\t\t2, 1, 6, -9, 9, 2,\n\t\t3, 6, 7, -6, 8, -8, 9, 0,\n\t\t3, 4, 7, -10, 8, 4, 9, 2,\n\t\t2, 3, 7, -8, 9, 0,\n\t\t1, 1, 9, 7,\n\t\t2, 3, 7, -10, 9, 0,\n\t\t3, 4, 7, -10, 8, 2, 9, 2,\n\t\t3, 5, 7, -12, 8, 2, 9, 0,\n\t\t2, 1, 6, -7, 9, 0,\n\t\t1, 1, 8, 3,\n\t\t2, 1, 6, -10, 9, 0,\n\t\t3, 6, 7, -12, 8, 2, 9, 0,\n\t\t3, 5, 7, -10, 8, 2, 9, 0,\n\t\t2, 5, 7, -13, 9, 0,\n\t\t2, 4, 7, -10, 9, 0,\n\t\t2, 3, 7, -7, 9, 0,\n\t\t1, 2, 9, 7,\n\t\t2, 3, 7, -11, 9, 0,\n\t\t3, 4, 7, -9, 8, 4, 9, 2,\n\t\t3, 3, 7, -5, 8, 1, 9, 2,\n\t\t2, 1, 6, -6, 9, 0,\n\t\t2, 7, 8, -13, 9, 0,\n\t\t2, 3, 8, -2, 9, 1,\n\t\t3, 1, 7, -5, 8, 2, 9, 1,\n\t\t3, 6, 7, -12, 8, 3, 9, 1,\n\t\t2, 5, 7, -12, 9, 1,\n\t\t2, 4, 7, -9, 9, 1,\n\t\t2, 2, 7, -3, 9, 1,\n\t\t1, 1, 7, 0,\n\t\t1, 3, 9, 5,\n\t\t2, 3, 7, -12, 9, 1,\n\t\t3, 5, 7, -9, 8, 2, 9, 0,\n\t\t3, 4, 7, -7, 8, 2, 9, 1,\n\t\t3, 3, 7, -5, 8, 2, 9, 0,\n\t\t3, 2, 7, -5, 8, 5, 9, 0,\n\t\t2, 1, 6, -5, 9, 0,\n\t\t2, 3, 8, -1, 9, 2,\n\t\t2, 1, 6, -12, 9, 0,\n\t\t3, 2, 7, -7, 8, 1, 9, 0,\n\t\t2, 5, 7, -11, 9, 0,\n\t\t2, 4, 7, -8, 9, 0,\n\t\t2, 2, 7, -2, 9, 0,\n\t\t1, 4, 9, 7,\n\t\t3, 2, 7, -8, 8, 2, 9, 0,\n\t\t3, 5, 7, -9, 8, 3, 9, 0,\n\t\t3, 4, 7, -9, 8, 6, 9, 0,\n\t\t3, 3, 7, -5, 8, 3, 9, 1,\n\t\t2, 2, 7, -1, 8, 1,\n\t\t2, 3, 8, -9, 9, 0,\n\t\t2, 9, 8, -9, 9, 0,\n\t\t2, 1, 6, -13, 9, 0,\n\t\t3, 2, 7, -5, 8, -3, 9, 0,\n\t\t2, 6, 7, -13, 9, 1,\n\t\t2, 5, 7, -10, 9, 0,\n\t\t2, 4, 7, -7, 9, 0,\n\t\t2, 3, 7, -4, 9, 0,\n\t\t1, 5, 9, 7,\n\t\t3, 6, 7, -9, 8, 1, 9, 1,\n\t\t3, 4, 7, -5, 8, 1, 9, 1,\n\t\t3, 3, 7, -3, 8, 1, 9, 0,\n\t\t2, 1, 6, -3, 9, 2,\n\t\t2, 3, 8, -10, 9, 0,\n\t\t2, 1, 8, 4, 9, 0,\n\t\t2, 5, 8, -2, 9, 0,\n\t\t2, 11, 8, -11, 9, 0,\n\t\t3, 1, 7, -9, 8, 5, 9, 0,\n\t\t2, 6, 7, -12, 9, 0,\n\t\t2, 5, 7, -9, 9, 0,\n\t\t2, 4, 7, -6, 9, 0,\n\t\t2, 3, 7, -3, 9, 0,\n\t\t1, 6, 9, 6,\n\t\t2, 2, 7, -12, 9, 0,\n\t\t3, 6, 7, -9, 8, 2, 9, 0,\n\t\t3, 3, 7, -12, 8, 3, 9, 0,\n\t\t3, 4, 7, -10, 8, -3, 9, 1,\n\t\t3, 3, 7, -3, 8, 2, 9, 0,\n\t\t2, 1, 6, -2, 9, 2,\n\t\t2, 1, 8, 5, 9, 0,\n\t\t2, 13, 8, -13, 9, 1,\n\t\t3, 2, 7, -9, 8, 1, 9, 0,\n\t\t2, 6, 7, -11, 9, 0,\n\t\t2, 5, 7, -8, 9, 0,\n\t\t2, 4, 7, -5, 9, 0,\n\t\t2, 3, 7, -2, 9, 0,\n\t\t1, 7, 9, 7,\n\t\t3, 6, 7, -9, 8, 3, 9, 0,\n\t\t2, 1, 6, -1, 9, 4,\n\t\t2, 3, 8, 3, 9, 0,\n\t\t2, 7, 7, -13, 9, 1,\n\t\t2, 3, 7, -1, 9, 0,\n\t\t2, 2, 7, 2, 9, 0,\n\t\t1, 8, 9, 6,\n\t\t3, 7, 7, -9, 8, 1, 9, 0,\n\t\t1, 1, 6, 0,\n\t\t1, 3, 7, 0,\n\t\t2, 2, 7, 3, 9, 0,\n\t\t1, 9, 9, 5,\n\t\t3, 1, 7, -10, 8, 3, 9, 0,\n\t\t3, 2, 7, -12, 8, 3, 9, 1,\n\t\t2, 1, 6, 1, 9, 0,\n\t\t3, 1, 7, -1, 8, 8, 9, 0,\n\t\t2, 3, 7, 1, 9, 1,\n\t\t2, 2, 7, 4, 9, 0,\n\t\t2, 1, 7, 7, 9, 0,\n\t\t2, 4, 8, 4, 9, 1,\n\t\t2, 12, 8, -8, 9, 0,\n\t\t3, 1, 7, -10, 8, 2, 9, 1,\n\t\t2, 1, 6, 2, 9, 0,\n\t\t1, 11, 9, 2,\n\t\t2, 12, 8, -7, 9, 0,\n\t\t3, 1, 7, -10, 8, 1, 9, 1,\n\t\t1, 4, 7, 0,\n\t\t1, 12, 9, 0,\n\t\t2, 6, 8, 3, 9, 0,\n\t\t3, 1, 7, -2, 8, -12, 9, 0,\n\t\t3, 7, 7, -7, 8, 2, 9, 1,\n\t\t2, 2, 6, -4, 9, 1,\n\t\t1, 13, 9, 0,\n\t\t2, 10, 8, -2, 9, 1,\n\t\t2, 4, 7, 2, 9, 0,\n\t\t2, 2, 6, -3, 9, 0,\n\t\t2, 2, 7, 8, 9, 1,\n\t\t2, 8, 8, 2, 9, 0,\n\t\t1, 5, 7, 1,\n\t\t2, 4, 7, 3, 9, 0,\n\t\t2, 3, 7, 6, 9, 0,\n\t\t2, 1, 5, -6, 9, 0,\n\t\t3, 2, 7, 8, 8, -3, 9, 0,\n\t\t3, 1, 7, 6, 8, 3, 9, 0,\n\t\t2, 6, 8, 6, 9, 0,\n\t\t3, 8, 7, -7, 8, 2, 9, 0,\n\t\t2, 9, 7, -11, 9, 0,\n\t\t2, 5, 7, 1, 9, 1,\n\t\t2, 4, 7, 4, 9, 0,\n\t\t2, 2, 6, -1, 9, 0,\n\t\t3, 2, 6, -1, 7, 2, 9, 0,\n\t\t2, 2, 7, 10, 9, 0,\n\t\t2, 1, 7, 13, 9, 0,\n\t\t2, 8, 7, -7, 9, 0,\n\t\t2, 7, 7, -4, 9, 0,\n\t\t2, 6, 7, -1, 9, 0,\n\t\t2, 5, 7, 3, 9, 0,\n\t\t2, 4, 7, 5, 9, 0,\n\t\t1, 2, 6, 0,\n\t\t2, 1, 5, -4, 9, 1,\n\t\t3, 1, 6, 9, 8, -5, 9, 0,\n\t\t2, 1, 5, -3, 9, 4,\n\t\t2, 1, 5, -2, 9, 4,\n\t\t3, 9, 7, -9, 8, 6, 9, 0,\n\t\t2, 8, 7, -4, 9, 0,\n\t\t2, 7, 7, -1, 9, 0,\n\t\t2, 1, 6, 3, 9, 0,\n\t\t2, 2, 6, 3, 9, 0,\n\t\t2, 1, 5, -1, 9, 3,\n\t\t3, 6, 7, -3, 8, 7, 9, 1,\n\t\t1, 1, 5, 0,\n\t\t2, 2, 6, 5, 9, 0,\n\t\t2, 1, 5, 1, 9, 0,\n\t\t2, 1, 5, 2, 9, 0,\n\t\t2, 1, 5, 3, 9, 0,\n\t\t2, 2, 5, -4, 9, 0,\n\t\t2, 2, 5, -3, 9, 0,\n\t\t2, 2, 5, -2, 9, 1,\n\t\t2, 2, 5, -1, 9, 1,\n\t\t1, 2, 5, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/pluto.js?");

/***/ }),

/***/ "./src/ptables/saturn.js":
/*!*******************************!*\
  !*** ./src/ptables/saturn.js ***!
  \*******************************/
/*! exports provided: saturnPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saturnPTable\", function() { return saturnPTable; });\nconst saturnPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 0, 1, 0, 8, 18, 9, 5, 0],\n\tmax_power_of_t: 7,\n\tdistance: 9.5575813548599999e+00,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t1788381.26240, 2460423.68044, 1370113.15868, 415406.99187,\n\t\t72040.39885, 12669.58806, 439960754.85333, 180256.80433,\n\t\t18.71177, -40.37092,\n\t\t66531.01889, -195702.70142, 57188.02694, -179110.60982,\n\t\t-19803.06520, -58084.15705, -9055.13344, -31146.10779,\n\t\t11245.43286, -3247.59575, 459.48670, 2912.82402,\n\t\t-4.06749, -13.53763,\n\t\t-30.55598, -4.51172,\n\t\t1.48832, 0.37139,\n\t\t597.35433, 1193.44545, -297.50957, 976.38608,\n\t\t-263.26842, 34.84354, -6.77785, -29.92106,\n\t\t-0.16325, -0.18346,\n\t\t-0.15364, -0.08227,\n\t\t0.20180, 0.02244,\n\t\t0.04672, -0.29867,\n\t\t-0.04143, -0.00760,\n\t\t-0.17046, -0.00778,\n\t\t0.04200, 0.23937, -0.00098, -0.05236,\n\t\t-0.02749, -0.01813,\n\t\t0.00637, 0.01256,\n\t\t-0.04506, 0.04448,\n\t\t-0.00105, 0.06224,\n\t\t0.01157, 0.17057, -0.03214, 0.18178,\n\t\t-0.22059, -0.01472,\n\t\t-0.24213, 0.04309, 0.03436, 0.44873,\n\t\t0.01350, -0.01931,\n\t\t-0.80618, -0.56864, 0.29223, -0.03101,\n\t\t0.04171, 0.02264,\n\t\t-0.01264, -0.01645,\n\t\t0.01774, 0.06374,\n\t\t-0.01925, -0.03552,\n\t\t0.10473, -0.04119,\n\t\t0.08045, 0.04635,\n\t\t-3.01112, -9.26158, 8.13745, 1.88838,\n\t\t-0.15184, 0.16898,\n\t\t-0.22091, 0.29070, -0.03259, 0.06938,\n\t\t-0.08499, -0.21688, 0.01848, -0.05594,\n\t\t0.50100, -0.00027, 0.13300, 0.12055,\n\t\t0.03039, 0.03854,\n\t\t-1.55287, 2.55618, -0.45497, -0.29895,\n\t\t-0.93268, 0.83518,\n\t\t-0.32785, 7.03878, -1.66649, 2.75564,\n\t\t-0.29459, 0.01050,\n\t\t0.08293, -0.03161,\n\t\t-0.12750, -0.04359,\n\t\t0.04217, 0.07480,\n\t\t-114.43467, 49.47867, -66.52340, -26.27841,\n\t\t15.48190, -13.06589, 3.28365, 5.02286,\n\t\t-0.17155, -0.07404,\n\t\t0.00924, -0.07407,\n\t\t-0.02922, 0.06184,\n\t\t108.04882, 86.09791, -155.12793, 208.10044,\n\t\t-311.72810, -268.92703, 74.57561, -420.03057,\n\t\t-0.07893, 0.09246,\n\t\t-0.66033, -0.39026, -0.13816, -0.08490,\n\t\t-36.79241, -78.88254, 71.88167, -68.05297,\n\t\t51.71616, 65.77970, -43.59328, 23.51076,\n\t\t-0.02029, -0.32943,\n\t\t-8.82754, 1.48646, -3.12794, 2.12866,\n\t\t-0.06926, 0.44979,\n\t\t0.00621, -0.51720,\n\t\t-3.82964, -1.48596, -0.11277, -3.21677,\n\t\t0.81705, -0.19487,\n\t\t-0.06195, 0.10005, -0.02208, 0.00108,\n\t\t0.00455, -0.03825,\n\t\t0.01217, -0.00599,\n\t\t-0.17479, -0.47290, 0.85469, 1.12548,\n\t\t-0.80648, -0.44134,\n\t\t-0.01559, -0.07061,\n\t\t0.01268, -0.01773,\n\t\t0.01308, -0.03461,\n\t\t-0.71114, 1.97680, -0.78306, -0.23052,\n\t\t0.94475, -0.10743,\n\t\t0.18252, -8.03174,\n\t\t0.00734, 0.04779,\n\t\t0.12334, -0.03513,\n\t\t0.01341, 0.02461,\n\t\t0.02047, -0.03454,\n\t\t0.02169, -0.01921,\n\t\t-1.12789, 0.09304, 0.14585, 0.36365,\n\t\t0.03702, 0.10661, -0.00464, -1.72706,\n\t\t-0.00769, -0.04635,\n\t\t-0.01157, 0.00099,\n\t\t10.92646, 1.96174, 2.91142, 4.74585,\n\t\t-0.29832, 0.75543,\n\t\t0.05411, 1.05850,\n\t\t0.38846, -0.16265,\n\t\t1.52209, 0.12185, 0.18650, 0.35535,\n\t\t-278.33587, -82.58648, -160.00093, -225.55776,\n\t\t35.17458, -77.56672, 10.61975, 3.33907,\n\t\t0.06090, 2.17429,\n\t\t-4.32981, -5.84246, 11.43116, 20.61395,\n\t\t-0.65772, 1.28796,\n\t\t1224.46687, -3113.15508, 3798.33409, -137.28735,\n\t\t-256.89302, 2227.35649, -779.78215, -260.37372,\n\t\t11.73617, -13.25050, -0.75248, -2.87527,\n\t\t-8.38102, 17.21321,\n\t\t-61784.69616, 39475.02257, -54086.68308, 54550.85490,\n\t\t-16403.69351, 29602.70098, 14672.06363, 16234.17489,\n\t\t15702.37109, -22086.30300, -22889.89844, -1245.88352,\n\t\t1.48864, 19.75000, 0.78646, 3.29343,\n\t\t-1058.13125, 4095.02368, -2793.78506, 1381.93282,\n\t\t-409.19381, -772.54270, 161.67509, -34.15910,\n\t\t-514.27437, 27.34222, -311.04046, 48.01030,\n\t\t-43.36486, 16.19535, -0.73816, -0.81422,\n\t\t287.32231, -110.44135, 200.43610, 37.98170,\n\t\t17.73719, 34.40023, -2.46337, 1.48125,\n\t\t0.09042, -0.11788,\n\t\t0.37284, 0.51725, 0.00597, 0.14590,\n\t\t-0.01536, 0.00980,\n\t\t0.00721, 0.02023,\n\t\t0.00027, 0.02451,\n\t\t-0.72448, -0.71371, 0.29322, 0.18359,\n\t\t0.72719, -0.37154, 0.14854, -0.02530,\n\t\t0.23052, 0.04258,\n\t\t4.82082, 0.01885, 3.11279, -0.63338,\n\t\t0.10559, -0.02146,\n\t\t-0.01672, 0.03412,\n\t\t0.00605, 0.06415,\n\t\t-0.89085, 1.51929, -0.36571, 0.39317,\n\t\t12.05250, -3.79392, 3.96557, -3.51272,\n\t\t-0.17953, 12.30669,\n\t\t-0.05083, -0.11442,\n\t\t0.02013, -0.02837,\n\t\t-0.02087, -0.01599,\n\t\t0.49190, 0.30360, 0.01316, 0.17649,\n\t\t0.21193, -0.09149, -0.07173, -0.05707,\n\t\t4.24196, -1.25155, 1.81336, 0.68887,\n\t\t-0.01675, 0.20772,\n\t\t-0.04117, -0.03531,\n\t\t-0.02690, -0.02766,\n\t\t37.54264, 10.95327, 8.05610, 30.58210,\n\t\t-12.68257, 1.72831, 0.13466, -3.27007,\n\t\t0.01864, -0.00595,\n\t\t0.03676, 0.14857, -0.07223, 0.06179,\n\t\t0.44878, -1.64901, -20.06001, 0.63384,\n\t\t-4.97849, 4.78627, 29.87370, 7.29899,\n\t\t0.00047, -0.00155,\n\t\t0.00314, 0.01425,\n\t\t-0.17842, -0.08461,\n\t\t-1.61020, -8.47710, 6.85048, -4.38196,\n\t\t1.05809, 2.68088,\n\t\t-0.01027, -0.00833,\n\t\t0.06834, -0.04205,\n\t\t0.03330, -0.01271,\n\t\t0.01301, -0.01358,\n\t\t0.03537, 0.03612, 0.02962, 0.62471,\n\t\t-0.30400, -0.64857,\n\t\t0.01773, 0.01890,\n\t\t0.01426, -0.00226,\n\t\t-0.50957, -0.01955, -0.09702, 1.09983,\n\t\t0.64387, -0.02755,\n\t\t0.26604, 0.30684, 0.06354, 0.05114,\n\t\t-0.00058, -0.04672,\n\t\t-0.00828, 0.00712,\n\t\t-0.00440, 0.00029,\n\t\t-0.01601, 0.03566,\n\t\t0.13398, -0.02666,\n\t\t-0.06752, -0.43044, 0.07172, -0.01999,\n\t\t-0.01761, -0.05357,\n\t\t0.06104, 0.29742, -0.08785, 0.05241,\n\t\t-6.57162, -4.20103, 0.03199, -6.46187,\n\t\t1.32846, -0.51137,\n\t\t0.06358, 0.37309,\n\t\t-1.46946, 2.34981,\n\t\t-0.18712, 0.11618,\n\t\t240.62965, -107.21962, 219.81977, 84.04246,\n\t\t-62.22931, 68.35902, -9.48460, -32.62906,\n\t\t5.57483, -1.82396, 1.00095, -0.39774,\n\t\t7.87054, 11.45449,\n\t\t-432.67155, 55064.72398, 12444.62359, 54215.28871,\n\t\t8486.03749, 12297.48243, -333.27968, 1147.93192,\n\t\t1403.73797, 990.40885, -3.84938, -722.43963,\n\t\t16.83276, 96.48787, 7.04834, 38.22208,\n\t\t0.63843, 2.61007,\n\t\t230.73221, 171.64166, 1.96751, 287.80846,\n\t\t-85.21762, 31.33649, -2.25739, -11.28441,\n\t\t0.04699, 0.06555,\n\t\t-0.08887, 1.70919, 0.09477, 0.26291,\n\t\t-0.15490, 0.16009,\n\t\t1.93274, 1.01953, 0.36380, 1.29582,\n\t\t-0.13911, 0.14169,\n\t\t-0.00491, -0.00030,\n\t\t-0.08908, -0.10216,\n\t\t-0.03265, -0.03889,\n\t\t0.40413, -1.12715, -0.94687, -0.04514,\n\t\t0.02487, -0.01048,\n\t\t0.39729, 2.82305, -0.61100, 1.11728,\n\t\t-0.13083, -0.04965,\n\t\t-0.00602, -0.02952,\n\t\t-6.13507, 13.73998, -15.70559, -1.28059,\n\t\t2.64422, -9.33798, 3.26470, 1.56984,\n\t\t-0.00572, 0.09992,\n\t\t-8.80458, -8.23890, -11.51628, 9.47904,\n\t\t11.31646, 4.29587,\n\t\t-2.41367, -0.05883, -0.80022, -1.02706,\n\t\t0.21461, -0.06864,\n\t\t0.01882, 0.01798,\n\t\t0.27614, -0.01007, 0.04362, 0.07560,\n\t\t0.05519, 0.23435,\n\t\t-0.09389, 0.01613,\n\t\t0.01298, 0.04691,\n\t\t-0.02665, -0.03582,\n\t\t0.60080, -4.28673, 1.87316, -1.05840,\n\t\t0.13248, 0.40887,\n\t\t-0.67657, 0.67732, 0.05522, 0.07812,\n\t\t-0.17707, -0.07510,\n\t\t0.24885, 10.63974, -7.40226, -2.33827,\n\t\t2.75463, -32.51518,\n\t\t0.05140, 0.01555,\n\t\t180.43808, 263.28252, 384.50646, -76.53434,\n\t\t-93.50706, -220.50123, -81.91610, 103.92061,\n\t\t30.90305, -2.89292,\n\t\t-0.06634, -0.37717, -0.01945, -0.05936,\n\t\t29.27877, -59.73705, 35.86569, -18.36556,\n\t\t3.88812, 4.82090, -0.70903, 0.06615,\n\t\t0.01558, -0.01854,\n\t\t0.16209, 0.12682, 0.02508, 0.02406,\n\t\t-0.03078, -0.01737, -0.00033, -0.00020,\n\t\t0.01023, 0.05972,\n\t\t-0.03373, -0.07289,\n\t\t-2.08162, -0.14717, -0.64233, -0.75397,\n\t\t0.11752, -0.09202,\n\t\t4.42981, -4.19241, 5.02542, 5.03467,\n\t\t-4.22983, 2.80794,\n\t\t3.03016, -2.74373, -1.11490, -2.72378,\n\t\t-0.63131, 0.74864,\n\t\t-0.00759, -0.00675,\n\t\t0.03615, -0.01806,\n\t\t-2.71920, -1.50954, 0.54479, -1.92088,\n\t\t0.66427, 0.32228,\n\t\t-2.55188, -0.65332, -2.73798, 2.10182,\n\t\t1.54407, 3.01357,\n\t\t38.76777, 23.54578, 27.29884, -14.93005,\n\t\t-7.50931, -5.66773, 0.30142, 1.52416,\n\t\t0.00634, 0.09697, -0.00748, 0.01433,\n\t\t0.02936, 0.53228, -0.03603, 0.06345,\n\t\t0.30816, -1.07925, 0.46709, -0.21568,\n\t\t0.01663, 0.10810,\n\t\t-0.42511, 0.35872, -0.19662, -6.74031,\n\t\t1.05776, 1.86205, 1.08919, 0.10483,\n\t\t-0.03368, -0.21535,\n\t\t0.07556, -0.27104, 0.05142, -0.03812,\n\t\t1.20189, -1.36782, 1.35764, 1.39387,\n\t\t-1.19124, 0.77347,\n\t\t-0.54760, -0.26295, -0.07473, 0.23043,\n\t\t2.82621, -0.23524, 0.47352, -0.81672,\n\t\t-0.08515, 0.04700,\n\t\t0.55355, -0.40138, 0.22255, 0.12236,\n\t\t-0.09110, 0.31982, 0.39404, -0.17898,\n\t\t-0.00056, 0.00014,\n\t\t-0.02012, 0.03102,\n\t\t0.43236, -0.10037, -0.00961, 0.07440,\n\t\t-0.07076, -1.97272,\n\t\t0.25555, -0.21832, -0.00837, -0.08393,\n\t\t0.01531, 0.00627,\n\t\t0.33193, 0.70765, -0.43556, 0.28542,\n\t\t-0.23190, -0.04293, -0.08062, 0.13427,\n\t\t0.23763, -0.17092, 0.09259, 0.05155,\n\t\t0.08065, -0.11943,\n\t\t-0.02174, -0.68899,\n\t\t-0.01875, -0.01746,\n\t\t0.13604, 0.29280, -0.17871, 0.11799,\n\t\t0.02003, 0.04065,\n\t\t0.01343, -0.06060,\n\t\t-0.01290, -0.26068,\n\t\t-0.09033, 0.02649,\n\t\t-0.00092, -0.03094,\n\t\t-0.00770, -0.10447,\n\t\t-0.04113, 0.01259,\n\t\t-0.00469, -0.04346,\n\t\t-0.00010, 0.06547\n\t],\n\tlat_tbl: [\n\t\t-567865.62548, -796277.29029, -410804.00791, -91793.12562,\n\t\t-6268.13975, 398.64391, -710.67442, 175.29456,\n\t\t-0.87260, 0.18444,\n\t\t-1314.88121, 20709.97394, -1850.41481, 20670.34255,\n\t\t-896.96283, 6597.16433, -179.80702, 613.45468,\n\t\t17.37823, -13.62177, -0.36348, 12.34740,\n\t\t0.47532, 0.48189,\n\t\t0.27162, -0.20655,\n\t\t-0.23268, 0.05992,\n\t\t46.94511, 15.78836, 21.57439, 23.11342,\n\t\t-0.25862, 5.21410, -0.22612, -0.05822,\n\t\t-0.00439, -0.01641,\n\t\t-0.01108, -0.00608,\n\t\t0.00957, 0.00272,\n\t\t-0.00217, 0.00001,\n\t\t-0.00534, -0.00545,\n\t\t0.00277, -0.00843,\n\t\t0.00167, -0.00794, 0.00032, -0.00242,\n\t\t-0.00002, -0.00041,\n\t\t-0.00025, 0.00031,\n\t\t0.00062, -0.00060,\n\t\t0.00083, 0.00032,\n\t\t0.00527, -0.00211, 0.00054, 0.00004,\n\t\t-0.02769, -0.01777,\n\t\t0.00247, 0.00097, 0.00020, -0.00232,\n\t\t0.00044, -0.00035,\n\t\t-0.00072, 0.01341, 0.00325, -0.01159,\n\t\t0.00079, -0.00078,\n\t\t-0.00009, 0.00066,\n\t\t0.00222, 0.00002,\n\t\t0.00013, -0.00161,\n\t\t0.01374, -0.05305,\n\t\t0.00478, -0.00283,\n\t\t0.16033, 0.13859, 0.33288, -0.16932,\n\t\t-0.00316, 0.00625,\n\t\t-0.00309, 0.01687, 0.00001, 0.00486,\n\t\t0.00401, -0.01805, -0.00048, -0.00407,\n\t\t-0.01329, 0.01311, -0.00591, 0.00166,\n\t\t0.00830, 0.00665,\n\t\t-0.80207, 0.22994, -0.34687, 0.08460,\n\t\t-0.11499, -0.01449,\n\t\t-0.01574, 0.78813, -0.03063, 0.28872,\n\t\t-0.00337, 0.01801,\n\t\t-0.01703, -0.00929,\n\t\t-0.00738, 0.03938,\n\t\t0.05616, -0.00516,\n\t\t-3.09497, 30.13091, -3.14968, 17.62201,\n\t\t-0.73728, 2.46962, -0.11233, 0.03450,\n\t\t-0.07837, -0.01573,\n\t\t-0.01595, 0.00394,\n\t\t0.00174, 0.01470,\n\t\t6.83560, -2.37594, 4.95125, 3.24711,\n\t\t2.44781, 5.17159, 1.99820, -2.38419,\n\t\t0.00840, 0.03614,\n\t\t-0.00209, -0.30407, -0.02681, -0.06128,\n\t\t1.50134, 11.82856, 4.39644, 6.98850,\n\t\t-4.17679, 5.73436, -9.66087, 1.98221,\n\t\t-0.29755, 0.08019,\n\t\t-0.24766, -8.54956, -1.74494, -3.36794,\n\t\t-0.32661, -0.00722,\n\t\t0.14141, 0.01023,\n\t\t-1.21541, -2.58470, 0.38983, -1.70307,\n\t\t0.31209, -0.10345,\n\t\t0.02593, 0.02178, 0.00289, 0.00393,\n\t\t-0.00236, -0.00373,\n\t\t-0.00270, -0.00049,\n\t\t-0.06282, -0.00443, -0.02439, -0.02254,\n\t\t-0.02220, 0.03532,\n\t\t-0.00072, 0.00010,\n\t\t-0.00049, -0.00112,\n\t\t0.00086, 0.00112,\n\t\t0.10135, -0.10972, 0.08357, 0.00155,\n\t\t0.04363, -0.00201,\n\t\t-0.01996, -0.01341,\n\t\t-0.00039, -0.00042,\n\t\t-0.00294, 0.00070,\n\t\t0.00005, -0.00027,\n\t\t0.00070, -0.00076,\n\t\t0.00234, -0.00239,\n\t\t-0.08365, -0.08531, -0.03531, 0.15012,\n\t\t-0.01995, -0.01731, -0.00370, -0.00745,\n\t\t-0.00315, -0.00079,\n\t\t-0.00120, -0.00145,\n\t\t-0.99404, -1.31859, 0.03584, -0.83421,\n\t\t0.10720, -0.05768,\n\t\t0.06664, -0.09338,\n\t\t-0.01814, -0.00003,\n\t\t-0.05371, -0.06458, -0.00100, -0.01298,\n\t\t-7.08710, -23.13374, 4.18669, -19.94756,\n\t\t4.85584, -3.37187, 0.58851, 0.31363,\n\t\t0.01994, 0.27494,\n\t\t-1.37112, 2.61742, 0.52477, -0.46520,\n\t\t-0.13183, 0.26777,\n\t\t836.90400, -484.65861, 815.99098, 236.54649,\n\t\t-32.38814, 288.95705, -68.17178, -18.87875,\n\t\t-1.79782, -3.68662, -1.27310, -0.65697,\n\t\t-3.67530, 2.10471,\n\t\t-13758.97795, 4807.62301, -14582.14552, 9019.73021,\n\t\t-3202.60105, 4570.16895, 2078.68911, 2892.62326,\n\t\t-2399.35382, 3253.16198, -8182.38152, -3588.77680,\n\t\t-0.16505, 1.08603, 0.53388, 0.87152,\n\t\t61.53677, 538.43813, -407.32927, 322.27446,\n\t\t-148.71585, -179.37765, 54.07268, -34.12281,\n\t\t-14.76569, -17.95681, -10.82061, -6.39954,\n\t\t-2.10954, 0.67063, 0.22607, -0.43648,\n\t\t20.90476, -45.48667, 30.39436, -14.20077,\n\t\t5.17385, 5.12726, -0.66319, 0.55668,\n\t\t0.02269, -0.00016,\n\t\t0.07811, 0.00111, 0.01603, 0.01020,\n\t\t-0.00107, 0.00494,\n\t\t-0.00077, -0.00084,\n\t\t-0.00196, 0.00081,\n\t\t-0.03776, 0.01286, -0.00652, -0.01450,\n\t\t0.05942, -0.08612, 0.01093, -0.01644,\n\t\t0.02147, -0.00592,\n\t\t0.36350, -0.00201, 0.14419, -0.10070,\n\t\t-0.00491, -0.01771,\n\t\t-0.00053, -0.00033,\n\t\t0.00146, 0.00048,\n\t\t0.00582, 0.04423, -0.00549, 0.00983,\n\t\t0.27355, -0.38057, 0.24001, -0.05441,\n\t\t-0.07706, 0.14269,\n\t\t-0.00059, -0.00154,\n\t\t-0.00013, -0.00088,\n\t\t-0.00046, 0.00029,\n\t\t-0.00276, -0.00507, 0.00075, -0.00076,\n\t\t0.01806, 0.00862, -0.00510, -0.01364,\n\t\t-0.00029, -0.12664, 0.03899, -0.03562,\n\t\t0.00318, 0.00514,\n\t\t0.00057, 0.00201,\n\t\t0.00028, 0.00014,\n\t\t-0.47022, -0.74561, 0.40155, -0.16471,\n\t\t-0.18445, 0.34425, -0.07464, -0.13709,\n\t\t-0.01018, -0.00748,\n\t\t-0.01210, -0.04274, -0.00579, -0.00692,\n\t\t-11.09188, -1.67755, -6.62063, -13.84023,\n\t\t12.75563, -6.73501, 8.31662, 5.40196,\n\t\t0.00052, 0.00034,\n\t\t0.00128, 0.00085,\n\t\t-0.02202, -0.00599,\n\t\t-0.33458, -1.65852, 1.47003, -1.02434,\n\t\t0.87885, 1.15334,\n\t\t-0.00241, -0.00721,\n\t\t0.03154, 0.00612,\n\t\t0.00318, -0.02521,\n\t\t0.00042, 0.00213,\n\t\t-0.01094, 0.05417, -0.03989, -0.00567,\n\t\t0.00123, -0.00244,\n\t\t0.00108, 0.00242,\n\t\t-0.00138, -0.00099,\n\t\t0.04967, 0.01643, -0.00133, 0.02296,\n\t\t0.12207, 0.05584,\n\t\t0.00437, -0.04432, -0.00176, -0.00922,\n\t\t-0.00252, 0.00326,\n\t\t-0.00020, -0.00050,\n\t\t-0.00263, -0.00084,\n\t\t-0.01971, 0.00297,\n\t\t0.03076, 0.01736,\n\t\t-0.01331, 0.01121, -0.00675, 0.00340,\n\t\t-0.00256, 0.00327,\n\t\t-0.00946, 0.03377, -0.00770, 0.00337,\n\t\t0.61383, 0.71128, -0.02018, 0.62097,\n\t\t-0.07247, 0.04418,\n\t\t-0.02886, -0.03848,\n\t\t-0.44062, 0.03973,\n\t\t-0.00999, -0.04382,\n\t\t57.94459, 117.45112, -71.22893, 126.39415,\n\t\t-62.33152, -31.90754, 12.17738, -16.46809,\n\t\t-1.13298, 0.08962, -0.20532, 0.16320,\n\t\t-1.55110, -1.44757,\n\t\t-3102.08749, -7452.61957, -5009.53858, -7216.29165,\n\t\t-2476.87148, -1880.58197, -574.49433, 227.45615,\n\t\t144.50228, 379.15791, 225.36130, -443.47371,\n\t\t-8.51989, -3.75208, -4.25415, -1.59741,\n\t\t-0.43946, -0.06595,\n\t\t150.42986, 6.54937, 87.67736, 92.32332,\n\t\t-21.97187, 29.87097, -4.21636, -5.72955,\n\t\t-0.03879, -0.01071,\n\t\t-0.45985, 0.02679, -0.02448, 0.02397,\n\t\t-0.06551, -0.01154,\n\t\t1.97905, -0.82292, 1.10140, 0.30924,\n\t\t0.03389, 0.14230,\n\t\t0.00003, 0.00119,\n\t\t-0.01117, 0.00665,\n\t\t-0.00132, -0.00576,\n\t\t-0.08356, 0.08556, -0.26362, -0.12450,\n\t\t0.00509, 0.00165,\n\t\t0.02591, 0.16200, -0.03318, 0.06463,\n\t\t-0.00899, -0.00462,\n\t\t0.00102, 0.00004,\n\t\t-0.73102, 0.08299, -0.52957, -0.35744,\n\t\t0.14119, -0.24903, 0.20843, 0.14143,\n\t\t0.00031, -0.00234,\n\t\t-0.42643, -2.02084, 1.58848, -1.57963,\n\t\t0.68418, 2.07749,\n\t\t-0.45888, 0.19859, -0.30277, -0.22591,\n\t\t0.11607, -0.09705,\n\t\t0.00040, 0.00431,\n\t\t-0.02683, 0.03158, -0.01302, -0.00541,\n\t\t0.01742, -0.00006,\n\t\t-0.02231, -0.01128,\n\t\t-0.00800, 0.02055,\n\t\t-0.00346, 0.00151,\n\t\t0.56732, -0.68995, 0.27701, -0.16748,\n\t\t0.01002, 0.00043,\n\t\t0.26916, -0.57751, 0.15547, -0.15825,\n\t\t-0.02074, -0.07722,\n\t\t-8.23483, -4.02022, 0.69327, -5.91543,\n\t\t1.72440, 1.02090,\n\t\t0.00024, -0.00053,\n\t\t20.03959, 14.79136, 76.43531, -14.42019,\n\t\t-7.82608, -69.96121, -54.94229, 23.55140,\n\t\t26.60767, 14.68275,\n\t\t0.05118, -0.10401, -0.00075, -0.01942,\n\t\t-3.84266, -26.23442, 10.20395, -14.77139,\n\t\t3.40853, 2.07297, -0.53348, 0.40635,\n\t\t0.00716, -0.00189,\n\t\t0.12472, -0.02903, 0.02254, -0.00183,\n\t\t-0.00175, -0.01522, 0.00003, -0.00339,\n\t\t0.00383, -0.00168,\n\t\t0.01327, -0.03657,\n\t\t-0.08458, -0.00115, -0.03991, -0.02629,\n\t\t0.00243, -0.00505,\n\t\t0.33875, -0.16744, 0.05183, 0.01744,\n\t\t-0.24427, 0.15271,\n\t\t0.37550, -0.17378, 0.09198, -0.27966,\n\t\t-0.22160, 0.16426,\n\t\t0.00032, -0.00310,\n\t\t-0.00022, -0.00144,\n\t\t-0.06170, -0.01195, -0.00918, 0.02538,\n\t\t0.03602, 0.03414,\n\t\t-0.14998, -0.44351, 0.45512, -0.11766,\n\t\t0.35638, 0.27539,\n\t\t5.93405, 10.55777, 12.42596, -1.82530,\n\t\t-2.36124, -6.04176, -0.98609, 1.67652,\n\t\t-0.09271, 0.03448, -0.01951, 0.00108,\n\t\t0.33862, 0.21461, 0.02564, 0.06924,\n\t\t0.01126, -0.01168, -0.00829, -0.00740,\n\t\t0.00106, -0.00854,\n\t\t-0.08404, 0.02508, -0.02722, -0.06537,\n\t\t0.01662, 0.11454, 0.06747, 0.00742,\n\t\t-0.01975, -0.02597,\n\t\t-0.00097, -0.01154, 0.00164, -0.00274,\n\t\t0.02954, -0.05161, -0.02162, -0.02069,\n\t\t-0.06369, 0.03846,\n\t\t0.00219, -0.01634, -0.04518, 0.06696,\n\t\t1.21537, 0.99500, 0.68376, -0.28709,\n\t\t-0.11397, -0.06468,\n\t\t0.00607, -0.00744, 0.01531, 0.00975,\n\t\t-0.03983, 0.02405, 0.07563, 0.00356,\n\t\t-0.00018, -0.00009,\n\t\t0.00172, -0.00331,\n\t\t0.01565, -0.03466, -0.00230, 0.00142,\n\t\t-0.00788, -0.01019,\n\t\t0.01411, -0.01456, -0.00672, -0.00543,\n\t\t0.00059, -0.00011,\n\t\t-0.00661, -0.00496, -0.01986, 0.01271,\n\t\t-0.01323, -0.00764, 0.00041, 0.01145,\n\t\t0.00378, -0.00137, 0.00652, 0.00412,\n\t\t0.01946, -0.00573,\n\t\t-0.00326, -0.00257,\n\t\t-0.00225, 0.00090,\n\t\t-0.00292, -0.00317, -0.00719, 0.00468,\n\t\t0.00245, 0.00189,\n\t\t0.00565, -0.00330,\n\t\t-0.00168, -0.00047,\n\t\t-0.00256, 0.00220,\n\t\t0.00180, -0.00162,\n\t\t-0.00085, -0.00003,\n\t\t-0.00100, 0.00098,\n\t\t-0.00043, 0.00007,\n\t\t-0.00003, -0.00013\n\t],\n\trad_tbl: [\n\t\t-38127.94034, -48221.08524, -20986.93487, -3422.75861,\n\t\t-8.97362, 53.34259, -404.15708, -0.05434,\n\t\t0.46327, 0.16968,\n\t\t-387.16771, -146.07622, 103.77956, 19.11054,\n\t\t-40.21762, 996.16803, -702.22737, 246.36496,\n\t\t-63.89626, -304.82756, 78.23653, -2.58314,\n\t\t-0.11368, -0.06541,\n\t\t-0.34321, 0.33039,\n\t\t0.05652, -0.16493,\n\t\t67.44536, -29.43578, 50.85074, 18.68861,\n\t\t0.39742, 13.64587, -1.61284, 0.11482,\n\t\t0.01668, -0.01182,\n\t\t-0.00386, 0.01025,\n\t\t0.00234, -0.01530,\n\t\t-0.02569, -0.00799,\n\t\t-0.00429, -0.00217,\n\t\t-0.00672, 0.00650,\n\t\t0.01154, 0.00120, -0.00515, 0.00125,\n\t\t0.00236, -0.00216,\n\t\t-0.00098, 0.00009,\n\t\t-0.00460, -0.00518,\n\t\t0.00600, 0.00003,\n\t\t0.00834, 0.00095, 0.01967, 0.00637,\n\t\t-0.00558, -0.06911,\n\t\t-0.01344, -0.06589, -0.05425, -0.00607,\n\t\t-0.00247, -0.00266,\n\t\t0.08790, -0.08537, -0.00647, 0.04028,\n\t\t-0.00325, 0.00488,\n\t\t0.00111, -0.00044,\n\t\t-0.00731, 0.00127,\n\t\t-0.00417, 0.00303,\n\t\t0.05261, 0.01858,\n\t\t-0.00807, 0.01195,\n\t\t1.26352, -0.38591, -0.34825, 1.10733,\n\t\t-0.02815, -0.02148,\n\t\t-0.05083, -0.04377, -0.01206, -0.00586,\n\t\t0.03158, -0.01117, 0.00643, 0.00306,\n\t\t-0.01186, -0.05161, 0.01136, -0.00976,\n\t\t-0.00536, 0.01949,\n\t\t-1.41680, -0.81290, -0.09254, -0.24347,\n\t\t-0.14831, -0.34381,\n\t\t-2.44464, 0.41202, -0.99240, -0.33707,\n\t\t-0.01930, -0.08473,\n\t\t0.00830, 0.01165,\n\t\t-0.01604, -0.02439,\n\t\t0.00227, 0.04493,\n\t\t-42.75310, -22.65155, -9.93679, -18.36179,\n\t\t2.73773, 3.24126, -1.20698, 1.07731,\n\t\t0.00434, -0.10360,\n\t\t-0.02359, 0.00054,\n\t\t-0.02664, -0.00122,\n\t\t-19.79520, 33.11770, -53.56452, -35.41902,\n\t\t67.95039, -82.46551, 117.31843, 14.08609,\n\t\t0.06447, 0.03289,\n\t\t0.40365, -0.33397, 0.07079, -0.09504,\n\t\t-30.36873, 6.23538, -14.25988, -44.91408,\n\t\t38.53146, -16.31919, 6.99584, 22.47169,\n\t\t-0.13313, 0.28016,\n\t\t6.83715, -6.01384, 1.68531, -3.62443,\n\t\t-0.22469, -0.29718,\n\t\t0.25169, 0.13780,\n\t\t-3.64824, 1.22420, -2.48963, -1.12515,\n\t\t-0.01510, -0.56180,\n\t\t-0.03306, 0.01848, -0.00103, -0.00077,\n\t\t-0.01681, -0.00227,\n\t\t-0.00402, -0.00287,\n\t\t0.04965, -0.16190, -0.40025, 0.20734,\n\t\t0.15819, -0.25451,\n\t\t0.02467, -0.00495,\n\t\t0.00597, 0.00490,\n\t\t-0.01085, -0.00460,\n\t\t-0.71564, -0.26624, 0.03797, -0.28263,\n\t\t0.03510, 0.30014,\n\t\t2.79810, 0.07258,\n\t\t-0.01618, 0.00337,\n\t\t0.00876, 0.04438,\n\t\t0.00742, -0.00455,\n\t\t-0.01163, -0.00683,\n\t\t0.00950, 0.01275,\n\t\t-0.02124, -0.67527, -0.23635, 0.06298,\n\t\t-0.03844, 0.01010, 0.73588, -0.00271,\n\t\t0.01742, -0.00467,\n\t\t0.00017, -0.00505,\n\t\t-0.27482, 5.00521, -1.92099, 1.55295,\n\t\t-0.35919, -0.09314,\n\t\t-0.47002, 0.06826,\n\t\t0.07924, 0.16838,\n\t\t-0.04221, 0.71510, -0.16482, 0.08809,\n\t\t41.76829, -125.79427, 106.65271, -71.30642,\n\t\t36.18112, 17.36143, -1.63846, 5.02215,\n\t\t-1.08404, 0.00061,\n\t\t2.45567, -2.42818, -9.88756, 5.36587,\n\t\t-0.61253, -0.35003,\n\t\t1523.54790, 602.82184, 68.66902, 1878.26100,\n\t\t-1098.78095, -120.72600, 127.30918, -383.96064,\n\t\t-7.00838, -6.09942, -1.54187, 0.34883,\n\t\t-9.47561, -4.35408,\n\t\t-21541.63676, -32542.09807, -29720.82604, -28072.21231,\n\t\t-15755.56255, -8084.58657, -8148.87315, 7434.89857,\n\t\t11033.30133, 7827.94658, 610.18256, -11411.93624,\n\t\t-9.87426, 0.94865, -1.63656, 0.41275,\n\t\t1996.57150, 511.48468, 669.78228, 1363.67610,\n\t\t-379.72037, 198.84438, -16.63126, -79.37624,\n\t\t-2.30776, -246.07820, -16.85846, -148.18168,\n\t\t-6.89632, -20.49587, 0.39892, -0.34627,\n\t\t-57.81309, -136.96971, 15.25671, -96.61153,\n\t\t16.09785, -8.79091, 0.70515, 1.16197,\n\t\t0.05647, 0.04684,\n\t\t0.25032, -0.19951, 0.07282, -0.00696,\n\t\t0.00493, 0.00733,\n\t\t-0.01085, 0.00422,\n\t\t-0.01309, 0.00262,\n\t\t0.37616, -0.36203, -0.11154, 0.18213,\n\t\t0.15691, 0.29343, 0.00485, 0.06106,\n\t\t-0.01492, 0.09954,\n\t\t0.28486, 2.27190, 0.33102, 1.50696,\n\t\t-0.01926, 0.04901,\n\t\t0.01827, 0.00863,\n\t\t-0.03315, 0.00178,\n\t\t-0.77600, -0.48576, -0.21111, -0.19485,\n\t\t1.90295, 6.44856, 1.71638, 2.12980,\n\t\t-7.19585, -0.08043,\n\t\t0.07004, -0.02764,\n\t\t0.01604, 0.01158,\n\t\t0.00936, -0.01199,\n\t\t0.18396, -0.29234, 0.10422, -0.00720,\n\t\t0.05196, 0.10753, 0.02859, -0.03602,\n\t\t0.63828, 1.96280, -0.31919, 0.85859,\n\t\t-0.10218, -0.00673,\n\t\t0.01748, -0.02190,\n\t\t0.01266, -0.02729,\n\t\t-4.80220, 8.90557, -5.94059, 2.28577,\n\t\t-0.19687, -1.28666, 0.32398, 0.14879,\n\t\t-0.02619, -0.02056,\n\t\t-0.04872, -0.07011, -0.04082, -0.04740,\n\t\t0.60167, -2.20365, -0.27919, -0.45957,\n\t\t-1.31664, -2.22682, 176.89871, 13.03918,\n\t\t0.00568, 0.00560,\n\t\t0.01093, 0.00486,\n\t\t-0.00948, -0.31272,\n\t\t-11.87638, -3.68471, -1.74977, -9.60468,\n\t\t2.94988, -0.57118,\n\t\t0.00307, -0.01636,\n\t\t0.02624, 0.03032,\n\t\t-0.00464, -0.01338,\n\t\t0.00935, 0.00530,\n\t\t-0.11822, 0.03328, -0.41854, 0.04331,\n\t\t0.41340, -0.21657,\n\t\t-0.00865, 0.00849,\n\t\t-0.00374, -0.00899,\n\t\t0.01227, -0.23462, -0.71894, -0.04515,\n\t\t0.00047, 0.28112,\n\t\t-0.12788, 0.11698, -0.02030, 0.02759,\n\t\t0.02967, -0.00092,\n\t\t0.00454, 0.00565,\n\t\t-0.00026, 0.00164,\n\t\t-0.01405, -0.00862,\n\t\t0.01088, 0.05589,\n\t\t0.18248, -0.06931, -0.00011, 0.03713,\n\t\t0.01932, -0.00982,\n\t\t-0.13861, 0.09853, -0.03441, -0.02492,\n\t\t2.26163, -5.94453, 4.14361, -0.94105,\n\t\t0.39561, 0.75414,\n\t\t-0.17642, 0.03724,\n\t\t-1.32978, -0.56610,\n\t\t-0.03259, -0.06752,\n\t\t39.07495, 80.25429, -28.15558, 82.69851,\n\t\t-37.53894, -17.88963, 6.98299, -13.04691,\n\t\t-0.48675, -1.84530, -0.07985, -0.33004,\n\t\t-3.39292, 2.73153,\n\t\t-17268.46134, 1144.22336, -16658.48585, 5252.94094,\n\t\t-3461.47865, 2910.56452, -433.49442, -305.74268,\n\t\t-383.45023, 545.16136, 313.83376, 27.00533,\n\t\t-31.41075, 7.90570, -12.40592, 3.01833,\n\t\t-0.83334, 0.23404,\n\t\t59.26487, -112.74279, 113.29402, -15.37579,\n\t\t14.03282, 32.74482, -4.73299, 1.30224,\n\t\t-0.00866, 0.01232,\n\t\t-0.53797, 0.00238, -0.07979, 0.04443,\n\t\t-0.05617, -0.05396,\n\t\t0.10185, -1.05476, 0.43791, -0.32302,\n\t\t0.06465, 0.03815,\n\t\t0.00028, -0.00446,\n\t\t0.09289, -0.06389,\n\t\t0.01701, -0.01409,\n\t\t0.47101, 0.16158, 0.01036, -0.39836,\n\t\t0.00477, 0.01101,\n\t\t-2.06535, 0.33197, -0.82468, -0.41414,\n\t\t0.03209, -0.09348,\n\t\t0.00843, -0.00030,\n\t\t-9.49517, -3.82206, 0.66899, -10.28786,\n\t\t6.33435, 1.73684, -0.98164, 2.25164,\n\t\t-0.07577, -0.00277,\n\t\t1.02122, 0.75747, 1.79155, -0.77789,\n\t\t-2.56780, -2.07807,\n\t\t0.19528, 0.77118, -0.28083, 0.32130,\n\t\t-0.04350, -0.07428,\n\t\t-0.01161, 0.01387,\n\t\t0.02074, 0.19802, -0.03600, 0.04922,\n\t\t-0.19837, 0.02572,\n\t\t-0.00682, -0.04277,\n\t\t-0.01805, 0.00299,\n\t\t0.03283, -0.02099,\n\t\t3.57307, 1.17468, 0.65769, 1.88181,\n\t\t-0.39215, 0.08415,\n\t\t-0.53635, -0.19087, -0.12456, 0.02176,\n\t\t0.01182, -0.07941,\n\t\t-2.43731, 2.44464, 1.03961, -1.81936,\n\t\t30.33140, 0.92645,\n\t\t0.00508, -0.01771,\n\t\t-81.06338, 66.43957, 33.16729, 131.44697,\n\t\t76.63344, -34.34324, -35.33012, -28.04413,\n\t\t-1.47440, 13.09015,\n\t\t0.13253, -0.01629, 0.02187, -0.00963,\n\t\t-21.47470, -9.44332, -7.21711, -12.59472,\n\t\t1.76195, -1.63911, 0.09060, 0.28656,\n\t\t0.00635, 0.00536,\n\t\t0.03470, -0.06493, 0.00666, -0.01084,\n\t\t0.01116, -0.01612, -0.00102, 0.00208,\n\t\t-0.05568, 0.00628,\n\t\t0.02665, -0.01032,\n\t\t0.21261, -1.90651, 0.72728, -0.57788,\n\t\t0.08662, 0.10918,\n\t\t3.39133, 3.97302, -4.63381, 4.26670,\n\t\t-2.50873, -3.76064,\n\t\t1.28114, 1.81919, 1.48064, -0.37578,\n\t\t-0.26209, -0.47187,\n\t\t0.00282, -0.00499,\n\t\t0.01749, 0.03222,\n\t\t1.60521, -1.79705, 1.61453, 0.68886,\n\t\t-0.29909, 0.55025,\n\t\t-0.07894, 0.19880, -0.15635, 0.46159,\n\t\t2.09769, 1.52742,\n\t\t-7.60312, 11.34886, 4.35640, 8.61048,\n\t\t2.15001, -2.15303, -0.61587, -0.11950,\n\t\t-0.03289, -0.00520, -0.00501, -0.00445,\n\t\t0.15294, -0.05277, 0.02455, 0.00408,\n\t\t1.19601, 0.43479, 0.20422, 0.57125,\n\t\t-0.12790, 0.01318,\n\t\t-0.15275, -0.43856, 6.99144, -0.08794,\n\t\t-1.69865, 0.82589, -0.20235, 0.97040,\n\t\t0.20903, 0.00675,\n\t\t0.26943, 0.08281, 0.03686, 0.05311,\n\t\t1.28468, 1.21735, -1.38174, 1.29570,\n\t\t-0.75899, -1.17168,\n\t\t0.44696, -0.32341, -0.06378, -0.27573,\n\t\t-0.06406, 0.87186, 0.21069, 0.19724,\n\t\t0.00119, -0.04147,\n\t\t0.39279, 0.51437, -0.11035, 0.21450,\n\t\t-0.04309, 0.02359, 0.20490, 0.14210,\n\t\t0.00007, -0.00017,\n\t\t-0.03529, -0.02644,\n\t\t0.10710, 0.44476, -0.02632, -0.01817,\n\t\t2.11335, -0.04432,\n\t\t0.18206, 0.27335, 0.08867, 0.00313,\n\t\t-0.00692, 0.01595,\n\t\t-0.72957, 0.32080, -0.29291, -0.44764,\n\t\t0.12767, -0.05778, 0.04797, -0.00223,\n\t\t0.17661, 0.22427, -0.04914, 0.09114,\n\t\t0.12236, 0.00708,\n\t\t0.74315, -0.01346,\n\t\t0.02245, -0.02555,\n\t\t-0.30446, 0.13947, -0.12340, -0.18498,\n\t\t-0.04099, 0.02103,\n\t\t0.06337, -0.01224,\n\t\t0.28181, -0.01019,\n\t\t-0.02794, -0.09412,\n\t\t0.03272, -0.01095,\n\t\t0.11247, -0.00650,\n\t\t-0.01319, -0.04296,\n\t\t0.04653, -0.00423,\n\t\t0.06535, 0.00014\n\t],\n\targ_tbl: [\n\t\t0, 7,\n\t\t3, 2, 5, -6, 6, 3, 7, 0,\n\t\t2, 2, 5, -5, 6, 5,\n\t\t3, 1, 6, -4, 7, 2, 8, 0,\n\t\t2, 1, 6, -3, 7, 0,\n\t\t3, 1, 6, -2, 7, -2, 8, 0,\n\t\t2, 4, 5, -10, 6, 3,\n\t\t3, 1, 5, -1, 6, -4, 7, 0,\n\t\t3, 2, 5, -4, 6, -3, 7, 0,\n\t\t3, 2, 6, -8, 7, 4, 8, 0,\n\t\t3, 3, 5, -10, 6, 7, 7, 0,\n\t\t2, 6, 5, -15, 6, 0,\n\t\t2, 2, 6, -6, 7, 0,\n\t\t3, 1, 5, -4, 6, 4, 7, 1,\n\t\t3, 1, 5, -2, 6, -1, 7, 0,\n\t\t3, 2, 5, -5, 6, 1, 8, 0,\n\t\t3, 3, 5, -8, 6, 2, 7, 0,\n\t\t3, 1, 5, -3, 6, 2, 8, 0,\n\t\t3, 1, 5, -3, 6, 1, 7, 1,\n\t\t1, 1, 8, 0,\n\t\t3, 1, 5, -3, 6, 2, 7, 1,\n\t\t3, 1, 5, -2, 6, -2, 7, 0,\n\t\t2, 2, 6, -5, 7, 1,\n\t\t3, 2, 6, -6, 7, 2, 8, 0,\n\t\t3, 2, 6, -7, 7, 4, 8, 0,\n\t\t3, 2, 5, -4, 6, -2, 7, 0,\n\t\t3, 1, 5, -1, 6, -5, 7, 0,\n\t\t3, 2, 6, -7, 7, 5, 8, 0,\n\t\t3, 1, 6, -1, 7, -2, 8, 0,\n\t\t2, 1, 6, -2, 7, 1,\n\t\t3, 1, 6, -3, 7, 2, 8, 0,\n\t\t3, 1, 6, -4, 7, 4, 8, 1,\n\t\t3, 2, 5, -5, 6, 2, 8, 1,\n\t\t3, 2, 5, -6, 6, 2, 7, 1,\n\t\t2, 2, 7, -2, 8, 0,\n\t\t1, 1, 7, 2,\n\t\t2, 5, 5, -12, 6, 2,\n\t\t3, 2, 6, -5, 7, 1, 8, 0,\n\t\t3, 1, 5, -1, 6, -3, 7, 0,\n\t\t3, 7, 5, -18, 6, 3, 7, 0,\n\t\t2, 3, 5, -7, 6, 3,\n\t\t3, 1, 6, 1, 7, -5, 8, 0,\n\t\t3, 1, 5, -4, 6, 3, 7, 0,\n\t\t3, 5, 5, -13, 6, 3, 7, 0,\n\t\t2, 1, 5, -2, 6, 3,\n\t\t3, 3, 5, -9, 6, 3, 7, 0,\n\t\t3, 3, 5, -8, 6, 3, 7, 1,\n\t\t2, 1, 5, -3, 6, 3,\n\t\t3, 5, 5, -14, 6, 3, 7, 0,\n\t\t3, 1, 5, -3, 6, 3, 7, 2,\n\t\t2, 3, 6, -7, 7, 0,\n\t\t2, 3, 5, -8, 6, 2,\n\t\t3, 2, 5, -3, 6, -4, 7, 1,\n\t\t3, 2, 5, -8, 6, 7, 7, 0,\n\t\t2, 5, 5, -13, 6, 0,\n\t\t2, 2, 6, -4, 7, 2,\n\t\t3, 2, 6, -5, 7, 2, 8, 0,\n\t\t3, 2, 5, -4, 6, -1, 7, 0,\n\t\t3, 2, 5, -7, 6, 4, 7, 0,\n\t\t2, 1, 6, -2, 8, 2,\n\t\t2, 1, 6, -1, 7, 0,\n\t\t3, 1, 6, -2, 7, 2, 8, 0,\n\t\t3, 2, 5, -5, 6, 2, 7, 0,\n\t\t3, 2, 5, -6, 6, 2, 8, 0,\n\t\t3, 2, 5, -6, 6, 1, 7, 0,\n\t\t2, 3, 7, -2, 8, 0,\n\t\t1, 2, 7, 1,\n\t\t2, 1, 6, -1, 8, 1,\n\t\t3, 1, 5, -2, 6, 1, 7, 0,\n\t\t3, 1, 5, -2, 6, 2, 8, 0,\n\t\t2, 3, 6, -6, 7, 2,\n\t\t2, 6, 5, -14, 6, 0,\n\t\t3, 3, 6, -7, 7, 2, 8, 0,\n\t\t3, 2, 5, -3, 6, -3, 7, 1,\n\t\t2, 4, 5, -9, 6, 3,\n\t\t3, 2, 6, -2, 7, -2, 8, 0,\n\t\t2, 2, 6, -3, 7, 1,\n\t\t3, 2, 6, -4, 7, 2, 8, 0,\n\t\t2, 2, 5, -4, 6, 3,\n\t\t3, 2, 5, -7, 6, 3, 7, 1,\n\t\t3, 1, 6, 1, 7, -2, 8, 0,\n\t\t1, 1, 6, 5,\n\t\t3, 2, 5, -5, 6, 3, 7, 1,\n\t\t2, 2, 5, -6, 6, 3,\n\t\t1, 3, 7, 3,\n\t\t2, 4, 5, -11, 6, 3,\n\t\t2, 1, 5, -4, 7, 0,\n\t\t3, 2, 5, -5, 6, -3, 7, 1,\n\t\t2, 6, 5, -16, 6, 0,\n\t\t3, 3, 5, -7, 6, 2, 7, 0,\n\t\t3, 3, 6, -4, 7, -2, 8, 0,\n\t\t2, 3, 6, -5, 7, 1,\n\t\t3, 3, 6, -6, 7, 2, 8, 1,\n\t\t3, 3, 6, -7, 7, 4, 8, 0,\n\t\t3, 2, 5, -3, 6, -2, 7, 2,\n\t\t3, 2, 5, -8, 6, 5, 7, 0,\n\t\t2, 2, 6, -4, 8, 0,\n\t\t3, 2, 6, -1, 7, -2, 8, 1,\n\t\t2, 2, 6, -2, 7, 2,\n\t\t3, 2, 6, -3, 7, 2, 8, 0,\n\t\t3, 2, 5, -4, 6, 1, 7, 0,\n\t\t3, 2, 5, -4, 6, 2, 8, 0,\n\t\t3, 2, 5, -7, 6, 2, 7, 1,\n\t\t2, 1, 6, 1, 7, 1,\n\t\t2, 5, 5, -11, 6, 2,\n\t\t3, 1, 5, -2, 7, -2, 8, 0,\n\t\t2, 1, 5, -3, 7, 0,\n\t\t2, 3, 5, -6, 6, 3,\n\t\t3, 2, 6, 1, 7, -5, 8, 0,\n\t\t2, 2, 6, -3, 8, 1,\n\t\t2, 1, 5, -1, 6, 3,\n\t\t3, 2, 5, -7, 6, 3, 8, 0,\n\t\t3, 3, 5, -7, 6, 3, 7, 0,\n\t\t3, 2, 5, -1, 6, -7, 7, 0,\n\t\t2, 1, 5, -4, 6, 2,\n\t\t3, 1, 5, -2, 6, 3, 7, 0,\n\t\t2, 4, 6, -7, 7, 0,\n\t\t2, 3, 5, -9, 6, 0,\n\t\t3, 2, 5, -2, 6, -4, 7, 0,\n\t\t2, 3, 6, -4, 7, 2,\n\t\t3, 2, 5, -3, 6, -1, 7, 0,\n\t\t3, 2, 5, -8, 6, 4, 7, 0,\n\t\t2, 2, 6, -2, 8, 1,\n\t\t2, 2, 6, -1, 7, 0,\n\t\t3, 2, 6, -2, 7, 2, 8, 1,\n\t\t3, 2, 5, -4, 6, 2, 7, 0,\n\t\t3, 2, 5, -7, 6, 2, 8, 0,\n\t\t3, 2, 5, -7, 6, 1, 7, 0,\n\t\t2, 1, 6, 2, 7, 0,\n\t\t2, 2, 6, -1, 8, 0,\n\t\t2, 4, 6, -6, 7, 1,\n\t\t2, 6, 5, -13, 6, 0,\n\t\t3, 2, 5, -2, 6, -3, 7, 1,\n\t\t2, 4, 5, -8, 6, 2,\n\t\t3, 3, 6, -2, 7, -2, 8, 0,\n\t\t2, 3, 6, -3, 7, 0,\n\t\t3, 3, 6, -4, 7, 2, 8, 0,\n\t\t2, 2, 5, -3, 6, 3,\n\t\t3, 2, 5, -8, 6, 3, 7, 1,\n\t\t3, 2, 6, 1, 7, -2, 8, 0,\n\t\t1, 2, 6, 5,\n\t\t3, 2, 5, -4, 6, 3, 7, 2,\n\t\t2, 2, 5, -7, 6, 3,\n\t\t3, 1, 6, 4, 7, -2, 8, 0,\n\t\t2, 1, 6, 3, 7, 1,\n\t\t3, 1, 6, 2, 7, 2, 8, 0,\n\t\t2, 4, 5, -12, 6, 2,\n\t\t2, 5, 6, -8, 7, 0,\n\t\t2, 4, 6, -5, 7, 0,\n\t\t3, 2, 5, -2, 6, -2, 7, 0,\n\t\t2, 3, 6, -2, 7, 1,\n\t\t3, 3, 6, -3, 7, 2, 8, 0,\n\t\t2, 5, 5, -10, 6, 2,\n\t\t3, 1, 5, 1, 6, -3, 7, 0,\n\t\t2, 3, 5, -5, 6, 3,\n\t\t2, 3, 6, -3, 8, 0,\n\t\t1, 1, 5, 2,\n\t\t2, 1, 5, -5, 6, 2,\n\t\t2, 5, 6, -7, 7, 0,\n\t\t2, 4, 6, -4, 7, 2,\n\t\t2, 3, 6, -2, 8, 0,\n\t\t2, 3, 6, -1, 7, 0,\n\t\t2, 5, 6, -6, 7, 0,\n\t\t2, 4, 5, -7, 6, 2,\n\t\t2, 4, 6, -3, 7, 2,\n\t\t2, 2, 5, -2, 6, 2,\n\t\t3, 2, 6, -9, 7, 3, 8, 0,\n\t\t1, 3, 6, 4,\n\t\t3, 2, 5, -3, 6, 3, 7, 1,\n\t\t2, 2, 5, -8, 6, 3,\n\t\t3, 2, 6, 4, 7, -2, 8, 0,\n\t\t2, 4, 5, -13, 6, 1,\n\t\t2, 6, 6, -8, 7, 1,\n\t\t2, 5, 6, -5, 7, 0,\n\t\t2, 4, 6, -2, 7, 0,\n\t\t2, 5, 5, -9, 6, 2,\n\t\t2, 3, 5, -4, 6, 2,\n\t\t2, 1, 5, 1, 6, 2,\n\t\t2, 6, 5, -11, 6, 0,\n\t\t3, 6, 6, -7, 7, 2, 8, 0,\n\t\t2, 4, 5, -6, 6, 2,\n\t\t2, 2, 5, -1, 6, 2,\n\t\t1, 4, 6, 3,\n\t\t3, 2, 5, -2, 6, 3, 7, 1,\n\t\t2, 2, 5, -9, 6, 1,\n\t\t2, 5, 5, -8, 6, 2,\n\t\t2, 3, 5, -3, 6, 1,\n\t\t2, 1, 5, 2, 6, 2,\n\t\t2, 6, 5, -10, 6, 1,\n\t\t2, 4, 5, -5, 6, 2,\n\t\t1, 2, 5, 1,\n\t\t1, 5, 6, 2,\n\t\t2, 5, 5, -7, 6, 1,\n\t\t2, 3, 5, -2, 6, 1,\n\t\t3, 1, 5, 2, 6, 3, 7, 0,\n\t\t2, 6, 5, -9, 6, 0,\n\t\t2, 4, 5, -4, 6, 2,\n\t\t2, 2, 5, 1, 6, 1,\n\t\t2, 7, 5, -11, 6, 0,\n\t\t2, 5, 5, -6, 6, 1,\n\t\t2, 3, 5, -1, 6, 1,\n\t\t2, 6, 5, -8, 6, 1,\n\t\t2, 4, 5, -3, 6, 0,\n\t\t2, 5, 5, -5, 6, 0,\n\t\t1, 3, 5, 0,\n\t\t2, 6, 5, -7, 6, 1,\n\t\t2, 7, 5, -9, 6, 0,\n\t\t2, 5, 5, -4, 6, 0,\n\t\t2, 6, 5, -6, 6, 0,\n\t\t2, 7, 5, -8, 6, 0,\n\t\t2, 6, 5, -5, 6, 0,\n\t\t2, 7, 5, -7, 6, 0,\n\t\t2, 8, 5, -9, 6, 0,\n\t\t2, 8, 5, -8, 6, 0,\n\t\t2, 1, 3, -1, 6, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/saturn.js?");

/***/ }),

/***/ "./src/ptables/uranus.js":
/*!*******************************!*\
  !*** ./src/ptables/uranus.js ***!
  \*******************************/
/*! exports provided: uranusPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uranusPTable\", function() { return uranusPTable; });\nconst uranusPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [0, 0, 0, 0, 5, 10, 9, 12, 0],\n\tmax_power_of_t: 6,\n\tdistance: 1.9218446061800002e+01,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t21.56000, -4652.06828, 154246324.90417, 1130486.05080,\n\t\t330.11531, -3020.20235,\n\t\t-8.03769, -122.02019,\n\t\t212.45130, 254.23866, 25.39758, 60.08296,\n\t\t6949.85053, 51951.42606, -1834.66531, 44481.91144,\n\t\t-3267.45825, 10776.65972, -628.05388, 532.83011,\n\t\t-16.80583, -30.05544,\n\t\t1420.33767, 2007.21040, 592.32842, 1541.61732,\n\t\t-163.55984, 121.14134, 114.74969, -16.04944,\n\t\t0.06069, 0.00725,\n\t\t-0.16861, 0.28785,\n\t\t0.07399, -0.09680,\n\t\t0.19936, -0.41620,\n\t\t0.02922, 0.07398,\n\t\t0.17272, 0.05602,\n\t\t1.65461, -0.68278, -2.18745, -0.85327,\n\t\t0.52467, -0.30863,\n\t\t0.01598, 0.30017,\n\t\t-0.04190, -0.03288,\n\t\t-0.02013, 0.02257,\n\t\t-0.54883, -0.22701, -0.09257, -0.03921,\n\t\t0.02644, 0.04667,\n\t\t0.24773, -0.16562,\n\t\t44242.85814, -223163.54065, 123776.84417, -206375.74884,\n\t\t70472.73820, -27456.55173, 4065.74401, 13202.39154,\n\t\t-3260.72648, 802.50579, -153.13236, -503.81026,\n\t\t30.17812, -31.91893,\n\t\t-65.14719, 77.78417, -37.38185, 19.13337,\n\t\t-3.14043, -0.21147,\n\t\t0.27143, 0.17424,\n\t\t0.04458, 0.10976,\n\t\t-0.41841, -0.21887, -0.09194, -0.02303,\n\t\t0.02896, 0.10044,\n\t\t0.01385, 0.01723,\n\t\t-0.01126, -0.09318,\n\t\t-57.95890, 29.69059, -46.41390, 3.07177,\n\t\t0.42494, 2.33678, -3.09621, 0.05256,\n\t\t-0.02134, -0.35202,\n\t\t-0.44475, -0.83135,\n\t\t1318.18265, 25605.86848, -9168.38371, 18917.31507,\n\t\t-5145.74480, 2130.77612, -485.25920, -438.44867,\n\t\t19.97802, -33.14800,\n\t\t-23383.91826, -45133.19122, -18520.80729, -26549.95198,\n\t\t-2276.70124, -2974.01604, 603.23665, 306.87616,\n\t\t-87.73070, -32.49134,\n\t\t549975.14525, 261920.31896, 526261.09735, 362619.26839,\n\t\t150616.68873, 164643.90808, 9550.02662, 27381.83042,\n\t\t-1065.89047, 1024.20231, -66.63822, -44.75169,\n\t\t-92.10532, -20.26930,\n\t\t-313205.95341, 1462242.64616, 112982.53079, 1865690.41965,\n\t\t308844.30901, 639864.93227, 89716.32843, 10378.80773,\n\t\t4395.08428, -14565.35913, -3016.07754, -19348.64612,\n\t\t3838.36899, -9813.42713, 6883.58821, -6064.92588,\n\t\t2740.47455, -176.29547, 241.91895, 268.44181,\n\t\t-6.13397, 17.92503,\n\t\t-0.01377, -0.08742,\n\t\t387.51915, 257.03872, 152.81792, 221.56197,\n\t\t-22.94836, 29.56640, -2.27801, 4.72805,\n\t\t-6.03420, -0.36763,\n\t\t0.00667, 0.00443,\n\t\t-0.01405, 0.04658,\n\t\t-0.06533, -0.01966,\n\t\t0.10738, 0.00443,\n\t\t0.02889, 0.01056,\n\t\t0.00900, -0.02206,\n\t\t0.00013, 0.05281,\n\t\t0.03035, 0.34793,\n\t\t0.19460, 2.47360,\n\t\t0.18189, -0.83895, 0.24983, 15.32050,\n\t\t0.46010, 2.79643,\n\t\t-0.45793, 0.96707, -0.31226, 0.51911,\n\t\t0.04071, 0.39399,\n\t\t0.00038, 0.03854,\n\t\t0.22446, 0.13630, -0.04357, 0.03635,\n\t\t0.00202, -0.04502,\n\t\t-0.00458, -0.03884,\n\t\t1.32597, 3.40849, -1.67839, -0.95411,\n\t\t-1.00116, -0.72744, -0.22484, -0.27682,\n\t\t-0.18069, 0.00405,\n\t\t-0.01000, 0.27523,\n\t\t-0.07038, -0.01051,\n\t\t-0.09064, 0.08518,\n\t\t0.02083, -0.25406,\n\t\t0.17745, -0.00944,\n\t\t0.21326, 0.20454,\n\t\t18.84894, -7.64400, 0.62670, -11.02728,\n\t\t8.91329, 20.67190,\n\t\t0.17757, -0.15471,\n\t\t-0.11385, -0.46057,\n\t\t6.23014, -14.46025, 2.30012, -2.22677,\n\t\t5.16823, -1.64235,\n\t\t-274.58413, 833.33247, -191.26241, 269.90157,\n\t\t-17.25965, 9.11368,\n\t\t-261.65136, -18274.45858, -2553.83872, -10039.10490,\n\t\t-508.52567, 336.18172, 14.88587, 421.35954,\n\t\t162.43462, 544.92580,\n\t\t-0.44246, 0.23216,\n\t\t-0.29024, -0.13057,\n\t\t-1.58438, 0.34032, -0.31604, -0.01166,\n\t\t-0.07112, 0.05721,\n\t\t-0.10813, 0.01064,\n\t\t-0.05413, 0.06705,\n\t\t-0.41582, -0.47725, 0.31031, 0.08605,\n\t\t0.00409, 0.02373,\n\t\t0.08092, 0.06247, -0.01026, 0.05863,\n\t\t-0.00238, 0.02948,\n\t\t0.00117, 0.02714,\n\t\t0.01720, 0.18261,\n\t\t-0.04067, 0.88639,\n\t\t-0.15502, -0.96383,\n\t\t-0.05307, -0.17319,\n\t\t-0.00486, -0.02373,\n\t\t-0.14748, -0.11884, 0.07798, -0.00358,\n\t\t0.01104, 0.00805,\n\t\t0.15099, -0.03453, 0.01846, 0.03459,\n\t\t0.02197, 0.07012,\n\t\t-0.43677, -1.87445, 1.35202, 2.28294,\n\t\t-0.03592, 0.07679,\n\t\t0.16427, 0.03014, 0.02472, 0.05549,\n\t\t-0.04985, 0.05874,\n\t\t0.35361, 0.01144, -0.57400, 1.34898,\n\t\t0.00265, 0.01540,\n\t\t0.00951, 0.08159,\n\t\t-0.00435, 0.34759,\n\t\t-0.12413, -0.49848,\n\t\t-0.77075, -2.73810,\n\t\t-31.77702, 12.16042, -14.87605, 11.98287,\n\t\t12.69358, 1.31307, -8.22911, -21.47437,\n\t\t-0.24051, -0.38332,\n\t\t-0.01162, -0.03175,\n\t\t0.00556, 0.02454,\n\t\t-0.02297, -0.01654,\n\t\t0.00707, 0.04828,\n\t\t-0.00309, 0.17381,\n\t\t-0.00500, -0.07579,\n\t\t0.02008, 0.05356,\n\t\t0.00702, 0.01133,\n\t\t-0.00237, -0.00612,\n\t\t0.18551, 0.22799, -0.14194, -0.08593,\n\t\t0.00002, -0.01049,\n\t\t-0.17363, -0.13986, 0.00078, -0.06993,\n\t\t-0.00430, -0.07795,\n\t\t-0.03232, -4.13170,\n\t\t0.00311, 0.05356,\n\t\t-0.17324, -0.15505, -0.00590, -0.06608,\n\t\t0.04257, -0.04571,\n\t\t0.00501, 0.02141,\n\t\t-0.00037, 0.07845,\n\t\t-0.00381, -0.03417,\n\t\t0.01834, 0.03349,\n\t\t0.07994, 0.15297,\n\t\t-0.82299, 0.24672, 0.51764, 0.96379,\n\t\t0.01729, 0.02489,\n\t\t-0.08581, 0.13252,\n\t\t0.00538, 0.01995,\n\t\t-0.00148, -0.02261,\n\t\t0.00534, 0.01565,\n\t\t-0.07518, -0.28114, 0.22386, 0.39023,\n\t\t-0.00864, 0.00964,\n\t\t-0.01923, -0.02426,\n\t\t-0.00112, 0.00923,\n\t\t-0.00685, 0.02450,\n\t\t0.26733, -0.99972, -0.82005, 0.13725,\n\t\t0.01520, -0.00790,\n\t\t0.00358, 0.00751,\n\t\t-0.00648, -0.00605,\n\t\t-0.04966, -0.04633,\n\t\t0.06394, -0.01965,\n\t\t0.50185, 0.40553, -0.25809, 0.28853,\n\t\t0.52545, -3.41675,\n\t\t-0.00347, -0.11848,\n\t\t0.02945, -0.01061,\n\t\t-0.04160, -0.03519,\n\t\t-0.03234, -0.81852,\n\t\t-0.02156, -0.00841,\n\t\t0.00029, 0.00020,\n\t\t-0.02281, -0.00364,\n\t\t0.04738, -0.04504,\n\t\t-0.19161, 0.37225, 0.05765, 0.11987,\n\t\t0.00050, 0.02012,\n\t\t-0.03806, 0.39498,\n\t\t0.29982, 0.00886, 0.01671, 53.04042,\n\t\t-0.04160, -0.38856,\n\t\t-0.00174, -0.01773,\n\t\t-0.47661, -0.32010, -0.01088, -0.16231,\n\t\t-0.01584, -0.00144,\n\t\t0.06659, 0.12734,\n\t\t0.04884, 0.02236,\n\t\t0.00146, 0.06030,\n\t\t-0.20660, -0.03982, 0.15091, 1.24562,\n\t\t-0.01303, -0.22426,\n\t\t-0.01518, -0.03922,\n\t\t-0.00043, -0.00047,\n\t\t0.02451, 0.04437,\n\t\t0.02380, -0.00189,\n\t\t-0.00640, -0.07114,\n\t\t-0.00320, -0.02491,\n\t\t-0.00829, 0.07284,\n\t\t0.02846, -0.28034,\n\t\t-0.00268, 0.00256,\n\t\t-0.43420, 0.39645, -0.31053, 1.25916,\n\t\t-0.00371, -0.00651,\n\t\t-0.00096, 0.02762,\n\t\t-0.00067, -0.02503,\n\t\t-0.01517, 0.03748\n\t],\n\tlat_tbl: [\n\t\t0.00000, 107.91527, 83.39404, -124.29804,\n\t\t-7.73277, -3.99442,\n\t\t-0.08328, -1.74251,\n\t\t-9.05659, -22.88559, -2.30655, -4.40259,\n\t\t-470.94604, -3648.43408, 326.28960, -2972.91303,\n\t\t337.37285, -650.33570, 57.18479, -18.29130,\n\t\t1.13897, 2.70158,\n\t\t-13.64388, -71.88619, 7.36408, -43.79994,\n\t\t6.57463, -5.81111, -0.06451, 0.73379,\n\t\t0.00574, -0.01635,\n\t\t0.00074, -0.01496,\n\t\t-0.00418, 0.00647,\n\t\t-0.00407, 0.00548,\n\t\t0.00002, 0.00187,\n\t\t-0.00591, 0.00557,\n\t\t0.32568, -0.01574, 0.19347, -0.01705,\n\t\t0.00173, 0.02384,\n\t\t-0.00248, -0.00103,\n\t\t0.00227, 0.00146,\n\t\t0.00307, -0.00040,\n\t\t0.03886, 0.01987, 0.00546, 0.00345,\n\t\t0.00134, -0.00609,\n\t\t-0.01502, -0.01569,\n\t\t-10080.59325, 10806.67752, -14013.76861, 9928.38683,\n\t\t-6540.83480, 2084.91597, -1093.05006, -305.34266,\n\t\t-9.04558, -110.32310, 9.26094, -3.93195,\n\t\t0.25552, 0.50327,\n\t\t-13.12170, -4.19317, -4.50857, -3.37626,\n\t\t-0.26850, -0.36028,\n\t\t-0.00357, 0.05862,\n\t\t-0.00828, 0.00926,\n\t\t-0.01515, -0.03687, -0.00224, -0.00802,\n\t\t-0.00225, -0.00158,\n\t\t-0.00022, -0.00044,\n\t\t-0.00281, 0.00371,\n\t\t2.28259, -4.29888, 1.74622, -2.13604,\n\t\t0.37023, -0.37022, 0.00886, 0.07081,\n\t\t0.01669, 0.00056,\n\t\t-0.02020, 0.01586,\n\t\t-4255.31929, 5978.03267, -7264.48027, 1884.12585,\n\t\t-2353.93882, -1593.23001, 17.57205, -498.54139,\n\t\t33.28704, -13.79498,\n\t\t-38416.64883, -13774.09664, -32822.03952, -3983.42726,\n\t\t-7538.09822, 1906.66915, -221.24439, 512.77046,\n\t\t32.26101, 12.46483,\n\t\t142710.47871, -96584.83892, 145395.05981, -86630.96423,\n\t\t48202.96749, -23596.77676, 5286.16967, -1626.44031,\n\t\t-16.53568, 95.15428, -15.19472, 5.69207,\n\t\t-6.72181, 7.28683,\n\t\t9515.16142, -166495.49381, 5588.84271, -146260.29445,\n\t\t2023.55881, -30687.22422, 243.64741, 971.58076,\n\t\t390.73247, -236.13754, -2684.56349, 739.81087,\n\t\t-597.39429, 474.89313, -631.69166, 213.04947,\n\t\t-204.89515, -33.09139, -17.78004, -22.21866,\n\t\t0.61083, -1.41177,\n\t\t-0.00070, -0.00501,\n\t\t-58.24552, 25.27978, -36.39386, 0.36376,\n\t\t-2.21030, -6.46685, -0.58473, -0.09357,\n\t\t0.12829, -0.94855,\n\t\t0.00042, 0.00048,\n\t\t0.00411, 0.00101,\n\t\t0.00249, -0.00865,\n\t\t0.00223, 0.00293,\n\t\t0.00041, -0.00042,\n\t\t0.00104, -0.00086,\n\t\t0.00126, -0.00380,\n\t\t0.00906, -0.02253,\n\t\t0.05998, -0.10318,\n\t\t0.00004, -0.03225, 0.14303, -0.05273,\n\t\t0.32683, 0.09386,\n\t\t-0.17053, 0.60847, -0.06190, 0.28166,\n\t\t0.06411, 0.05289,\n\t\t0.01138, 0.00128,\n\t\t-0.00930, 0.00272, 0.00037, 0.00215,\n\t\t0.00004, 0.00050,\n\t\t0.00114, -0.00217,\n\t\t0.05358, -0.06413, -0.00124, 0.03842,\n\t\t0.01006, 0.22479, 0.00412, 0.04040,\n\t\t0.01708, 0.02164,\n\t\t0.02484, -0.02463,\n\t\t-0.00103, 0.02633,\n\t\t-0.01303, -0.03214,\n\t\t0.03613, 0.02205,\n\t\t-0.02677, -0.02522,\n\t\t-0.00293, 0.03130,\n\t\t-1.87255, -2.50308, -1.53715, 0.36859,\n\t\t-0.17829, -1.12095,\n\t\t-0.05652, -0.00786,\n\t\t-0.06992, 0.07279,\n\t\t-2.95896, 0.55138, -0.61498, -0.11008,\n\t\t-0.87790, -0.50965,\n\t\t119.73553, -35.18217, 44.78683, -4.22438,\n\t\t1.95723, 0.58033,\n\t\t-4077.02379, -353.39110, -2781.63273, -75.23318,\n\t\t-312.50478, -23.86495, 24.59887, 32.56837,\n\t\t120.09593, -51.00495,\n\t\t0.09737, 0.09111,\n\t\t0.04799, -0.05029,\n\t\t0.08351, -0.33726, 0.03158, -0.06435,\n\t\t-0.00523, -0.01736,\n\t\t0.00751, -0.01757,\n\t\t-0.00406, -0.01198,\n\t\t0.16402, -0.10986, -0.02024, 0.07205,\n\t\t-0.00440, -0.00072,\n\t\t-0.00465, 0.00310, -0.00121, -0.00121,\n\t\t0.00083, 0.00020,\n\t\t0.00140, -0.00176,\n\t\t0.00381, -0.00731,\n\t\t-0.01618, 0.01570,\n\t\t-0.10201, 0.05809,\n\t\t-0.03359, 0.01024,\n\t\t-0.00535, 0.00018,\n\t\t0.00024, 0.00509, -0.00158, -0.00466,\n\t\t0.00009, -0.00083,\n\t\t-0.00700, -0.00090, -0.00011, -0.00079,\n\t\t0.00133, -0.00126,\n\t\t0.01416, 0.05553, 0.04283, -0.06719,\n\t\t0.00119, 0.00291,\n\t\t-0.00263, 0.01282, -0.00040, 0.00188,\n\t\t-0.00237, 0.00973,\n\t\t-0.39533, 0.18773, -0.79821, -0.40168,\n\t\t0.00151, -0.00161,\n\t\t0.00123, -0.00516,\n\t\t-0.01432, -0.00293,\n\t\t-0.05477, 0.04130,\n\t\t-0.48837, 0.18944,\n\t\t-0.12552, 9.37098, 1.02045, 5.11382,\n\t\t0.72098, -3.70049, -5.80982, 3.30105,\n\t\t-0.09682, 0.09696,\n\t\t-0.00876, 0.00504,\n\t\t0.00318, 0.00245,\n\t\t0.00563, -0.00665,\n\t\t0.00108, -0.00233,\n\t\t-0.00117, 0.00177,\n\t\t-0.00343, 0.00503,\n\t\t0.01044, -0.00651,\n\t\t0.00296, -0.00162,\n\t\t0.00037, 0.00028,\n\t\t-0.00020, -0.00786, 0.00029, 0.00836,\n\t\t0.00004, 0.00033,\n\t\t-0.00309, -0.00086, -0.00157, -0.00086,\n\t\t-0.00058, 0.00105,\n\t\t-0.04557, 0.01794,\n\t\t-0.00122, -0.00086,\n\t\t0.00420, -0.00285, 0.00118, -0.00020,\n\t\t0.00743, -0.01217,\n\t\t0.00053, -0.00084,\n\t\t-0.00075, 0.00097,\n\t\t-0.00107, 0.00314,\n\t\t0.00576, -0.00505,\n\t\t0.03624, -0.02546,\n\t\t0.05379, 0.30081, 0.29870, -0.22106,\n\t\t0.00696, -0.00801,\n\t\t-0.03995, -0.01808,\n\t\t-0.00139, 0.00102,\n\t\t-0.00059, 0.00138,\n\t\t0.00019, -0.00037,\n\t\t0.00274, 0.00658, 0.00672, -0.01132,\n\t\t0.00023, 0.00051,\n\t\t0.00031, 0.00090,\n\t\t-0.00017, -0.00001,\n\t\t0.00085, 0.00004,\n\t\t0.02221, -0.01977, 0.07498, 0.03025,\n\t\t-0.00082, -0.00022,\n\t\t-0.00073, -0.00028,\n\t\t-0.00253, 0.00259,\n\t\t-0.01329, 0.01805,\n\t\t0.00096, 0.00833,\n\t\t-0.11836, 0.04277, -0.10820, -0.03018,\n\t\t0.34504, 0.09834,\n\t\t-0.00538, -0.00231,\n\t\t0.00036, 0.00042,\n\t\t-0.00023, 0.00260,\n\t\t-0.01137, 0.00036,\n\t\t0.01081, -0.03271,\n\t\t-0.00029, -0.00028,\n\t\t0.00018, -0.00003,\n\t\t0.00009, 0.00012,\n\t\t0.00127, 0.00343, 0.00100, -0.00064,\n\t\t0.00014, 0.00004,\n\t\t0.00150, 0.00069,\n\t\t-0.01484, 0.00135, 0.03930, 0.01405,\n\t\t0.00064, 0.00029,\n\t\t0.00009, 0.00009,\n\t\t0.00054, -0.00048, 0.00019, 0.00005,\n\t\t-0.00009, 0.00018,\n\t\t0.00192, -0.00333,\n\t\t0.01824, 0.01071,\n\t\t0.00107, -0.00341,\n\t\t0.25530, -0.18414, -0.84151, -0.31475,\n\t\t-0.00400, -0.00010,\n\t\t-0.00174, 0.00019,\n\t\t0.00006, -0.00079,\n\t\t0.00066, -0.00070,\n\t\t0.00599, 0.00330,\n\t\t-0.00160, -0.00013,\n\t\t-0.00067, -0.00006,\n\t\t-0.00176, -0.00111,\n\t\t0.00652, 0.00368,\n\t\t0.00004, 0.00001,\n\t\t-0.00081, 0.00089, 0.00366, 0.00139,\n\t\t0.00002, 0.00001,\n\t\t-0.01870, -0.00998,\n\t\t-0.00020, -0.00007,\n\t\t0.00005, 0.00003\n\t],\n\trad_tbl: [\n\t\t0.00000, -53.23277, -44.70609, -62.54432,\n\t\t-19.15218, 0.10867,\n\t\t-1.91911, 1.47517,\n\t\t16.51994, 5.00458, 3.88980, 1.55740,\n\t\t3598.17109, 1831.07574, 2633.34851, 1775.69482,\n\t\t497.10486, 488.77343, 6.03892, 31.08365,\n\t\t-2.06585, -1.12599,\n\t\t230.37762, -113.95449, 162.40244, -46.57185,\n\t\t6.70207, 17.27241, -0.66092, -14.42065,\n\t\t-0.01044, -0.00287,\n\t\t-0.03894, -0.01663,\n\t\t0.01629, 0.00496,\n\t\t0.08411, 0.02855,\n\t\t0.01795, -0.00695,\n\t\t0.02426, -0.03921,\n\t\t-0.24495, -0.77369, -0.31404, 0.38668,\n\t\t-0.05682, -0.17197,\n\t\t0.06145, -0.00510,\n\t\t0.00606, -0.00886,\n\t\t-0.00370, -0.00588,\n\t\t0.02173, -0.11909, 0.00302, -0.01796,\n\t\t-0.01067, 0.00990,\n\t\t0.05283, 0.06517,\n\t\t59710.89716, -491.12783, 58672.38609, 19564.41947,\n\t\t10597.99050, 14313.02561, -2585.52040, 766.78396,\n\t\t-138.39893, -802.43403, 131.35006, -31.97561,\n\t\t7.95978, 8.16075,\n\t\t28.72669, 31.72473, 6.45792, 16.50701,\n\t\t0.01066, 1.29718,\n\t\t0.11565, -0.13240,\n\t\t0.05110, -0.01543,\n\t\t-0.09994, 0.18864, -0.01330, 0.04148,\n\t\t0.03510, -0.00366,\n\t\t0.00604, -0.00604,\n\t\t0.03752, -0.00256,\n\t\t-7.00488, -21.63748, 1.43064, -17.10914,\n\t\t-0.62987, 0.48719, 0.00697, -1.22665,\n\t\t-0.14435, -0.00550,\n\t\t0.32008, -0.19855,\n\t\t-13976.73731, -3559.49432, -7709.90803, -9310.80334,\n\t\t749.31835, -3491.50696, 540.94979, -84.57550,\n\t\t16.96663, 35.53930,\n\t\t37214.64771, -36361.15845, 21093.74492, -31855.33076,\n\t\t1500.84653, -7031.97901, -453.40865, -18.36692,\n\t\t-2.07726, -17.92336,\n\t\t-56348.30507, 378512.71483, -111444.43340, 370543.95160,\n\t\t-61893.70301, 112131.05507, -11977.44617, 9156.15245,\n\t\t-567.61838, -495.25760, 16.96202, -44.06279,\n\t\t4.24760, -48.83674,\n\t\t-643705.49516, -131013.09649, -838580.02217, 67627.11556,\n\t\t-288441.70339, 150227.25291, -2500.57537, 42676.19888,\n\t\t7084.60505, 2043.65642, 9639.56835, -1502.03390,\n\t\t-4126.00409, -828.73564, -2801.35204, -2293.77751,\n\t\t-209.23365, -1045.31476, 95.57334, -102.74623,\n\t\t7.19216, 1.89593,\n\t\t-0.05661, 0.02166,\n\t\t120.38332, -141.16507, 98.31386, -40.23448,\n\t\t10.84269, 17.57713, 1.69239, 1.45065,\n\t\t-0.19626, 2.76108,\n\t\t-0.00270, 0.00360,\n\t\t-0.02333, -0.00710,\n\t\t-0.01035, 0.02950,\n\t\t0.00737, -0.06311,\n\t\t-0.00613, 0.01407,\n\t\t0.01377, 0.00879,\n\t\t-0.03287, 0.00012,\n\t\t-0.21667, 0.01793,\n\t\t-1.54865, 0.10953,\n\t\t0.54543, 0.12102, -9.48047, 0.11477,\n\t\t-1.34966, 0.23199,\n\t\t-1.50834, 0.26567, -0.64503, 0.10742,\n\t\t-0.21452, 0.04428,\n\t\t-0.01920, -0.00906,\n\t\t-0.09378, 0.12773, -0.02787, -0.03090,\n\t\t0.03111, 0.00140,\n\t\t0.03771, -0.01269,\n\t\t-1.94794, 1.22823, 0.64183, -1.11467,\n\t\t-0.19301, -0.27357, 0.05710, -0.08115,\n\t\t-0.07318, 0.00806,\n\t\t0.14286, 0.20297,\n\t\t0.14920, -0.07897,\n\t\t0.09682, 0.02379,\n\t\t-0.13928, 0.01679,\n\t\t-0.00774, 0.10060,\n\t\t0.24433, 0.16760,\n\t\t-2.88905, -1.61439, 2.83052, -3.41031,\n\t\t36.37048, 3.37867,\n\t\t0.29321, 0.09687,\n\t\t0.29324, -0.14651,\n\t\t8.11116, 1.79211, 1.36421, 0.88111,\n\t\t1.21683, 2.37950,\n\t\t-357.76211, -87.84636, -117.55745, -67.18338,\n\t\t-5.26029, -6.27559,\n\t\t7509.94562, 3.68942, 4223.62097, -1041.13557,\n\t\t-74.64464, -251.41613, -166.22180, -1.68190,\n\t\t-214.55340, 62.79593,\n\t\t-0.08250, -0.15936,\n\t\t-0.03830, 0.10857,\n\t\t0.21368, 0.50812, 0.00869, 0.09832,\n\t\t0.02158, 0.02045,\n\t\t0.01407, 0.03591,\n\t\t0.03460, 0.01171,\n\t\t-0.16400, 0.09751, 0.03521, -0.12858,\n\t\t0.00700, -0.00524,\n\t\t0.01698, -0.04796, 0.04006, 0.00565,\n\t\t-0.02783, -0.00205,\n\t\t-0.02296, 0.00153,\n\t\t-0.16139, 0.01514,\n\t\t-0.78136, -0.01546,\n\t\t0.40374, -0.06014,\n\t\t0.06212, -0.01828,\n\t\t0.00831, -0.00173,\n\t\t0.06857, -0.11677, 0.00028, 0.05765,\n\t\t-0.00796, 0.00691,\n\t\t0.03764, 0.14902, -0.02653, 0.02122,\n\t\t-0.05503, 0.01549,\n\t\t1.56630, -0.35551, -1.87960, 1.14303,\n\t\t-0.06063, -0.03425,\n\t\t0.03367, -0.11969, 0.04485, -0.01651,\n\t\t0.04647, -0.02097,\n\t\t0.22841, 0.47362, 0.99226, -0.60660,\n\t\t-0.01249, 0.00134,\n\t\t-0.07435, 0.00722,\n\t\t-0.31796, -0.00015,\n\t\t0.20533, -0.04398,\n\t\t0.93944, -0.26710,\n\t\t-5.60051, -9.32918, -5.13538, -4.05130,\n\t\t-0.56529, 4.34112, 7.18308, -2.66103,\n\t\t0.13241, -0.07999,\n\t\t0.01046, -0.00535,\n\t\t-0.04037, -0.00455,\n\t\t-0.00510, 0.00731,\n\t\t-0.04576, 0.00513,\n\t\t-0.15846, -0.00236,\n\t\t0.04628, -0.00463,\n\t\t-0.01585, 0.00585,\n\t\t-0.00213, 0.00283,\n\t\t0.00778, -0.00198,\n\t\t-0.17803, 0.18321, 0.07702, -0.12325,\n\t\t0.01091, 0.00349,\n\t\t0.14211, -0.21830, 0.07289, -0.00994,\n\t\t0.07090, -0.00079,\n\t\t4.18441, -0.07413,\n\t\t-0.06247, -0.00011,\n\t\t-0.15453, 0.14499, -0.06557, -0.00098,\n\t\t0.00290, 0.02921,\n\t\t-0.01923, 0.00457,\n\t\t-0.07538, -0.00120,\n\t\t0.02263, -0.00037,\n\t\t-0.01061, 0.00591,\n\t\t-0.04725, 0.02364,\n\t\t-0.07460, -0.24108, -0.28310, 0.14643,\n\t\t-0.00700, 0.00427,\n\t\t0.22963, 0.03713,\n\t\t-0.02062, 0.00478,\n\t\t0.01434, 0.00095,\n\t\t-0.01425, 0.00376,\n\t\t0.29611, -0.08038, -0.37811, 0.21703,\n\t\t-0.00723, -0.00924,\n\t\t-0.02736, 0.01814,\n\t\t0.00934, 0.00731,\n\t\t0.00613, 0.00686,\n\t\t-0.91503, -0.32009, -0.15505, 0.79589,\n\t\t-0.00555, -0.01536,\n\t\t-0.00698, 0.00480,\n\t\t0.00373, -0.00046,\n\t\t0.00715, -0.00470,\n\t\t-0.01970, -0.05238,\n\t\t0.60649, -0.32669, 0.17790, 0.33383,\n\t\t-2.74922, -0.25827,\n\t\t-0.07862, 0.00406,\n\t\t-0.00948, -0.02117,\n\t\t0.03127, -0.04199,\n\t\t0.89670, -0.02413,\n\t\t0.01954, 0.03990,\n\t\t0.00063, -0.00071,\n\t\t-0.00226, 0.02009,\n\t\t-0.04407, -0.05069,\n\t\t0.38230, 0.16101, 0.11893, -0.06125,\n\t\t0.02051, -0.00046,\n\t\t0.39211, 0.03679,\n\t\t0.01666, -0.31336, 53.28735, -0.01791,\n\t\t-0.39414, 0.04181,\n\t\t-0.01885, 0.00165,\n\t\t0.31349, -0.47359, 0.16133, -0.01023,\n\t\t0.00007, 0.01758,\n\t\t-0.13351, 0.07249,\n\t\t0.00977, 0.05445,\n\t\t0.11650, -0.00191,\n\t\t-0.09824, 0.40106, 2.41155, -0.30655,\n\t\t0.24975, -0.01248,\n\t\t-0.03688, 0.01097,\n\t\t0.00038, -0.00051,\n\t\t-0.04736, 0.02610,\n\t\t0.00968, 0.02634,\n\t\t0.07918, -0.00606,\n\t\t0.02735, -0.00320,\n\t\t-0.07544, -0.00468,\n\t\t0.19996, -0.01964,\n\t\t0.00201, 0.00267,\n\t\t0.39562, 0.43289, 1.24743, 0.31084,\n\t\t-0.00666, 0.00377,\n\t\t0.05668, 0.00148,\n\t\t0.03220, -0.00026,\n\t\t0.03717, 0.01509\n\t],\n\targ_tbl: [\n\t\t0, 3,\n\t\t2, 1, 7, -2, 8, 0,\n\t\t2, 2, 7, -4, 8, 0,\n\t\t2, 3, 7, -6, 8, 1,\n\t\t2, 2, 5, -5, 6, 4,\n\t\t2, 1, 6, -3, 7, 3,\n\t\t3, 1, 6, -1, 7, -4, 8, 0,\n\t\t3, 2, 5, -7, 6, 6, 7, 0,\n\t\t3, 2, 6, -6, 7, 1, 8, 0,\n\t\t3, 2, 6, -7, 7, 3, 8, 0,\n\t\t3, 2, 6, -8, 7, 4, 8, 0,\n\t\t3, 2, 6, -7, 7, 2, 8, 0,\n\t\t2, 2, 6, -6, 7, 2,\n\t\t3, 1, 5, -4, 6, 4, 7, 0,\n\t\t3, 1, 6, -2, 7, -1, 8, 0,\n\t\t3, 1, 6, -3, 7, 1, 8, 0,\n\t\t3, 1, 6, -4, 7, 3, 8, 1,\n\t\t2, 5, 7, -9, 8, 0,\n\t\t2, 4, 7, -7, 8, 0,\n\t\t2, 2, 7, -3, 8, 6,\n\t\t2, 1, 7, -3, 8, 2,\n\t\t2, 2, 7, -5, 8, 0,\n\t\t2, 3, 7, -7, 8, 0,\n\t\t3, 1, 6, -6, 7, 5, 8, 1,\n\t\t3, 1, 6, -5, 7, 3, 8, 0,\n\t\t3, 2, 5, -8, 6, 8, 7, 0,\n\t\t3, 1, 5, -4, 6, 5, 7, 0,\n\t\t2, 2, 6, -5, 7, 3,\n\t\t3, 1, 6, 1, 7, -9, 8, 0,\n\t\t3, 2, 5, -4, 6, -2, 7, 0,\n\t\t2, 1, 6, -4, 8, 4,\n\t\t2, 1, 6, -2, 7, 4,\n\t\t2, 5, 7, -8, 8, 5,\n\t\t2, 3, 7, -4, 8, 0,\n\t\t1, 1, 7, 5,\n\t\t2, 2, 7, -6, 8, 4,\n\t\t3, 1, 6, -6, 7, 4, 8, 0,\n\t\t2, 1, 6, -4, 7, 4,\n\t\t3, 2, 6, -5, 7, 1, 8, 0,\n\t\t3, 2, 6, -6, 7, 3, 8, 0,\n\t\t2, 2, 6, -7, 7, 0,\n\t\t3, 1, 5, -4, 6, 3, 7, 0,\n\t\t3, 1, 6, -1, 7, -1, 8, 0,\n\t\t2, 1, 5, -2, 6, 0,\n\t\t2, 6, 7, -9, 8, 0,\n\t\t2, 5, 7, -7, 8, 0,\n\t\t2, 4, 7, -5, 8, 0,\n\t\t2, 3, 7, -3, 8, 1,\n\t\t2, 2, 7, -1, 8, 0,\n\t\t2, 1, 7, 1, 8, 2,\n\t\t1, 3, 8, 0,\n\t\t2, 3, 6, -7, 7, 1,\n\t\t3, 2, 5, -3, 6, -4, 7, 0,\n\t\t3, 2, 6, -3, 7, -2, 8, 0,\n\t\t2, 2, 6, -4, 7, 1,\n\t\t3, 2, 6, -5, 7, 2, 8, 1,\n\t\t3, 5, 5, -9, 6, -8, 7, 0,\n\t\t3, 2, 5, -4, 6, -1, 7, 0,\n\t\t3, 1, 6, 3, 7, -8, 8, 0,\n\t\t3, 2, 6, -8, 7, 1, 8, 0,\n\t\t3, 2, 5, -7, 6, 4, 7, 0,\n\t\t3, 4, 5, -10, 6, 2, 7, 0,\n\t\t2, 1, 6, -2, 8, 0,\n\t\t2, 1, 6, -1, 7, 2,\n\t\t2, 8, 7, -12, 8, 0,\n\t\t2, 7, 7, -10, 8, 0,\n\t\t2, 6, 7, -8, 8, 1,\n\t\t2, 5, 7, -6, 8, 0,\n\t\t2, 4, 7, -4, 8, 2,\n\t\t1, 2, 7, 4,\n\t\t1, 4, 8, 0,\n\t\t2, 1, 7, -6, 8, 0,\n\t\t2, 2, 7, -8, 8, 1,\n\t\t2, 3, 7, -10, 8, 0,\n\t\t2, 4, 7, -12, 8, 0,\n\t\t3, 1, 6, -6, 7, 2, 8, 0,\n\t\t2, 1, 6, -5, 7, 1,\n\t\t3, 1, 6, -4, 7, -2, 8, 0,\n\t\t3, 1, 5, -4, 6, 2, 7, 1,\n\t\t3, 1, 5, -2, 6, 1, 7, 0,\n\t\t2, 7, 7, -9, 8, 0,\n\t\t2, 6, 7, -7, 8, 0,\n\t\t2, 5, 7, -5, 8, 0,\n\t\t2, 4, 7, -3, 8, 0,\n\t\t2, 3, 7, -1, 8, 0,\n\t\t2, 2, 7, 1, 8, 0,\n\t\t2, 3, 6, -6, 7, 1,\n\t\t3, 3, 6, -7, 7, 2, 8, 0,\n\t\t3, 2, 5, -3, 6, -3, 7, 1,\n\t\t3, 2, 6, -2, 7, -2, 8, 0,\n\t\t2, 2, 6, -3, 7, 1,\n\t\t3, 2, 6, -4, 7, 2, 8, 0,\n\t\t3, 2, 5, -7, 6, 3, 7, 1,\n\t\t3, 1, 6, 1, 7, -2, 8, 0,\n\t\t1, 1, 6, 1,\n\t\t2, 8, 7, -10, 8, 0,\n\t\t2, 7, 7, -8, 8, 0,\n\t\t2, 6, 7, -6, 8, 0,\n\t\t2, 5, 7, -4, 8, 0,\n\t\t2, 4, 7, -2, 8, 0,\n\t\t1, 3, 7, 3,\n\t\t2, 2, 7, 2, 8, 0,\n\t\t2, 1, 7, 4, 8, 0,\n\t\t2, 1, 5, -4, 7, 0,\n\t\t2, 1, 6, -6, 7, 0,\n\t\t2, 8, 7, -9, 8, 0,\n\t\t2, 7, 7, -7, 8, 0,\n\t\t2, 6, 7, -5, 8, 0,\n\t\t2, 5, 7, -3, 8, 0,\n\t\t2, 4, 7, -1, 8, 0,\n\t\t3, 3, 6, -4, 7, -2, 8, 0,\n\t\t2, 3, 6, -5, 7, 1,\n\t\t3, 3, 6, -6, 7, 2, 8, 0,\n\t\t3, 2, 5, -3, 6, -2, 7, 1,\n\t\t3, 2, 6, -1, 7, -2, 8, 0,\n\t\t2, 2, 6, -2, 7, 0,\n\t\t3, 2, 6, -3, 7, 2, 8, 0,\n\t\t3, 2, 5, -7, 6, 2, 7, 1,\n\t\t2, 1, 6, 1, 7, 0,\n\t\t2, 9, 7, -10, 8, 0,\n\t\t2, 8, 7, -8, 8, 0,\n\t\t2, 7, 7, -6, 8, 0,\n\t\t2, 6, 7, -4, 8, 0,\n\t\t2, 5, 7, -2, 8, 0,\n\t\t1, 4, 7, 1,\n\t\t2, 3, 7, 2, 8, 0,\n\t\t2, 1, 5, -3, 7, 0,\n\t\t2, 9, 7, -9, 8, 0,\n\t\t2, 8, 7, -7, 8, 0,\n\t\t3, 3, 6, -3, 7, -2, 8, 0,\n\t\t2, 3, 6, -4, 7, 1,\n\t\t3, 3, 6, -5, 7, 2, 8, 0,\n\t\t3, 2, 5, -3, 6, -1, 7, 0,\n\t\t3, 2, 5, -8, 6, 4, 7, 0,\n\t\t2, 2, 6, -2, 8, 0,\n\t\t2, 2, 6, -1, 7, 1,\n\t\t3, 2, 6, -2, 7, 2, 8, 0,\n\t\t3, 2, 5, -7, 6, 1, 7, 0,\n\t\t2, 6, 7, -2, 8, 0,\n\t\t1, 5, 7, 0,\n\t\t3, 3, 6, -4, 7, 1, 8, 0,\n\t\t2, 1, 5, -2, 7, 2,\n\t\t3, 1, 5, -3, 7, 2, 8, 0,\n\t\t3, 1, 5, -1, 6, 1, 7, 0,\n\t\t2, 4, 6, -6, 7, 0,\n\t\t2, 3, 6, -3, 7, 0,\n\t\t1, 2, 6, 0,\n\t\t3, 2, 5, -4, 6, 3, 7, 0,\n\t\t3, 1, 5, 1, 6, -4, 7, 0,\n\t\t3, 3, 5, -5, 6, -1, 7, 0,\n\t\t1, 6, 7, 1,\n\t\t3, 1, 5, 1, 7, -4, 8, 0,\n\t\t2, 1, 5, -2, 8, 0,\n\t\t2, 1, 5, -1, 7, 1,\n\t\t3, 1, 5, -2, 7, 2, 8, 0,\n\t\t3, 1, 5, -3, 7, 4, 8, 0,\n\t\t3, 1, 5, -5, 6, 1, 7, 1,\n\t\t3, 1, 5, -1, 6, 2, 7, 0,\n\t\t2, 4, 6, -5, 7, 0,\n\t\t2, 3, 6, -2, 7, 0,\n\t\t3, 1, 5, 1, 7, -2, 8, 0,\n\t\t1, 1, 5, 1,\n\t\t2, 4, 6, -4, 7, 0,\n\t\t2, 3, 6, -1, 7, 0,\n\t\t3, 3, 5, -5, 6, 1, 7, 0,\n\t\t2, 5, 6, -6, 7, 0,\n\t\t2, 4, 6, -3, 7, 0,\n\t\t2, 5, 6, -5, 7, 0,\n\t\t2, 6, 6, -6, 7, 0,\n\t\t2, 2, 5, -3, 7, 0,\n\t\t2, 2, 5, -2, 7, 0,\n\t\t2, 2, 5, -2, 8, 0,\n\t\t2, 2, 5, -1, 7, 1,\n\t\t3, 2, 5, -2, 7, 2, 8, 0,\n\t\t1, 2, 5, 0,\n\t\t2, 3, 5, -3, 7, 0,\n\t\t2, 3, 5, -1, 7, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/uranus.js?");

/***/ }),

/***/ "./src/ptables/venus.js":
/*!******************************!*\
  !*** ./src/ptables/venus.js ***!
  \******************************/
/*! exports provided: venusPTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"venusPTable\", function() { return venusPTable; });\nconst venusPTable = {\n\tmaxargs: 9,\n\tmax_harmonic: [5, 14, 13, 8, 4, 5, 1, 0, 0],\n\tmax_power_of_t: 5,\n\tdistance: 7.2332982000000001e-01,\n\ttimescale: 3652500.0,\n\ttrunclvl: 1.0,\n\tlon_tbl: [\n\t\t9.08078, 55.42416, 21066413644.98911, 655127.20186,\n\t\t0.00329, 0.10408,\n\t\t0.00268, -0.01908,\n\t\t0.00653, 0.00183,\n\t\t0.15083, -0.21997,\n\t\t6.08596, 2.34841, 3.70668, -0.22740,\n\t\t-2.29376, -1.46741,\n\t\t-0.03840, 0.01242,\n\t\t0.00176, 0.00913,\n\t\t0.00121, -0.01222,\n\t\t-1.22624, 0.65264, -1.15974, -1.28172,\n\t\t1.00656, -0.66266,\n\t\t0.01560, -0.00654, 0.00896, 0.00069,\n\t\t0.21649, -0.01786,\n\t\t0.01239, 0.00255,\n\t\t0.00084, -0.06086,\n\t\t-0.00041, 0.00887,\n\t\t0.13453, -0.20013, 0.08234, 0.01575,\n\t\t0.00658, -0.00214,\n\t\t0.00254, 0.00857,\n\t\t-0.01047, -0.00519,\n\t\t0.63215, -0.40914, 0.34271, -1.53258,\n\t\t0.00038, -0.01437,\n\t\t-0.02599, -2.27805, -0.36873, -1.01799,\n\t\t-0.36798, 1.41356,\n\t\t-0.08167, 0.01368, 0.20676, 0.06807,\n\t\t0.02282, -0.04691,\n\t\t0.30308, -0.20218, 0.24785, 0.27522,\n\t\t0.00197, -0.00499,\n\t\t1.43909, -0.46154, 0.93459, 2.99583,\n\t\t-3.43274, 0.05672,\n\t\t-0.06586, 0.12467, 0.02505, -0.08433,\n\t\t0.00743, 0.00174,\n\t\t-0.04013, 0.17715,\n\t\t-0.00603, -0.01024,\n\t\t0.01542, -0.02378,\n\t\t0.00676, 0.00002,\n\t\t-0.00168, -4.89487,\n\t\t0.02393, -0.03064,\n\t\t0.00090, 0.00977,\n\t\t0.01223, 0.00381,\n\t\t0.28135, -0.09158, 0.18550, 0.58372,\n\t\t-0.67437, 0.01409,\n\t\t-0.25404, -0.06863,\n\t\t0.06763, -0.02939,\n\t\t-0.00009, -0.04888,\n\t\t0.01718, -0.00978,\n\t\t-0.01945, 0.08847,\n\t\t-0.00135, -11.29920,\n\t\t0.01689, -0.04756,\n\t\t0.02075, -0.01667,\n\t\t0.01397, 0.00443,\n\t\t-0.28437, 0.07600, 0.17996, -0.44326,\n\t\t0.29356, 1.41869, -1.58617, 0.03206,\n\t\t0.00229, -0.00753,\n\t\t-0.03076, -2.96766,\n\t\t0.00245, 0.00697,\n\t\t0.01063, -0.02468,\n\t\t-0.00351, -0.18179,\n\t\t-0.01088, 0.00380,\n\t\t0.00496, 0.02072,\n\t\t-0.12890, 0.16719, -0.06820, -0.03234,\n\t\t-60.36135, -11.74485, -11.03752, -3.80145,\n\t\t-21.33955, -284.54495, -763.43839, 248.50823,\n\t\t1493.02775, 1288.79621, -2091.10921, -1851.15420,\n\t\t-0.00922, 0.06233,\n\t\t0.00004, 0.00785,\n\t\t0.10363, -0.16770, 0.45497, 0.24051,\n\t\t-0.28057, 0.61126,\n\t\t-0.02057, 0.00010,\n\t\t0.00561, 0.01994,\n\t\t0.01416, -0.00442,\n\t\t0.03073, -0.14961,\n\t\t-0.06272, 0.08301,\n\t\t0.02040, 7.12824,\n\t\t-0.00453, -0.01815,\n\t\t0.00004, -0.00013,\n\t\t-0.03593, -0.18147, 0.20353, -0.00683,\n\t\t0.00003, 0.06226,\n\t\t-0.00443, 0.00257,\n\t\t0.03194, 0.03254,\n\t\t0.00282, -0.01401,\n\t\t0.00422, 1.03169,\n\t\t-0.00169, -0.00591,\n\t\t-0.00307, 0.00540,\n\t\t0.05511, 0.00347,\n\t\t0.07896, 0.06583,\n\t\t0.00783, 0.01926,\n\t\t0.03109, 0.15967,\n\t\t0.00343, 0.88734,\n\t\t0.01047, 0.32054,\n\t\t0.00814, 0.00051,\n\t\t0.02474, 0.00047,\n\t\t0.00052, 0.03763,\n\t\t-57.06618, 20.34614, -45.06541, -115.20465,\n\t\t136.46887, -84.67046, 92.93308, 160.44644,\n\t\t-0.00020, -0.00082,\n\t\t0.02496, 0.00279,\n\t\t0.00849, 0.00195,\n\t\t-0.05013, -0.04331,\n\t\t-0.00136, 0.14491,\n\t\t-0.00183, -0.00406,\n\t\t0.01163, 0.00093,\n\t\t-0.00604, -0.00680,\n\t\t-0.00036, 0.06861,\n\t\t-0.00450, -0.00969,\n\t\t0.00171, 0.00979,\n\t\t-0.00152, 0.03929,\n\t\t0.00631, 0.00048,\n\t\t-0.00709, -0.00864,\n\t\t1.51002, -0.24657, 1.27338, 2.64699,\n\t\t-2.40990, -0.57413,\n\t\t-0.00023, 0.03528,\n\t\t0.00268, 0.00522,\n\t\t-0.00010, 0.01933,\n\t\t-0.00006, 0.01100,\n\t\t0.06313, -0.09939, 0.08571, 0.03206,\n\t\t-0.00004, 0.00645\n\t],\n\tlat_tbl: [\n\t\t-23.91858, 31.44154, 25.93273, -67.68643,\n\t\t-0.00171, 0.00123,\n\t\t0.00001, -0.00018,\n\t\t-0.00005, 0.00018,\n\t\t-0.00001, 0.00019,\n\t\t0.00733, 0.00030, -0.00038, 0.00011,\n\t\t0.00181, 0.00120,\n\t\t0.00010, 0.00002,\n\t\t-0.00012, 0.00002,\n\t\t0.00021, 0.00004,\n\t\t-0.00403, 0.00101, 0.00342, -0.00328,\n\t\t0.01564, 0.01212,\n\t\t0.00011, 0.00010, -0.00002, -0.00004,\n\t\t-0.00524, 0.00079,\n\t\t0.00011, 0.00002,\n\t\t-0.00001, 0.00003,\n\t\t0.00001, 0.00000,\n\t\t0.00108, 0.00035, 0.00003, 0.00064,\n\t\t-0.00000, -0.00002,\n\t\t-0.00069, 0.00031,\n\t\t0.00020, 0.00003,\n\t\t0.00768, 0.03697, -0.07906, 0.01673,\n\t\t-0.00003, -0.00001,\n\t\t-0.00198, -0.01045, 0.01761, -0.00803,\n\t\t-0.00751, 0.04199,\n\t\t0.00280, -0.00213, -0.00482, -0.00209,\n\t\t-0.01077, 0.00715,\n\t\t0.00048, -0.00004, 0.00199, 0.00237,\n\t\t0.00017, -0.00032,\n\t\t-0.07513, -0.00658, -0.04213, 0.16065,\n\t\t0.27661, 0.06515,\n\t\t0.02156, -0.08144, -0.23994, -0.05674,\n\t\t0.00167, 0.00069,\n\t\t0.00244, -0.01247,\n\t\t-0.00100, 0.00036,\n\t\t0.00240, 0.00012,\n\t\t0.00010, 0.00018,\n\t\t0.00208, -0.00098,\n\t\t-0.00217, 0.00707,\n\t\t-0.00338, 0.01260,\n\t\t-0.00127, -0.00039,\n\t\t-0.03516, -0.00544, -0.01746, 0.08258,\n\t\t0.10633, 0.02523,\n\t\t0.00077, -0.00214,\n\t\t-0.02335, 0.00976,\n\t\t-0.00019, 0.00003,\n\t\t0.00041, 0.00039,\n\t\t0.00199, -0.01098,\n\t\t0.00813, -0.00853,\n\t\t0.02230, 0.00349,\n\t\t-0.02250, 0.08119,\n\t\t-0.00214, -0.00052,\n\t\t-0.00220, 0.15216, 0.17152, 0.08051,\n\t\t-0.01561, 0.27727, 0.25837, 0.07021,\n\t\t-0.00005, -0.00000,\n\t\t-0.02692, -0.00047,\n\t\t-0.00007, -0.00016,\n\t\t0.01072, 0.01418,\n\t\t-0.00076, 0.00379,\n\t\t-0.00807, 0.03463,\n\t\t-0.05199, 0.06680,\n\t\t-0.00622, 0.00787, 0.00672, 0.00453,\n\t\t-10.69951, -67.43445, -183.55956, -37.87932,\n\t\t-102.30497, -780.40465, 2572.21990, -446.97798,\n\t\t1665.42632, 5698.61327, -11889.66501, 2814.93799,\n\t\t0.03204, -0.09479,\n\t\t0.00014, -0.00001,\n\t\t-0.04118, -0.04562, 0.03435, -0.05878,\n\t\t0.01700, 0.02566,\n\t\t-0.00121, 0.00170,\n\t\t0.02390, 0.00403,\n\t\t0.04629, 0.01896,\n\t\t-0.00521, 0.03215,\n\t\t-0.01051, 0.00696,\n\t\t-0.01332, -0.08937,\n\t\t-0.00469, -0.00751,\n\t\t0.00016, -0.00035,\n\t\t0.00492, -0.03930, -0.04742, -0.01013,\n\t\t0.00065, 0.00021,\n\t\t-0.00006, 0.00017,\n\t\t0.06768, -0.01558,\n\t\t-0.00055, 0.00322,\n\t\t-0.00287, -0.01656,\n\t\t0.00061, -0.00041,\n\t\t0.00030, 0.00047,\n\t\t-0.01436, -0.00148,\n\t\t0.30302, -0.05511,\n\t\t-0.00020, -0.00005,\n\t\t0.00042, -0.00025,\n\t\t0.01270, 0.00458,\n\t\t-0.00593, -0.04480,\n\t\t0.00005, -0.00008,\n\t\t0.08457, -0.01569,\n\t\t0.00062, 0.00018,\n\t\t9.79942, -2.48836, 4.17423, 6.72044,\n\t\t-63.33456, 34.63597, 39.11878, -72.89581,\n\t\t-0.00066, 0.00036,\n\t\t-0.00045, -0.00062,\n\t\t-0.00287, -0.00118,\n\t\t-0.21879, 0.03947,\n\t\t0.00086, 0.00671,\n\t\t-0.00113, 0.00122,\n\t\t-0.00193, -0.00029,\n\t\t-0.03612, 0.00635,\n\t\t0.00024, 0.00207,\n\t\t-0.00273, 0.00443,\n\t\t-0.00055, 0.00030,\n\t\t-0.00451, 0.00175,\n\t\t-0.00110, -0.00015,\n\t\t-0.02608, 0.00480,\n\t\t2.16555, -0.70419, 1.74648, 0.97514,\n\t\t-1.15360, 1.73688,\n\t\t0.00004, 0.00105,\n\t\t0.00187, -0.00311,\n\t\t0.00005, 0.00055,\n\t\t0.00004, 0.00032,\n\t\t-0.04629, 0.02292, -0.00363, -0.03807,\n\t\t0.00002, 0.00020\n\t],\n\trad_tbl: [\n\t\t-0.24459, 3.72698, -6.67281, 5.24378,\n\t\t0.00030, 0.00003,\n\t\t-0.00002, -0.00000,\n\t\t-0.00000, 0.00001,\n\t\t0.00032, 0.00021,\n\t\t-0.00326, 0.01002, 0.00067, 0.00653,\n\t\t0.00243, -0.00417,\n\t\t-0.00004, -0.00010,\n\t\t-0.00002, -0.00001,\n\t\t0.00004, -0.00002,\n\t\t-0.00638, -0.01453, 0.01458, -0.01235,\n\t\t0.00755, 0.01030,\n\t\t0.00006, 0.00014, 0.00000, 0.00009,\n\t\t0.00063, 0.00176,\n\t\t0.00003, -0.00022,\n\t\t0.00112, 0.00001,\n\t\t-0.00014, -0.00001,\n\t\t0.00485, 0.00322, -0.00035, 0.00198,\n\t\t0.00004, 0.00013,\n\t\t-0.00015, -0.00003,\n\t\t0.00011, -0.00025,\n\t\t0.00634, 0.02207, 0.04620, 0.00160,\n\t\t0.00045, 0.00001,\n\t\t-0.11563, 0.00643, -0.05947, 0.02018,\n\t\t0.07704, 0.01574,\n\t\t-0.00090, -0.00471, -0.00322, 0.01104,\n\t\t0.00265, -0.00038,\n\t\t0.01395, 0.02165, -0.01948, 0.01713,\n\t\t-0.00057, -0.00019,\n\t\t0.04889, 0.13403, -0.28327, 0.10597,\n\t\t-0.02325, -0.35829,\n\t\t0.01171, -0.00904, 0.00747, 0.02546,\n\t\t0.00029, -0.00190,\n\t\t-0.03408, -0.00703,\n\t\t0.00176, -0.00109,\n\t\t0.00463, 0.00293,\n\t\t0.00000, 0.00148,\n\t\t1.06691, -0.00054,\n\t\t-0.00935, -0.00790,\n\t\t0.00552, -0.00084,\n\t\t-0.00100, 0.00336,\n\t\t0.02874, 0.08604, -0.17876, 0.05973,\n\t\t-0.00720, -0.21195,\n\t\t0.02134, -0.07980,\n\t\t0.01500, 0.01398,\n\t\t0.01758, -0.00004,\n\t\t0.00371, 0.00650,\n\t\t-0.03375, -0.00723,\n\t\t4.65465, -0.00040,\n\t\t0.02040, 0.00707,\n\t\t-0.00727, -0.01144,\n\t\t-0.00196, 0.00620,\n\t\t-0.03396, -0.12904, 0.20160, 0.08092,\n\t\t-0.67045, 0.14014, -0.01571, -0.75141,\n\t\t0.00361, 0.00110,\n\t\t1.42165, -0.01499,\n\t\t-0.00334, 0.00117,\n\t\t0.01187, 0.00507,\n\t\t0.08935, -0.00174,\n\t\t-0.00211, -0.00525,\n\t\t0.01035, -0.00252,\n\t\t-0.08355, -0.06442, 0.01616, -0.03409,\n\t\t5.55241, -30.62428, 2.03824, -6.26978,\n\t\t143.07279, -10.24734, -125.25411, -380.85360,\n\t\t-644.78411, 745.02852, 926.70000, -1045.09820,\n\t\t-0.03124, -0.00465,\n\t\t-0.00396, 0.00002,\n\t\t0.08518, 0.05248, -0.12178, 0.23023,\n\t\t-0.30943, -0.14208,\n\t\t-0.00005, -0.01054,\n\t\t-0.00894, 0.00233,\n\t\t-0.00173, -0.00768,\n\t\t0.07881, 0.01633,\n\t\t-0.04463, -0.03347,\n\t\t-3.92991, 0.00945,\n\t\t0.01524, -0.00422,\n\t\t-0.00011, -0.00005,\n\t\t0.10842, -0.02126, 0.00349, 0.12097,\n\t\t-0.03752, 0.00001,\n\t\t-0.00156, -0.00270,\n\t\t-0.01520, 0.01349,\n\t\t0.00895, 0.00186,\n\t\t-0.67751, 0.00180,\n\t\t0.00516, -0.00151,\n\t\t-0.00365, -0.00210,\n\t\t-0.00276, 0.03793,\n\t\t-0.02637, 0.03235,\n\t\t-0.01343, 0.00541,\n\t\t-0.11270, 0.02169,\n\t\t-0.63365, 0.00122,\n\t\t-0.24329, 0.00428,\n\t\t-0.00040, 0.00586,\n\t\t0.00581, 0.01112,\n\t\t-0.02731, 0.00008,\n\t\t-2.69091, 0.42729, 2.78805, 3.43849,\n\t\t-0.87998, -6.62373, 0.56882, 4.69370,\n\t\t0.00005, -0.00008,\n\t\t-0.00181, 0.01767,\n\t\t-0.00168, 0.00660,\n\t\t0.01802, -0.01836,\n\t\t-0.11245, -0.00061,\n\t\t0.00199, -0.00070,\n\t\t-0.00076, 0.00919,\n\t\t0.00311, -0.00165,\n\t\t-0.05650, -0.00018,\n\t\t0.00121, -0.00069,\n\t\t-0.00803, 0.00146,\n\t\t-0.03260, -0.00072,\n\t\t-0.00042, 0.00524,\n\t\t0.00464, -0.00339,\n\t\t-0.06203, -0.00278, 0.04145, 0.02871,\n\t\t-0.01962, -0.01362,\n\t\t-0.03040, -0.00010,\n\t\t0.00085, -0.00001,\n\t\t-0.01712, -0.00006,\n\t\t-0.00996, -0.00003,\n\t\t-0.00029, 0.00026, 0.00016, -0.00005,\n\t\t-0.00594, -0.00003\n\t],\n\targ_tbl: [\n\t\t0, 3,\n\t\t2, 2, 5, -5, 6, 0,\n\t\t3, 2, 2, 1, 3, -8, 4, 0,\n\t\t3, 5, 1, -14, 2, 2, 3, 0,\n\t\t3, 3, 2, -7, 3, 4, 4, 0,\n\t\t2, 8, 2, -13, 3, 2,\n\t\t3, 6, 2, -10, 3, 3, 5, 0,\n\t\t1, 1, 7, 0,\n\t\t2, 1, 5, -2, 6, 0,\n\t\t2, 1, 2, -3, 4, 2,\n\t\t2, 2, 5, -4, 6, 1,\n\t\t1, 1, 6, 0,\n\t\t3, 3, 2, -5, 3, 1, 5, 0,\n\t\t3, 3, 2, -5, 3, 2, 5, 0,\n\t\t2, 1, 5, -1, 6, 0,\n\t\t2, 2, 2, -6, 4, 1,\n\t\t2, 2, 5, -3, 6, 0,\n\t\t1, 2, 6, 0,\n\t\t2, 3, 5, -5, 6, 0,\n\t\t1, 1, 5, 1,\n\t\t2, 2, 5, -2, 6, 0,\n\t\t2, 3, 2, -5, 3, 2,\n\t\t2, 5, 2, -8, 3, 1,\n\t\t1, 2, 5, 0,\n\t\t2, 2, 1, -5, 2, 1,\n\t\t2, 6, 2, -10, 3, 0,\n\t\t2, 2, 2, -3, 3, 2,\n\t\t2, 1, 2, -2, 3, 1,\n\t\t2, 4, 2, -7, 3, 0,\n\t\t2, 4, 2, -6, 3, 0,\n\t\t1, 1, 4, 0,\n\t\t2, 1, 2, -2, 4, 0,\n\t\t2, 2, 2, -5, 4, 0,\n\t\t2, 1, 2, -1, 3, 0,\n\t\t2, 1, 1, -3, 2, 0,\n\t\t2, 2, 2, -4, 3, 0,\n\t\t2, 6, 2, -9, 3, 0,\n\t\t2, 3, 2, -4, 3, 2,\n\t\t2, 1, 1, -2, 2, 0,\n\t\t1, 1, 3, 0,\n\t\t2, 1, 2, -1, 4, 0,\n\t\t2, 2, 2, -4, 4, 0,\n\t\t2, 5, 2, -7, 3, 0,\n\t\t2, 2, 2, -2, 3, 0,\n\t\t2, 1, 2, -3, 5, 0,\n\t\t2, 1, 2, -3, 3, 0,\n\t\t2, 7, 2, -10, 3, 0,\n\t\t2, 1, 2, -2, 5, 1,\n\t\t2, 4, 2, -5, 3, 1,\n\t\t3, 1, 2, 1, 5, -5, 6, 0,\n\t\t2, 1, 2, -1, 5, 0,\n\t\t3, 1, 2, -3, 5, 5, 6, 0,\n\t\t2, 1, 2, -2, 6, 0,\n\t\t2, 1, 2, -1, 6, 0,\n\t\t1, 3, 4, 0,\n\t\t2, 7, 2, -13, 3, 0,\n\t\t3, 1, 2, 2, 5, -5, 6, 1,\n\t\t1, 1, 2, 5,\n\t\t2, 9, 2, -13, 3, 0,\n\t\t3, 1, 2, 1, 5, -2, 6, 0,\n\t\t2, 2, 2, -3, 4, 2,\n\t\t2, 3, 2, -6, 4, 0,\n\t\t2, 1, 2, 1, 5, 0,\n\t\t2, 2, 2, -5, 3, 0,\n\t\t2, 6, 2, -8, 3, 0,\n\t\t2, 2, 1, -4, 2, 0,\n\t\t2, 3, 2, -3, 3, 0,\n\t\t1, 2, 3, 0,\n\t\t2, 3, 2, -7, 3, 0,\n\t\t2, 5, 2, -6, 3, 1,\n\t\t2, 2, 2, -2, 4, 0,\n\t\t2, 3, 2, -5, 4, 0,\n\t\t2, 2, 2, -1, 3, 0,\n\t\t2, 7, 2, -9, 3, 0,\n\t\t2, 4, 2, -4, 3, 0,\n\t\t2, 1, 2, 1, 3, 0,\n\t\t2, 3, 2, -4, 4, 0,\n\t\t2, 6, 2, -7, 3, 0,\n\t\t2, 3, 2, -2, 3, 0,\n\t\t2, 2, 2, -4, 5, 0,\n\t\t2, 2, 2, -3, 5, 0,\n\t\t2, 2, 2, -2, 5, 0,\n\t\t2, 5, 2, -5, 3, 0,\n\t\t2, 2, 2, -3, 6, 0,\n\t\t2, 2, 2, -1, 5, 0,\n\t\t2, 2, 2, -2, 6, 0,\n\t\t1, 2, 2, 3,\n\t\t2, 2, 2, 1, 5, 0,\n\t\t2, 7, 2, -8, 3, 0,\n\t\t2, 2, 1, -3, 2, 0,\n\t\t2, 4, 2, -3, 3, 0,\n\t\t2, 6, 2, -6, 3, 0,\n\t\t2, 3, 2, -1, 3, 0,\n\t\t2, 8, 2, -9, 3, 0,\n\t\t2, 5, 2, -4, 3, 0,\n\t\t2, 7, 2, -7, 3, 0,\n\t\t2, 4, 2, -2, 3, 0,\n\t\t2, 3, 2, -4, 5, 0,\n\t\t2, 3, 2, -3, 5, 0,\n\t\t2, 9, 2, -10, 3, 0,\n\t\t2, 3, 2, -2, 5, 0,\n\t\t1, 3, 2, 2,\n\t\t2, 8, 2, -8, 3, 0,\n\t\t2, 5, 2, -3, 3, 0,\n\t\t2, 9, 2, -9, 3, 0,\n\t\t2, 10, 2, -10, 3, 0,\n\t\t1, 4, 2, 1,\n\t\t2, 11, 2, -11, 3, 0,\n\t\t-1\n\t]\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/ptables/venus.js?");

/***/ }),

/***/ "./src/utilities/DateDelta.js":
/*!************************************!*\
  !*** ./src/utilities/DateDelta.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DateDelta; });\nclass DateDelta {\n  // Computes the difference between the universal date from the julian date\n  constructor() {\n    /**\n     * Morrison and Stephenson (2004)\n     * This table covers -1000 through 1700 in 100-year steps.\n     * Values are in whole seconds.\n     * Estimated standard error at -1000 is 640 seconds; at 1600, 20 seconds.\n     * The first value in the table has been adjusted 28 sec for\n     * continuity with their long-term quadratic extrapolation formula.\n     * The last value in this table agrees with the AA table at 1700,\n     * so there is no discontinuity at either endpoint.\n     */\n    this.m_s = [\n    \t/* -1000 to -100 */\n    \t25428, 23700, 22000, 21000, 19040, 17190, 15530, 14080, 12790, 11640,\n    \t/* 0 to 900 */\n    \t10580, 9600, 8640, 7680, 6700, 5710, 4740, 3810, 2960, 2200,\n    \t/* 1000 to 1700 */\n    \t1570, 1090, 740, 490, 320, 200, 120, 9\n    ],\n\n    /**\n     * Entries prior to 1955 in the following table are from\n     * the 1984 Astronomical Almanac and assume ndot = -26.0.\n     * For dates prior to 1700, the above table is used instead of this one.\n     */\n    this.dt = [\n    \t/* 1620.0 thru 1659.0 */\n    \t12400, 11900, 11500, 11000, 10600, 10200, 9800, 9500, 9100, 8800,\n    \t8500, 8200, 7900, 7700, 7400, 7200, 7000, 6700, 6500, 6300,\n    \t6200, 6000, 5800, 5700, 5500, 5400, 5300, 5100, 5000, 4900,\n    \t4800, 4700, 4600, 4500, 4400, 4300, 4200, 4100, 4000, 3800,\n    \t/* 1660.0 thru 1699.0 */\n    \t3700, 3600, 3500, 3400, 3300, 3200, 3100, 3000, 2800, 2700,\n    \t2600, 2500, 2400, 2300, 2200, 2100, 2000, 1900, 1800, 1700,\n    \t1600, 1500, 1400, 1400, 1300, 1200, 1200, 1100, 1100, 1000,\n    \t1000, 1000, 900, 900, 900, 900, 900, 900, 900, 900,\n    \t/* 1700.0 thru 1739.0 */\n    \t900, 900, 900, 900, 900, 900, 900, 900, 1000, 1000,\n    \t1000, 1000, 1000, 1000, 1000, 1000, 1000, 1100, 1100, 1100,\n    \t1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,\n    \t1100, 1100, 1100, 1100, 1200, 1200, 1200, 1200, 1200, 1200,\n    \t/* 1740.0 thru 1779.0 */\n    \t1200, 1200, 1200, 1200, 1300, 1300, 1300, 1300, 1300, 1300,\n    \t1300, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1500, 1500,\n    \t1500, 1500, 1500, 1500, 1500, 1600, 1600, 1600, 1600, 1600,\n    \t1600, 1600, 1600, 1600, 1600, 1700, 1700, 1700, 1700, 1700,\n    \t/* 1780.0 thru 1799.0 */\n    \t1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,\n    \t1700, 1700, 1600, 1600, 1600, 1600, 1500, 1500, 1400, 1400,\n    \t/* 1800.0 thru 1819.0 */\n    \t1370, 1340, 1310, 1290, 1270, 1260, 1250, 1250, 1250, 1250,\n    \t1250, 1250, 1250, 1250, 1250, 1250, 1250, 1240, 1230, 1220,\n    \t/* 1820.0 thru 1859.0 */\n    \t1200, 1170, 1140, 1110, 1060, 1020, 960, 910, 860, 800,\n    \t750, 700, 660, 630, 600, 580, 570, 560, 560, 560,\n    \t570, 580, 590, 610, 620, 630, 650, 660, 680, 690,\n    \t710, 720, 730, 740, 750, 760, 770, 770, 780, 780,\n    \t/* 1860.0 thru 1899.0 */\n    \t788, 782, 754, 697, 640, 602, 541, 410, 292, 182,\n    \t161, 10, -102, -128, -269, -324, -364, -454, -471, -511,\n    \t-540, -542, -520, -546, -546, -579, -563, -564, -580, -566,\n    \t-587, -601, -619, -664, -644, -647, -609, -576, -466, -374,\n    \t/* 1900.0 thru 1939.0 */\n    \t-272, -154, -2, 124, 264, 386, 537, 614, 775, 913,\n    \t1046, 1153, 1336, 1465, 1601, 1720, 1824, 1906, 2025, 2095,\n    \t2116, 2225, 2241, 2303, 2349, 2362, 2386, 2449, 2434, 2408,\n    \t2402, 2400, 2387, 2395, 2386, 2393, 2373, 2392, 2396, 2402,\n    \t/* 1940.0 thru 1979.0 */\n    \t2433, 2483, 2530, 2570, 2624, 2677, 2728, 2778, 2825, 2871,\n    \t2915, 2957, 2997, 3036, 3072, 3107, 3135, 3168, 3218, 3268,\n    \t3315, 3359, 3400, 3447, 3503, 3573, 3654, 3743, 3829, 3920,\n    \t4018, 4117, 4223, 4337, 4449, 4548, 4646, 4752, 4853, 4959,\n    \t/* 1980.0 thru 2011.0 */\n    \t5054, 5138, 5217, 5296, 5379, 5434, 5487, 5532, 5582, 5630,\n    \t5686, 5757, 5831, 5912, 5998, 6078, 6163, 6230, 6297, 6347,\n    \t6383, 6409, 6430, 6447, 6457, 6469, 6485, 6515, 6546, 6578,\n    \t6607, 6632\n    ],\n\n    this.demo = 0,\n    this.TABSTART = 1620,\n    this.TABEND = 2011,\n    this.TABSIZ = this.TABEND - this.TABSTART + 1,\n\n    this.CalcUniversal = this.CalcUniversal.bind(this)\n  }\n\n  CalcUniversal(julianDate, j2000) {\n  \tvar p, B; // double\n  \tvar diff = [0, 0, 0, 0, 0, 0]; // int\n  \tvar i, iy, k; // int\n    let dateDelta\n\n  \tif (j2000 > this.TABEND) {\n  \t\t/* Extrapolate future values beyond the lookup table.  */\n  \t\tif (j2000 > (this.TABEND + 100.0)) {\n  \t\t\t/* Morrison & Stephenson (2004) long-term curve fit.  */\n  \t\t\tB = (j2000 - 1820.0) / 100;\n  \t\t\tdateDelta = 32.0 * B * B - 20.0;\n  \t\t} else {\n  \t\t\tvar a, b, c, d, m0, m1; // double\n\n  \t\t\t/* Cubic interpolation between last tabulated value\n  \t\t\t and long-term curve evaluated at 100 years later.  */\n\n  \t\t\t/* Last tabulated delta T value. */\n  \t\t\ta = this.dt [this.TABSIZ - 1] / 100;\n  \t\t\t/* Approximate slope in past 10 years. */\n  \t\t\tb = (this.dt [this.TABSIZ - 1] - this.dt [this.TABSIZ - 11]) / 1000;\n\n  \t\t\t/* Long-term curve 100 years hence. */\n  \t\t\tB = (this.TABEND + 100.0 - 1820.0) / 100;\n  \t\t\tm0 = 32.0 * B * B - 20.0;\n  \t\t\t/* Its slope. */\n  \t\t\tm1 = 0.64 * B;\n\n  \t\t\t/* Solve for remaining coefficients of an interpolation polynomial\n  \t\t\t that agrees in value and slope at both ends of the 100-year\n  \t\t\t interval. */\n  \t\t\td = 2.0e-6 * (50.0 * (m1 + b) - m0 + a);\n  \t\t\tc = 1.0e-4 * (m0 - a - 100.0 * b - 1.0e6 * d);\n\n  \t\t\t/* Note, the polynomial coefficients do not depend on Y.\n  \t\t\t A given tabulation and long-term formula\n  \t\t\t determine the polynomial.\n  \t\t\t Thus, for the IERS table ending at 2011.0, the coefficients are\n  \t\t\t a = 66.32\n  \t\t\t b = 0.223\n  \t\t\t c = 0.03231376\n  \t\t\t d = -0.0001607784\n  \t\t\t */\n\n  \t\t\t/* Compute polynomial value at desired time. */\n  \t\t\tp = j2000 - this.TABEND;\n  \t\t\tdateDelta = a + p * (b + p * (c + p * d));\n  \t\t}\n  \t} else {\n  \t\t/* Use Morrison and Stephenson (2004) prior to the year 1700.  */\n  \t\tif (j2000 < 1700.0) {\n  \t\t\tif (j2000 <= -1000.0) {\n  \t\t\t\t/* Morrison and Stephenson long-term fit.  */\n  \t\t\t\tB = (j2000 - 1820.0) / 100;\n  \t\t\t\tdateDelta = 32.0 * B * B - 20.0;\n  \t\t\t} else {\n  \t\t\t\t/* Morrison and Stephenson recommend linear interpolation\n  \t\t\t\t between tabulations. */\n  \t\t\t\tiy = Math.floor (j2000);\n  \t\t\t\tiy = Math.floor ((iy + 1000) / 100);\n  \t\t\t\t/* Integer index into the table. */\n  \t\t\t\tB = -1000 + 100 * iy;\n  \t\t\t\t/* Starting year of tabulated interval.  */\n  \t\t\t\tp = this.m_s [iy];\n  \t\t\t\tdateDelta = p + (j2000 - B) * (this.m_s [iy + 1] - p) / 100;\n  \t\t\t}\n  \t\t} else {\n  \t\t\t/* Besselian interpolation between tabulated values\n  \t\t\t * in the telescopic era.\n  \t\t\t * See AA page K11.\n  \t\t\t */\n\n  \t\t\t/* Index into the table.\n  \t\t\t */\n  \t\t\tp = Math.floor (j2000);\n  \t\t\tiy = Math.floor (p - this.TABSTART);\n  \t\t\t/* Zeroth order estimate is value at start of year\n  \t\t\t */\n  \t\t\tdateDelta = this.dt [iy];\n  \t\t\tk = iy + 1;\n  \t\t\tif (!(k >= this.TABSIZ)) {\n  \t\t\t\t/* The fraction of tabulation interval\n  \t\t\t\t */\n  \t\t\t\tp = j2000 - p;\n\n  \t\t\t\t/* First order interpolated value\n  \t\t\t\t */\n  \t\t\t\tdateDelta += p * (this.dt [k] - this.dt [iy]);\n  \t\t\t\tif (!((iy - 1 < 0) || (iy + 2 >= this.TABSIZ))) {\n  \t\t\t\t\t// make table of first differences\n  \t\t\t\t\tk = iy - 2;\n  \t\t\t\t\tfor (i = 0; i < 5; i++) {\n  \t\t\t\t\t\tif ((k < 0) || (k + 1 >= this.TABSIZ)) {\n  \t\t\t\t\t\t\tdiff[i] = 0;\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\tdiff[i] = this.dt[k + 1] - this.dt[k];\n  \t\t\t\t\t\t}\n  \t\t\t\t\t\tk += 1;\n  \t\t\t\t\t}\n\n  \t\t\t\t\t// compute second differences\n  \t\t\t\t\tfor (i = 0; i < 4; i++) {\n  \t\t\t\t\t\tdiff[i] = diff[i + 1] - diff[i];\n  \t\t\t\t\t}\n  \t\t\t\t\tB = 0.25 * p * (p - 1.0);\n  \t\t\t\t\tdateDelta += B * (diff[1] + diff[2]);\n\n  \t\t\t\t\tif (!(iy + 2 >= this.TABSIZ)) {\n  \t\t\t\t\t\t// Compute third differences\n  \t\t\t\t\t\tfor (i = 0; i < 3; i++) {\n  \t\t\t\t\t\t\tdiff[i] = diff[i + 1] - diff[i];\n  \t\t\t\t\t\t}\n  \t\t\t\t\t\tB = 2.0 * B / 3.0;\n  \t\t\t\t\t\tdateDelta += (p - 0.5) * B * diff[1];\n  \t\t\t\t\t\tif (!((iy - 2 < 0) || (iy + 3 > this.TABSIZ))) {\n  \t\t\t\t\t\t\t// Compute fourth differences\n  \t\t\t\t\t\t\tfor (i = 0; i < 2; i++) {\n  \t\t\t\t\t\t\t\tdiff[i] = diff[i + 1] - diff[i];\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\tB = 0.125 * B * (p + 1.0) * (p - 2.0);\n  \t\t\t\t\t\t\tdateDelta += B * (diff[0] + diff[1]);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\tdateDelta /= 100.0;\n  \t}\n\n  \treturn julianDate - dateDelta / 86400.0;;\n  }\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/DateDelta.js?");

/***/ }),

/***/ "./src/utilities/Epsilon.js":
/*!**********************************!*\
  !*** ./src/utilities/Epsilon.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Epsilon; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\nclass Epsilon {\n  constructor(julianDate) {\n    this.jdeps = -1.0, /* Date for which obliquity was last computed */\n    this.eps = 0.0, /* The computed obliquity in radians */\n    this.coseps = 0.0, /* Cosine of the obliquity */\n    this.sineps = 0.0 /* Sine of the obliquity */\n    this.julianDate = julianDate\n\n    this.calcEpsilon = this.calcEpsilon.bind(this)\n\n    this.calcEpsilon()\n  }\n\n  calcEpsilon() {\n    /* The results of the program are returned in these\n     * global variables:\n     */\n\n  \tvar T; // double\n  \tT = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].timeInJulianCenturies(this.julianDate)\n\n  \t/* DE403 values. */\n  \t\tT /= 10.0;\n  \tthis.eps = ((((((((( 2.45e-10*T + 5.79e-9)*T + 2.787e-7)*T\n  \t\t+ 7.12e-7)*T - 3.905e-5)*T - 2.4967e-3)*T\n  \t\t- 5.138e-3)*T + 1.9989)*T - 0.0175)*T - 468.33960)*T\n  \t\t+ 84381.406173;\n  \tthis.eps *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n  \tthis.coseps = Math.cos( this.eps );\n  \tthis.sineps = Math.sin( this.eps );\n  \tthis.jdeps = this.julianDate;\n\n    return {\n      jdeps: this.jdeps,\n      eps: this.eps,\n      coseps: this.coseps,\n      sineps: this.sineps\n    }\n  };\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/Epsilon.js?");

/***/ }),

/***/ "./src/utilities/VelocityEarth.js":
/*!****************************************!*\
  !*** ./src/utilities/VelocityEarth.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return VelocityEarth; });\n/* harmony import */ var _kepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kepler */ \"./src/utilities/kepler.js\");\n\n\nclass VelocityEarth {\n  constructor(julianDate, earthBody) {\n    this.jvearth = julianDate,\n    this.vearth = this.calcVelocityEarth(julianDate, earthBody)\n\n    this.calcVelocityEarth = this.calcVelocityEarth.bind(this)\n  }\n\n  calcVelocityEarth(julianDate, earthBody) {\n  \tvar e = [], p = [], t; // double\n  \tvar i; // int\n\n  \t/* calculate heliocentric position of the earth\n  \t * as of a short time ago.\n  \t */\n  \tt = 0.005;\n\n    const coords = []\n  \tconst keplerEarthBody = _kepler__WEBPACK_IMPORTED_MODULE_0__[\"kepler\"].calc(julianDate - t, {...earthBody}, e, p);\n  \tfor( i=0; i<3; i++ ) {\n  \t\tcoords[i] = (keplerEarthBody.position.rect[i] - e[i])/t;\n  \t}\n    return coords\n  }\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/VelocityEarth.js?");

/***/ }),

/***/ "./src/utilities/aberration.js":
/*!*************************************!*\
  !*** ./src/utilities/aberration.js ***!
  \*************************************/
/*! exports provided: aberration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aberration\", function() { return aberration; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n/* harmony import */ var _VelocityEarth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VelocityEarth */ \"./src/utilities/VelocityEarth.js\");\n\n\n\n\nconst aberration = {\n  calc: (p, earthBody, observer, body, result) => {\n  \tvar A, B, C; // double\n  \tvar betai, pV; // double\n  \tvar x = [], V = []; // double\n  \tvar i; // int\n\n  \t/* Calculate the velocity of the earth (see vearth.c).\n  \t */\n  \tconst velocityEarth = new _VelocityEarth__WEBPACK_IMPORTED_MODULE_2__[\"default\"](observer.Date.julian, earthBody);\n  \tbetai = 0.0;\n  \tpV = 0.0;\n  \tfor( i=0; i<3; i++ ) {\n  \t\tA = velocityEarth.vearth[i] / _constants__WEBPACK_IMPORTED_MODULE_0__[\"CLIGHTAUD\"];\n  \t\tV[i] = A;\n  \t\tbetai += A*A;\n  \t\tpV += p[i] * A;\n  \t}\n  \t/* Make the adjustment for aberration.\n  \t */\n  \tbetai = Math.sqrt( 1.0 - betai );\n  \tC = 1.0 + pV;\n  \tA = betai/C;\n  \tB = (1.0  +  pV/(1.0 + betai))/C;\n\n  \tfor( i=0; i<3; i++ ) {\n  \t\tC = A * p[i]  +  B * V[i];\n  \t\tx[i] = C;\n  \t\tbody.locals.dp[i] = C - p[i];\n  \t}\n\n  \tresult = result || {};\n\n    _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].showcor (p, body.locals.dp, result);\n  \tfor( i=0; i<3; i++ ) {\n  \t\tp[i] = x[i];\n  \t}\n\n  \treturn result;\n  }\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/aberration.js?");

/***/ }),

/***/ "./src/utilities/altaz.js":
/*!********************************!*\
  !*** ./src/utilities/altaz.js ***!
  \********************************/
/*! exports provided: altaz */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"altaz\", function() { return altaz; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _diurnal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diurnal */ \"./src/utilities/diurnal.js\");\n/* harmony import */ var _siderial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./siderial */ \"./src/utilities/siderial.js\");\n/* harmony import */ var _refraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./refraction */ \"./src/utilities/refraction.js\");\n/* harmony import */ var _transit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transit */ \"./src/utilities/transit.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\n\n\n\n\nconst altaz = {\n\tazimuth: 0.0,\n\televation: 0.0,\n\trefracted_elevation: 0.0\n};\n\naltaz.calc = (pol, date, body, observer, result) => {\n\tvar dec, cosdec, sindec, lha, coslha, sinlha; // double\n\tvar ra, dist, last, alt, az, coslat, sinlat; // double\n\tvar N, D, x, y, z; // double\n\n\tresult = result || {};\n\n\tra = pol[0];\n\tdec = pol[1];\n\tdist = pol[2];\n\t/* local apparent siderial time, seconds converted to radians\n\t */\n\tlast = _siderial__WEBPACK_IMPORTED_MODULE_2__[\"siderial\"].calc( date, observer.tlong ) * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] / 240.0;\n\tlha = last - ra; /* local hour angle, radians */\n\tresult.dLocalApparentSiderialTime = last;\n\tresult.localApparentSiderialTime = _util__WEBPACK_IMPORTED_MODULE_5__[\"util\"].hms (last);\n\n\tresult.diurnalAberation = _diurnal__WEBPACK_IMPORTED_MODULE_1__[\"diurnal\"].aberration( last, ra, dec, observer );\n\tra = result.diurnalAberation.ra;\n\tdec = result.diurnalAberation.dec;\n\t/* Do rise, set, and transit times\n\t trnsit.c takes diurnal parallax into account,\n\t but not diurnal aberration.  */\n\tlha = last - ra;\n\tresult.transit = _transit__WEBPACK_IMPORTED_MODULE_4__[\"transit\"].calc( date, lha, dec, body, observer );\n\t/* Diurnal parallax\n\t */\n\tresult.diurnalParallax = _diurnal__WEBPACK_IMPORTED_MODULE_1__[\"diurnal\"].parallax(last, ra, dec, dist, observer);\n\tra = result.diurnalParallax.ra;\n\tdec = result.diurnalParallax.dec;\n\t/* Diurnal aberration\n\t */\n\t/*diurab( last, &ra, &dec );*/\n\n\t/* Convert ra and dec to altitude and azimuth\n\t */\n\tcosdec = Math.cos(dec);\n\tsindec = Math.sin(dec);\n\tlha = last - ra;\n\tcoslha = Math.cos(lha);\n\tsinlha = Math.sin(lha);\n\n\t/* Use the geodetic latitude for altitude and azimuth */\n\tx = _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * observer.glat;\n\tcoslat = Math.cos(x);\n\tsinlat = Math.sin(x);\n\n\tN = -cosdec * sinlha;\n\tD =  sindec * coslat  -  cosdec * coslha * sinlat;\n\taz = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * _util__WEBPACK_IMPORTED_MODULE_5__[\"util\"].zatan2( D, N );\n\talt = sindec * sinlat  +  cosdec * coslha * coslat;\n\talt = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * Math.asin(alt);\n\n\t/* Store results */\n\taltaz.azimuth = az;\n\taltaz.elevation = alt; /* Save unrefracted value. */\n\n\t/* Correction for atmospheric refraction\n\t * unit = degrees\n\t */\n\tD = _refraction__WEBPACK_IMPORTED_MODULE_3__[\"refraction\"].calc( alt, observer );\n\talt += D;\n\taltaz.refracted_elevation = alt;\n\n\t/* Convert back to R.A. and Dec.\n\t */\n\ty = Math.sin(_constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"]*alt);\n\tx = Math.cos(_constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"]*alt);\n\tz = Math.cos(_constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"]*az);\n\tsinlha = -x * Math.sin(_constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"]*az);\n\tcoslha = y*coslat - x*z*sinlat;\n\tsindec = y*sinlat + x*z*coslat;\n\tlha = _util__WEBPACK_IMPORTED_MODULE_5__[\"util\"].zatan2( coslha, sinlha );\n\n\ty = ra; /* save previous values, before refrac() */\n\tz = dec;\n\tdec = Math.asin( sindec );\n\tra = last - lha;\n\ty = ra - y; /* change in ra */\n\twhile( y < - Math.PI ) {\n\t\ty += _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\twhile( y > Math.PI ) {\n\t\ty -= _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\ty = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * y/15.0;\n\tz = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * (dec - z);\n\n\tresult.atmosphericRefraction = {\n\t\tdeg: D,\n\t\tdRA: y,\n\t\tdDec: z\n\t};\n\n\tresult.topocentric = {\n\t\taltitude: alt,\n\t\tazimuth: az,\n\t\tra: ra,\n\t\tdec: dec,\n\t\tdRA: _util__WEBPACK_IMPORTED_MODULE_5__[\"util\"].hms (ra),\n\t\tdDec: _util__WEBPACK_IMPORTED_MODULE_5__[\"util\"].dms (dec)\n\t};\n\n\treturn result;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/altaz.js?");

/***/ }),

/***/ "./src/utilities/constellation.js":
/*!****************************************!*\
  !*** ./src/utilities/constellation.js ***!
  \****************************************/
/*! exports provided: constellation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"constellation\", function() { return constellation; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _precess__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./precess */ \"./src/utilities/precess.js\");\n\n\n\nconst constellation = {\n\t/* Constellation names\n\t */\n\tconstel: [\n\t\t\"And Andromedae\",\n\t\t\"Ant Antliae\",\n\t\t\"Aps Apodis\",\n\t\t\"Aql Aquilae\",\n\t\t\"Aqr Aquarii\",\n\t\t\"Ari Arietis\",\n\t\t\"Ara Arae\",\n\t\t\"Aur Aurigae\",\n\t\t\"Boo Bootis\",\n\t\t\"Cae Caeli\",\n\t\t\"Cam Camelopardalis\",\n\t\t\"Can Cancri\",\t\t/* also abbreviated Cnc */\n\t\t\"Cap Capricorni\",\n\t\t\"Car Carinae\",\n\t\t\"Cas Cassiopeiae\",\n\t\t\"Cen Centauri\",\n\t\t\"Cep Cephei\",\n\t\t\"Cet Ceti\",\n\t\t\"Cha Chamaeleontis\",\n\t\t\"Cir Circini\",\n\t\t\"CMa Canis Majoris\",\n\t\t\"CMi Canis Minoris\",\n\t\t\"Cnc Cancri\",\n\t\t\"Col Columbae\",\n\t\t\"Com Comae Berenices\",\n\t\t\"CrA Coronae Austrinae\",\n\t\t\"CrB Coronae Borealis\",\n\t\t\"Crt Crateris\",\n\t\t\"Cru Crucis\",\n\t\t\"Crv Corvi\",\n\t\t\"CVn Canum Venaticorum\",\n\t\t\"Cyg Cygni\",\n\t\t\"Del Delphini\",\n\t\t\"Dor Doradus\",\n\t\t\"Dra Draconis\",\n\t\t\"Equ Equulei\",\n\t\t\"Eri Eridani\",\n\t\t\"For Fornacis\",\n\t\t\"Gem Geminorum\",\n\t\t\"Gru Gruis\",\n\t\t\"Her Herculis\",\n\t\t\"Hor Horologii\",\n\t\t\"Hya Hydrae\",\n\t\t\"Hyi Hydri\",\n\t\t\"Ind Indi\",\n\t\t\"Lac Lacertae\",\n\t\t\"Leo Leonis\",\n\t\t\"Lep Leporis\",\n\t\t\"Lib Librae\",\n\t\t\"LMi Leonis Minoris\",\n\t\t\"Lup Lupi\",\n\t\t\"Lyn Lyncis\",\n\t\t\"Lyr Lyrae\",\n\t\t\"Men Mensae\",\n\t\t\"Mic Microscopii\",\n\t\t\"Mon Monocerotis\",\n\t\t\"Mus Muscae\",\n\t\t\"Nor Normae\",\n\t\t\"Oct Octantis\",\n\t\t\"Oph Ophiuchi\",\n\t\t\"Ori Orionis\",\n\t\t\"Pav Pavonis\",\n\t\t\"Peg Pegasi\",\n\t\t\"Per Persei\",\n\t\t\"Phe Phoenicis\",\n\t\t\"Pic Pictoris\",\n\t\t\"PsA Piscis Austrini\",\n\t\t\"Psc Piscium\",\n\t\t\"Pup Puppis\",\n\t\t\"Pyx Pyxidis\",\n\t\t\"Ret Reticuli\",\n\t\t\"Scl Sculptoris\",\n\t\t\"Sco Scorpii\",\n\t\t\"Sct Scuti\",\n\t\t\"Ser Serpentis\",\n\t\t\"Sex Sextantis\",\n\t\t\"Sge Sagittae\",\n\t\t\"Sgr Sagittarii\",\n\t\t\"Tau Tauri\",\n\t\t\"Tel Telescopii\",\n\t\t\"TrA Trianguli Australis\",\n\t\t\"Tri Trianguli\",\n\t\t\"Tuc Tucanae\",\n\t\t\"UMa Ursae Majoris\",\n\t\t\"UMi Ursae Minoris\",\n\t\t\"Vel Velorum\",\n\t\t\"Vir Virginis\",\n\t\t\"Vol Volantis\",\n\t\t\"Vul Vulpeculae\"\n\t],\n\n\t/* Greek letters\n\t */\n\tgreek: [\n\t\t\"alpha\",\n\t\t\"beta\",\n\t\t\"gamma\",\n\t\t\"delta\",\n\t\t\"epsilon\",\n\t\t\"zeta\",\n\t\t\"eta\",\n\t\t\"theta\",\n\t\t\"iota\",\n\t\t\"kappa\",\n\t\t\"lambda\",\n\t\t\"mu\",\n\t\t\"nu\",\n\t\t\"xi\",\n\t\t\"omicron\",\n\t\t\"pi\",\n\t\t\"rho\",\n\t\t\"sigma\",\n\t\t\"tau\",\n\t\t\"upsilon\",\n\t\t\"phi\",\n\t\t\"chi\",\n\t\t\"psi\",\n\t\t\"omega\"\n\t],\n\n\t/* Table of constellation boundaries.\n\n\t Roman, Nancy Grace, \"Identification of a Constellation from a Position\"\n\t Pub. Astron. Soc. Pac. 99, 695, (1987)\n\n\t Array items are\n\t Lower Right Ascension, Upper Right Ascension,\n\t both in units of hours times 3600;\n\t Lower Declination, in units of degrees times 3600;\n\t and array index of constellation name.  */\n\tbndries: [\n\t\t0,  86400, 316800,  84,\n\t\t28800,  52200, 311400,  84,\n\t\t75600,  82800, 310200,  84,\n\t\t64800,  75600, 309600,  84,\n\t\t0,  28800, 306000,  16,\n\t\t33000,  38400, 295200,  10,\n\t\t0,  18000, 288000,  16,\n\t\t38400,  52200, 288000,  10,\n\t\t63000,  64800, 288000,  84,\n\t\t72600,  75600, 288000,  34,\n\t\t0,  12630, 277200,  16,\n\t\t41400,  48900, 277200,  10,\n\t\t59520,  63000, 270000,  84,\n\t\t72600,  74400, 270000,  16,\n\t\t28680,  33000, 264600,  10,\n\t\t33000,  40800, 264600,  34,\n\t\t46800,  59520, 252000,  84,\n\t\t11160,  12300, 244800,  14,\n\t\t73500,  74400, 241200,  34,\n\t\t40800,  43200, 239400,  34,\n\t\t0,   1200, 237600,  16,\n\t\t50400,  56400, 237600,  84,\n\t\t84900,  86400, 237600,  16,\n\t\t43200,  48600, 230400,  34,\n\t\t48600,  51900, 226800,  34,\n\t\t83400,  84900, 226800,  16,\n\t\t21960,  25200, 223200,  10,\n\t\t72000,  73500, 221400,  34,\n\t\t73932,  74160, 219300,  16,\n\t\t25200,  28680, 216000,  10,\n\t\t28680,  30300, 216000,  83,\n\t\t71160,  72000, 214200,  34,\n\t\t72000,  73932, 214200,  16,\n\t\t82320,  83400, 212700,  16,\n\t\t0,   8760, 210600,  14,\n\t\t69900,  71160, 208800,  34,\n\t\t6120,   6870, 207000,  14,\n\t\t8760,  11160, 205200,  14,\n\t\t11160,  11400, 205200,  10,\n\t\t80340,  82320, 202500,  16,\n\t\t18000,  21960, 201600,  10,\n\t\t50520,  51900, 199800,  83,\n\t\t51900,  69900, 199800,  34,\n\t\t11400,  12000, 198000,  10,\n\t\t79680,  80340, 198000,  16,\n\t\t74160,  79080, 197400,  16,\n\t\t0,   6120, 194400,  14,\n\t\t21960,  23400, 194400,  51,\n\t\t43500,  48600, 190800,  83,\n\t\t54900,  56700, 190800,  34,\n\t\t79080,  79680, 189900,  16,\n\t\t12000,  18000, 189000,  10,\n\t\t82320,  84000, 189000,  14,\n\t\t56700,  61200, 185400,  34,\n\t\t7350,   9060, 181800,  63,\n\t\t61200,  65640, 181800,  34,\n\t\t0,   4920, 180000,  14,\n\t\t4920,   6000, 180000,  63,\n\t\t23400,  24480, 180000,  51,\n\t\t84000,  86400, 180000,  14,\n\t\t48600,  50520, 174600,  83,\n\t\t0,   4020, 172800,  14,\n\t\t84900,  86400, 172800,  14,\n\t\t65430,  65640, 171000,  40,\n\t\t65640,  68700, 171000,  34,\n\t\t68700,  69000, 171000,  31,\n\t\t6000,   7350, 169200,  63,\n\t\t30300,  33000, 169200,  83,\n\t\t600,   3120, 165600,  14,\n\t\t43200,  43500, 162000,  83,\n\t\t24480,  26520, 160200,  51,\n\t\t78870,  79080, 158400,  31,\n\t\t78750,  78870, 157500,  31,\n\t\t69000,  69840, 156600,  31,\n\t\t33000,  36600, 151200,  83,\n\t\t36600,  38820, 144000,  83,\n\t\t55560,  56700, 144000,   8,\n\t\t56700,  58800, 144000,  40,\n\t\t33300,  34500, 143100,  51,\n\t\t0,   9060, 132300,   0,\n\t\t9060,   9240, 132300,  63,\n\t\t69690,  69840, 131400,  52,\n\t\t16200,  16890, 129600,  63,\n\t\t78240,  78750, 129600,  31,\n\t\t78750,  79200, 129600,  45,\n\t\t23520,  26520, 127800,   7,\n\t\t26520,  27900, 127800,  51,\n\t\t0,   7200, 126000,   0,\n\t\t79200,  82140, 126000,  45,\n\t\t82140,  82320, 124200,  45,\n\t\t82320,  84600, 124200,   0,\n\t\t9240,   9780, 122400,  63,\n\t\t38820,  39600, 122400,  83,\n\t\t43200,  44400, 122400,  30,\n\t\t27900,  33300, 120600,  51,\n\t\t33300,  35580, 120600,  49,\n\t\t2580,   5070, 118800,   0,\n\t\t54660,  55560, 118800,   8,\n\t\t84600,  85500, 115500,   0,\n\t\t44400,  47700, 115200,  30,\n\t\t85500,  86400, 112800,   0,\n\t\t50250,  50520, 110700,  30,\n\t\t8700,   9780, 110400,  81,\n\t\t9780,  16200, 110400,  63,\n\t\t16200,  17100, 108000,   7,\n\t\t65430,  69690, 108000,  52,\n\t\t39600,  43200, 104400,  83,\n\t\t70800,  75300, 104400,  31,\n\t\t17100,  21180, 102600,   7,\n\t\t35580,  37800, 102600,  49,\n\t\t47700,  50250, 102600,  30,\n\t\t0,    240, 100800,   0,\n\t\t5070,   6000, 100800,  81,\n\t\t21180,  23520, 100800,   7,\n\t\t28380,  28800, 100800,  38,\n\t\t75300,  78240, 100800,  31,\n\t\t69330,  70800,  99000,  31,\n\t\t6900,   8700,  98100,  81,\n\t\t58200,  58800,  97200,  26,\n\t\t54300,  54660,  93600,   8,\n\t\t54660,  58200,  93600,  26,\n\t\t66120,  67920,  93600,  52,\n\t\t38700,  39600,  91800,  49,\n\t\t67920,  69330,  91800,  52,\n\t\t6000,   6900,  90000,  81,\n\t\t2580,   3060,  85500,  67,\n\t\t37800,  38700,  84600,  49,\n\t\t76500,  77100,  84600,  88,\n\t\t20520,  21180,  82200,  78,\n\t\t240,    510,  79200,   0,\n\t\t57300,  57720,  79200,  74,\n\t\t21180,  22380,  77400,  38,\n\t\t71400,  72900,  76500,  88,\n\t\t67920,  69300,  75900,  88,\n\t\t510,   3060,  75600,   0,\n\t\t72900,  74040,  73800,  88,\n\t\t28110,  28380,  72000,  38,\n\t\t74040,  76500,  70200,  88,\n\t\t69300,  71400,  69000,  88,\n\t\t11820,  12120,  68400,   5,\n\t\t67920,  68400,  66600,  76,\n\t\t20520,  20760,  64800,  60,\n\t\t22380,  22710,  63000,  38,\n\t\t68400,  71400,  58200,  76,\n\t\t17880,  19200,  57600,  78,\n\t\t57300,  57900,  57600,  40,\n\t\t71400,  72900,  56700,  76,\n\t\t16620,  17880,  55800,  78,\n\t\t19200,  20160,  55800,  78,\n\t\t46200,  48600,  54000,  24,\n\t\t62100,  65700,  51600,  40,\n\t\t42720,  46200,  50400,  24,\n\t\t27000,  28110,  48600,  38,\n\t\t60300,  62100,  46200,  40,\n\t\t0,    510,  45000,  62,\n\t\t20160,  20760,  45000,  78,\n\t\t25200,  27000,  45000,  38,\n\t\t76020,  76800,  45000,  62,\n\t\t22710,  24960,  43200,  38,\n\t\t65700,  67920,  43200,  40,\n\t\t75150,  75780,  42600,  32,\n\t\t75780,  76020,  42600,  62,\n\t\t41460,  42720,  39600,  46,\n\t\t22470,  22710,  36000,  60,\n\t\t24960,  25200,  36000,  38,\n\t\t28110,  28530,  36000,  22,\n\t\t85800,  86400,  36000,  62,\n\t\t6000,  11820,  35700,   5,\n\t\t72510,  73080,  30600,  32,\n\t\t48600,  54300,  28800,   8,\n\t\t81900,  85800,  27000,  62,\n\t\t28530,  33300,  25200,  22,\n\t\t33300,  38700,  25200,  46,\n\t\t65700,  67184,  22500,  59,\n\t\t67184,  67920,  22500,   3,\n\t\t75000,  75150,  21600,  32,\n\t\t25200,  25260,  19800,  21,\n\t\t65700,  66330,  16200,  74,\n\t\t57900,  60300,  14400,  40,\n\t\t65700,  66330,  10800,  59,\n\t\t77280,  78000,   9900,  62,\n\t\t0,   7200,   7200,  67,\n\t\t66900,  67920,   7200,  74,\n\t\t73080,  75000,   7200,  32,\n\t\t75000,  76800,   7200,  35,\n\t\t76800,  77280,   7200,  62,\n\t\t79200,  81900,   7200,  62,\n\t\t78000,  79200,   6300,  62,\n\t\t25260,  25920,   5400,  21,\n\t\t12900,  16620,      0,  78,\n\t\t16620,  16800,      0,  60,\n\t\t25920,  29100,      0,  21,\n\t\t52800,  54300,      0,  86,\n\t\t64200,  65700,      0,  59,\n\t\t9540,  11820,  -6300,  17,\n\t\t11820,  12900,  -6300,  78,\n\t\t54300,  58560, -11700,  74,\n\t\t16800,  18300, -14400,  60,\n\t\t21000,  22470, -14400,  60,\n\t\t64200,  64680, -14400,  74,\n\t\t65700,  66900, -14400,  74,\n\t\t66900,  67920, -14400,   3,\n\t\t81900,  85800, -14400,  67,\n\t\t38700,  41460, -21600,  46,\n\t\t41460,  42600, -21600,  86,\n\t\t0,   1200, -25200,  67,\n\t\t85800,  86400, -25200,  67,\n\t\t51300,  52800, -28800,  86,\n\t\t57300,  58560, -28800,  59,\n\t\t72000,  73920, -32400,   3,\n\t\t76800,  78720, -32400,   4,\n\t\t61800,  64680, -36000,  59,\n\t\t21000,  29100, -39600,  55,\n\t\t17700,  18300, -39600,  36,\n\t\t18300,  21000, -39600,  60,\n\t\t29100,  30120, -39600,  42,\n\t\t34500,  38700, -39600,  75,\n\t\t42600,  46200, -39600,  86,\n\t\t63300,  63600, -42000,  59,\n\t\t67920,  72000, -43320,   3,\n\t\t17400,  17700, -52200,  36,\n\t\t73920,  76800, -54000,   4,\n\t\t61800,  65700, -57600,  74,\n\t\t65700,  67920, -57600,  73,\n\t\t30120,  30900, -61200,  42,\n\t\t58560,  58950, -65700,  59,\n\t\t30900,  32700, -68400,  42,\n\t\t38700,  39000, -68400,  27,\n\t\t58560,  58950, -69300,  59,\n\t\t56400,  57300, -72000,  48,\n\t\t45300,  46200, -79200,  29,\n\t\t46200,  51300, -79200,  86,\n\t\t32700,  35100, -86400,  42,\n\t\t6000,   9540, -87780,  17,\n\t\t9540,  13500, -87780,  36,\n\t\t39000,  42600, -88200,  27,\n\t\t42600,  45300, -88200,  29,\n\t\t51300,  53700, -88200,  48,\n\t\t58560,  60300, -88500,  59,\n\t\t0,   6000, -91800,  17,\n\t\t76800,  78720, -91800,  12,\n\t\t78720,  85800, -91800,   4,\n\t\t85800,  86400, -91800,  17,\n\t\t35100,  36900, -95400,  42,\n\t\t16920,  17400, -98100,  36,\n\t\t17400,  22020, -98100,  47,\n\t\t72000,  76800, -100800,  12,\n\t\t36900,  38100, -105000,  42,\n\t\t45300,  53700, -106200,  42,\n\t\t53700,  56400, -106200,  48,\n\t\t56400,  57600, -106200,  72,\n\t\t16500,  16920, -108000,  36,\n\t\t60300,  63360, -108000,  59,\n\t\t63360,  64200, -108000,  77,\n\t\t38100,  39000, -112200,  42,\n\t\t22020,  26520, -118800,  20,\n\t\t44100,  45300, -118800,  42,\n\t\t39000,  44100, -126000,  42,\n\t\t12600,  13500, -129600,  37,\n\t\t30120,  33720, -132300,  69,\n\t\t15360,  16500, -133200,  36,\n\t\t64200,  69000, -133200,  77,\n\t\t76800,  82800, -133200,  66,\n\t\t82800,  84000, -133200,  71,\n\t\t10800,  12600, -142500,  37,\n\t\t33720,  39600, -143100,   1,\n\t\t0,   6000, -144000,  71,\n\t\t6000,  10800, -144000,  37,\n\t\t13920,  15360, -144000,  36,\n\t\t84000,  86400, -144000,  71,\n\t\t51000,  53700, -151200,  15,\n\t\t56400,  57600, -151200,  50,\n\t\t57600,  59115, -151200,  72,\n\t\t17400,  18000, -154800,   9,\n\t\t18000,  23700, -154800,  23,\n\t\t28800,  30120, -154800,  68,\n\t\t12300,  13920, -158400,  36,\n\t\t59115,  64200, -163800,  72,\n\t\t64200,  69000, -163800,  25,\n\t\t69000,  73200, -163800,  77,\n\t\t73200,  76800, -163800,  54,\n\t\t10800,  12300, -165600,  36,\n\t\t16200,  17400, -167400,   9,\n\t\t55200,  56400, -172800,  50,\n\t\t0,   8400, -173400,  64,\n\t\t9600,  10800, -176400,  36,\n\t\t14700,  15360, -176400,  41,\n\t\t15360,  16200, -176400,   9,\n\t\t76800,  79200, -180000,  39,\n\t\t21600,  28800, -182700,  68,\n\t\t28800,  29400, -182700,  85,\n\t\t8700,   9600, -183600,  36,\n\t\t13800,  14700, -183600,  41,\n\t\t0,   6600, -185400,  64,\n\t\t21600,  22200, -189000,  13,\n\t\t29400,  30420, -190800,  85,\n\t\t12600,  13800, -191400,  41,\n\t\t13800,  14400, -191400,  33,\n\t\t0,   5700, -192600,  64,\n\t\t7800,   8700, -194400,  36,\n\t\t16200,  18000, -194400,  65,\n\t\t54180,  55200, -194400,  50,\n\t\t30420,  31800, -196200,  85,\n\t\t22200,  23400, -198000,  13,\n\t\t42600,  46200, -198000,  15,\n\t\t51000,  54180, -198000,  50,\n\t\t54180,  55200, -198000,  57,\n\t\t14400,  15600, -203400,  33,\n\t\t31800,  39600, -203400,  85,\n\t\t39600,  40500, -203400,  15,\n\t\t63000,  64800, -205200,   6,\n\t\t64800,  73200, -205200,  79,\n\t\t79200,  84000, -205200,  39,\n\t\t11520,  12600, -207000,  41,\n\t\t18000,  19800, -207000,  65,\n\t\t23400,  24600, -208800,  13,\n\t\t0,   4800, -210600,  64,\n\t\t4800,   7800, -210600,  36,\n\t\t84000,  86400, -210600,  64,\n\t\t15600,  16500, -212400,  33,\n\t\t55200,  59115, -216000,  57,\n\t\t73200,  76800, -216000,  44,\n\t\t19800,  21600, -219600,  65,\n\t\t54600,  55200, -219600,  19,\n\t\t59115,  59700, -219600,   6,\n\t\t53700,  54600, -228900,  19,\n\t\t59700,  60300, -228900,   6,\n\t\t21600,  24600, -230400,  65,\n\t\t24600,  32520, -230400,  13,\n\t\t40500,  42600, -230400,  15,\n\t\t42600,  46200, -230400,  28,\n\t\t46200,  52320, -230400,  15,\n\t\t48600,  49200, -234000,  19,\n\t\t60300,  60600, -234000,   6,\n\t\t7800,  11520, -243000,  41,\n\t\t11520,  16500, -243000,  70,\n\t\t53100,  53700, -243000,  19,\n\t\t60600,  63000, -243000,   6,\n\t\t63000,  64800, -243000,  61,\n\t\t79200,  84000, -243000,  82,\n\t\t16500,  23700, -252000,  33,\n\t\t49200,  53100, -252000,  19,\n\t\t53100,  61200, -252000,  80,\n\t\t0,   4800, -270000,  82,\n\t\t12600,  16500, -270000,  43,\n\t\t23700,  32520, -270000,  87,\n\t\t32520,  40500, -270000,  13,\n\t\t40500,  49200, -270000,  56,\n\t\t64800,  76800, -270000,  61,\n\t\t76800,  84000, -270000,  44,\n\t\t84000,  86400, -270000,  82,\n\t\t2700,   4800, -273600,  82,\n\t\t0,  12600, -297000,  43,\n\t\t27600,  49200, -297000,  18,\n\t\t49200,  64800, -297000,   2,\n\t\t12600,  27600, -306000,  53,\n\t\t0,  86400, -324000,  58\n\t]\n};\n\n/* Return the constellation name corresponding to a given mean equatorial\n position P.  EPOCH is the precessional equinox and ecliptic date\n of P.  */\nconstellation.calc = (pp, epoch) => {\n\tvar i, k; // int\n\tvar ra, dec, d; // double\n\tvar p = []; // double\n\n\tfor (i = 0; i < 3; i++) {\n\t\tp[i] = pp[i];\n\t}\n\n\t/* Precess from given epoch to J2000.  */\n\tp = _precess__WEBPACK_IMPORTED_MODULE_1__[\"precess\"].calc(p, epoch.julian, 1);\n\t/* Precess from J2000 to Besselian epoch 1875.0.  */\n\tp = _precess__WEBPACK_IMPORTED_MODULE_1__[\"precess\"].calc(p, 2405889.25855, -1);\n\td = p[0] * p[0] + p[1] * p[1] + p[2] * p[2];\n\td = Math.sqrt (d);\n\tra = Math.atan2 (p[1], p[0]) * (_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * 3600. / 15.);\n\tif (ra < 0.0) {\n\t\tra += 86400.0;\n\t}\n\tdec = Math.asin (p[2] / d) * (_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * 3600.);\n\n\t/* FIND CONSTELLATION SUCH THAT THE DECLINATION ENTERED IS HIGHER THAN\n\t THE LOWER BOUNDARY OF THE CONSTELLATION WHEN THE UPPER AND LOWER\n\t RIGHT ASCENSIONS FOR THE CONSTELLATION BOUND THE ENTERED RIGHT\n\t ASCENSION\n\t */\n\tfor (i = 0; i < constellation.bndries.length / 4; i++) {\n\t\tk = i << 2;\n\t\tif (ra >= constellation.bndries[k] && ra < constellation.bndries[k+1] && dec > constellation.bndries[k+2]) {\n\t\t\tk = constellation.bndries [k+3];\n\t\t\treturn constellation.constel[k];\n\t\t}\n\t}\n\treturn constellation.constel[-1];\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/constellation.js?");

/***/ }),

/***/ "./src/utilities/deflection.js":
/*!*************************************!*\
  !*** ./src/utilities/deflection.js ***!
  \*************************************/
/*! exports provided: deflection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deflection\", function() { return deflection; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\nconst deflection = {};\n\ndeflection.calc = function (p, q, e, body, result) {\n\tvar C; // double\n\tvar i; // int\n\n\tC = 1.974e-8/(body.locals.SE*(1.0+body.locals.qe));\n\tfor( i=0; i<3; i++ ) {\n\t\tbody.locals.dp[i] = C*(body.locals.pq*e[i]/body.locals.SE - body.locals.ep*q[i]/body.locals.SO);\n\t\tp[i] += body.locals.dp[i];\n\t}\n\n\tresult = result || {};\n\n\tresult.sunElongation = Math.acos ( -body.locals.ep ) / _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\tresult.lightDeflection = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].showcor( p, body.locals.dp );\n\n\treturn result;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/deflection.js?");

/***/ }),

/***/ "./src/utilities/diurnal.js":
/*!**********************************!*\
  !*** ./src/utilities/diurnal.js ***!
  \**********************************/
/*! exports provided: diurnal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"diurnal\", function() { return diurnal; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\nconst diurnal = {\n\n};\n\n/* Diurnal aberration\n * This formula is less rigorous than the method used for\n * annual aberration.  However, the correction is small.\n */\ndiurnal.aberration = (last, ra, dec, observer, result) => {\n\tvar lha, coslha, sinlha, cosdec, sindec; // double\n\tvar coslat, N, D; // double\n\n\tresult = result || {};\n\tresult.ra = ra;\n\tresult.dec = dec;\n\n\tlha = last - result.ra;\n\tcoslha = Math.cos(lha);\n\tsinlha = Math.sin(lha);\n\tcosdec = Math.cos(result.dec);\n\tsindec = Math.sin(result.dec);\n\tcoslat = Math.cos( _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * observer.tlat );\n\n\tif( cosdec != 0.0 )\n\t\tN = 1.5472e-6* observer.trho *coslat*coslha/cosdec;\n\telse\n\t\tN = 0.0;\n\tresult.ra += N;\n\n\tD = 1.5472e-6* observer.trho *coslat*sinlha*sindec;\n\tresult.dec += D;\n\n\tresult.dRA = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * N/15.0;\n\tresult.dDec = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * D;\n\n\treturn result;\n};\n\n/* Diurnal parallax, AA page D3\n */\ndiurnal.parallax = (last, ra, dec, dist, observer, result) => {\n  let DISFAC = 0.0 /* Earth radii per au. */\n\n\tvar cosdec, sindec, coslat, sinlat; // double\n\tvar p = [], dp = [], x, y, z, D; // double\n\n\tresult = result || {};\n\tresult.ra = ra;\n\tresult.dec = dec;\n\n\t/* Don't bother with this unless the equatorial horizontal parallax\n\t * is at least 0.005\"\n\t */\n\tif( dist > 1758.8 ) {\n\t\treturn result;\n\t}\n\n\tDISFAC = _constants__WEBPACK_IMPORTED_MODULE_0__[\"AU\"] / (0.001 * _constants__WEBPACK_IMPORTED_MODULE_0__[\"AEARTH\"]);\n\tcosdec = Math.cos(result.dec);\n\tsindec = Math.sin(result.dec);\n\n\t/* Observer's astronomical latitude\n\t */\n\tx = observer.tlat * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\tcoslat = Math.cos(x);\n\tsinlat = Math.sin(x);\n\n\t/* Convert to equatorial rectangular coordinates\n\t * in which unit distance = earth radius\n\t */\n\tD = dist * DISFAC;\n\tp[0] = D*cosdec*Math.cos(result.ra);\n\tp[1] = D*cosdec*Math.sin(result.ra);\n\tp[2] = D*sindec;\n\n\tdp[0] = - observer.trho *coslat*Math.cos(last);\n\tdp[1] = - observer.trho *coslat*Math.sin(last);\n\tdp[2] = - observer.trho *sinlat;\n\n\tx = p[0] + dp[0];\n\ty = p[1] + dp[1];\n\tz = p[2] + dp[2];\n\tD = x*x + y*y + z*z;\n\tD = Math.sqrt(D);\t/* topocentric distance */\n\n\t/* recompute ra and dec */\n\tresult.ra = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].zatan2(x,y);\n\tresult.dec = Math.asin(z/D);\n\t_util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].showcor(p, dp, result);\n\treturn result;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/diurnal.js?");

/***/ }),

/***/ "./src/utilities/fk4fk5.js":
/*!*********************************!*\
  !*** ./src/utilities/fk4fk5.js ***!
  \*********************************/
/*! exports provided: fk4fk5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fk4fk5\", function() { return fk4fk5; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\nconst fk4fk5 = {\n\t/* Factors to eliminate E terms of aberration\n\t */\n\tA: [-1.62557e-6, -3.1919e-7, - 1.3843e-7],\n\tAd: [1.244e-3, -1.579e-3, -6.60e-4],\n\n\t/* Transformation matrix for unit direction vector,\n\t * and motion vector in arc seconds per century\n\t */\n\tMat: [\n\t\t0.9999256782, -0.0111820611, -4.8579477e-3,\n\t\t2.42395018e-6, -2.710663e-8, -1.177656e-8,\n\t\t0.0111820610, 0.9999374784, -2.71765e-5,\n\t\t2.710663e-8, 2.42397878e-6, -6.587e-11,\n\t\t4.8579479e-3, -2.71474e-5, 0.9999881997,\n\t\t1.177656e-8, -6.582e-11, 2.42410173e-6,\n\t\t-5.51e-4, -0.238565, 0.435739,\n\t\t0.99994704, -0.01118251, -4.85767e-3,\n\t\t0.238514, -2.667e-3, -8.541e-3,\n\t\t0.01118251, 0.99995883, -2.718e-5,\n\t\t-0.435623, 0.012254, 2.117e-3,\n\t\t4.85767e-3, -2.714e-5, 1.00000956\n\t]\n};\n\n/* Convert FK4 B1950.0 catalogue coordinates\n * to FK5 J2000.0 coordinates.\n * AA page B58.\n */\nfk4fk5.calc = function (p, m, body) {\n\tvar a, b, c; // double\n\tvar u, v; // double array\n\tvar R = []; // double\n\tvar i, j; // int\n\n\t/* Note the direction vector and motion vector\n\t * are already supplied by rstar.c.\n\t */\n\ta = 0.0;\n\tb = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tm[i] *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]; /* motion must be in arc seconds per century */\n\t\ta += this.A[i] * p[i];\n\t\tb += this.Ad[i] * p[i];\n\t}\n\t/* Remove E terms of aberration from FK4\n\t */\n\tfor( i=0; i<3; i++ ) {\n\t\tR[i] = p[i] - this.A[i] + a * p[i];\n\t\tR[i+3] = m[i] - this.Ad[i] + b * p[i];\n\t}\n\n\tvar u_i = 0;\n\tvar v_i = 0;\n\n\t/* Perform matrix multiplication\n\t */\n\tv = this.Mat;\n\tfor( i=0; i<6; i++ ) {\n\t\ta = 0.0;\n\t\tu = R;\n\t\tfor( j=0; j<6; j++ ) {\n\t\t\ta += u [u_i ++] * v [v_i ++];//*u++ * *v++;\n\t\t}\n\t\tif( i < 3 ) {\n\t\t\tp[i] = a;\n\t\t} else {\n\t\t\tm[i-3] = a;\n\t\t}\n\t}\n\n\t/* Transform the answers into J2000 catalogue entries\n\t * in radian measure.\n\t */\n\tb = p[0]*p[0] + p[1]*p[1];\n\ta = b + p[2]*p[2];\n\tc = a;\n\ta = Math.sqrt(a);\n\n\tbody.ra = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].zatan2( p[0], p[1] );\n\tbody.dec = Math.asin( p[2]/a );\n\n\t/* Note motion converted back to radians per (Julian) century */\n\tbody.raMotion = (p[0]*m[1] - p[1]*m[0])/(_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]*b);\n\tbody.decMotion = (m[2]*b - p[2]*(p[0]*m[0] + p[1]*m[1]) )/(_constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]*c*Math.sqrt(b));\n\n\tif( body.parallax > 0.0 ) {\n\t\tc = 0.0;\n\t\tfor( i=0; i<3; i++ ) {\n\t\t\tc += p[i] * m[i];\n\t\t}\n\n\t\t/* divide by RTS to deconvert m (and therefore c)\n\t\t * from arc seconds back to radians\n\t\t */\n\t\tbody.velocity = c/(21.094952663 * body.parallax * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * a);\n\t}\n\tbody.parallax = body.parallax / a;\t/* a is dimensionless */\n\tbody.epoch = _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"];\n\n  return body\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/fk4fk5.js?");

/***/ }),

/***/ "./src/utilities/gplan.js":
/*!********************************!*\
  !*** ./src/utilities/gplan.js ***!
  \********************************/
/*! exports provided: gPlanCalc, gplanSSCC, meanElements, gPlanCalc3, gPlanCalc2, gPlanCalc1, gPlanMoon, get_lp_equinox, get_nf_arcsec, get_ea_arcsec */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gPlanCalc\", function() { return gPlanCalc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gplanSSCC\", function() { return gplanSSCC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"meanElements\", function() { return meanElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gPlanCalc3\", function() { return gPlanCalc3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gPlanCalc2\", function() { return gPlanCalc2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gPlanCalc1\", function() { return gPlanCalc1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gPlanMoon\", function() { return gPlanMoon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_lp_equinox\", function() { return get_lp_equinox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_nf_arcsec\", function() { return get_nf_arcsec; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_ea_arcsec\", function() { return get_ea_arcsec; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _ptables_moonlr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ptables/moonlr */ \"./src/ptables/moonlr.js\");\n/* harmony import */ var _ptables_moonlat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ptables/moonlat */ \"./src/ptables/moonlat.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n\n\n\n\n\n\n\n/*\n Routines to chew through tables of perturbations.\n*/\nconst gPlanCalc = (julianDate, body_ptable, polar) => {\n\tvar su, cu, sv, cv, T; // double\n\tvar t, sl, sb, sr; // double\n\tvar i, j, k, m, n, k1, ip, np, nt; // int\n\tvar p; // char array\n\tvar pl; // double array\n\tvar pb; // double array\n\tvar pr; // double array\n\tT = (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / body_ptable.timescale;\n\tn = body_ptable.maxargs;\n\n  let sscc = { ss: [], cc: [] }\n  /* Calculate sin( i*MM ), etc. for needed multiple angles.  */\n\tfor (i = 0; i < n; i++) {\n\t\tif ((j = body_ptable.max_harmonic[i]) > 0)\n\t\t{\n\t\t\tsr = (_util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600 (_constants__WEBPACK_IMPORTED_MODULE_0__[\"freqs\"][i] * T) + _constants__WEBPACK_IMPORTED_MODULE_0__[\"phases\"][i]) * _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\t\t\tsscc = gplanSSCC(i, sr, j, sscc);\n\t\t}\n\t}\n\n\t/* Point to start of table of arguments. */\n\tp = body_ptable.arg_tbl;\n\n\t/* Point to tabulated cosine and sine amplitudes.  */\n\tpl = body_ptable.lon_tbl;\n\tpb = body_ptable.lat_tbl;\n\tpr = body_ptable.rad_tbl;\n\n\tsl = 0.0;\n\tsb = 0.0;\n\tsr = 0.0;\n\n\tvar p_i = 0;\n\tvar pl_i = 0;\n\tvar pb_i = 0;\n\tvar pr_i = 0;\n\n\tfor (;;) {\n\t\t/* argument of sine and cosine */\n\t\t/* Number of periodic arguments. */\n\t\tnp = p [p_i ++]; // np = *p++\n\t\tif (np < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (np == 0) { /* It is a polynomial term.  */\n\t\t\tnt = p [p_i ++]; // nt = *p++\n\t\t\t/* Longitude polynomial. */\n\t\t\tcu = pl [pl_i ++]; // cu = *pl++;\n\t\t\tfor (ip = 0; ip < nt; ip ++) {\n\t\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\t}\n\t\t\tsl +=  _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600 (cu);\n\t\t\t/* Latitude polynomial. */\n\t\t\tcu = pb [pb_i ++];//*pb++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pb [pb_i ++]; //*pb++;\n\t\t\t}\n\t\t\tsb += cu;\n\t\t\t/* Radius polynomial. */\n\t\t\tcu = pr [pr_i ++]; //*pr++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\t}\n\t\t\tsr += cu;\n\t\t\tcontinue;\n\t\t}\n\t\tk1 = 0;\n\t\tcv = 0.0;\n\t\tsv = 0.0;\n\t\tfor (ip = 0; ip < np; ip++)\n\t\t{\n\t\t\t/* What harmonic.  */\n\t\t\tj = p [p_i ++]; //*p++;\n\t\t\t/* Which planet.  */\n\t\t\tm = p [p_i ++] - 1; // *p++ - 1\n\t\t\tif (j)\n\t\t\t{\n\t\t\t\tk = j;\n\t\t\t\tif (j < 0)\n\t\t\t\t\tk = -k;\n\t\t\t\tk -= 1;\n\t\t\t\tsu =sscc.ss[m][k];\t/* sin(k*angle) */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tsu = -su;\n\t\t\t\tcu = sscc.cc[m][k];\n\t\t\t\tif (k1 == 0)\n\t\t\t\t{\t\t/* set first angle */\n\t\t\t\t\tsv = su;\n\t\t\t\t\tcv = cu;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t/* combine angles */\n\t\t\t\t\tt = su * cv + cu * sv;\n\t\t\t\t\tcv = cu * cv - su * sv;\n\t\t\t\t\tsv = t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* Highest power of T.  */\n\t\tnt = p [p_i ++]; //*p++;\n\t\t/* Longitude. */\n\t\tcu = pl [pl_i ++]; //*pl++;\n\t\tsu = pl [pl_i ++]; //*pl++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\tsu = su * T + pl [pl_i ++]; //*pl++;\n\t\t}\n\t\tsl += cu * cv + su * sv;\n\t\t/* Latitiude. */\n\t\tcu = pb [pb_i ++]; //*pb++;\n\t\tsu = pb [pb_i ++]; //*pb++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pb [pb_i ++]; //*pb++;\n\t\t\tsu = su * T + pb [pb_i ++]; //*pb++;\n\t\t}\n\t\tsb += cu * cv + su * sv;\n\t\t/* Radius. */\n\t\tcu = pr [pr_i ++]; //*pr++;\n\t\tsu = pr [pr_i ++]; //*pr++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\tsu = su * T + pr [pr_i ++]; //*pr++;\n\t\t}\n\t\tsr += cu * cv + su * sv;\n\t}\n\n\tpolar[0] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * sl;\n\tpolar[1] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * sb;\n\tpolar[2] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * body_ptable.distance * sr + body_ptable.distance;\n\n  return polar\n};\n\n/* Prepare lookup table of sin and cos ( i*Lj )\n * for required multiple angles\n */\nconst gplanSSCC = (k, arg, n, sscc= { ss: [], cc: []}) => {\n\tconst su = Math.sin (arg);\n\tconst cu = Math.cos (arg);\n  let cv, sv, s;\n\n  sscc.ss[k] = [];\n\tsscc.cc[k] = [];\n\n  sscc.ss[k][0] = su;\t\t/* sin(L) */\n\tsscc.cc[k][0] = cu;\t\t/* cos(L) */\n\tsv = 2.0 * su * cu;\n\tcv = cu * cu - su * su;\n  sscc.ss[k][1] = sv;\t\t/* sin(2L) */\n  sscc.cc[k][1] = cv;\n\tfor (let i = 2; i < n; i++)\n\t{\n\t\ts = su * cv + cu * sv;\n\t\tcv = cu * cv - su * sv;\n\t\tsv = s;\n    sscc.ss[k][i] = sv;\t\t/* sin( i+1 L ) */\n\t\tsscc.cc[k][i] = cv;\n\t}\n  // console.log(sscc)\n  return sscc\n};\n\n/* Compute mean elements at Julian date J.  */\nconst meanElements = julianDate => {\n  let Args = []\n\tvar x, T, T2; // double\n\n\t/* Time variables.  T is in Julian centuries.  */\n\tT = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].timeInJulianCenturies(julianDate)\n\tT2 = T * T;\n\n\t/* Mean longitudes of planets (Simon et al, 1994)\n\t .047\" subtracted from constant term for offset to DE403 origin. */\n\n\t/* Mercury */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 538101628.6889819 * T + 908103.213 );\n\tx += (6.39e-6 * T\n\t\t- 0.0192789) * T2;\n\tArgs[0] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Venus */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 210664136.4335482 * T + 655127.236 );\n\tx += (-6.27e-6  * T\n\t\t+ 0.0059381) * T2;\n\tArgs[1] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Earth  */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 129597742.283429 * T + 361679.198 );\n\tx += (-5.23e-6 * T\n\t\t- 2.04411e-2 ) * T2;\n\tArgs[2] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Mars */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600(  68905077.493988 * T +  1279558.751 );\n\tx += (-1.043e-5 * T\n\t\t+ 0.0094264) * T2;\n\tArgs[3] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Jupiter */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 10925660.377991 * T + 123665.420 );\n\tx += ((((-3.4e-10 * T\n\t\t+ 5.91e-8) * T\n\t\t+ 4.667e-6) * T\n\t\t+ 5.706e-5) * T\n\t\t- 3.060378e-1)*T2;\n\tArgs[4] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Saturn */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 4399609.855372 * T + 180278.752 );\n\tx += (((( 8.3e-10 * T\n\t\t- 1.452e-7) * T\n\t\t- 1.1484e-5) * T\n\t\t- 1.6618e-4) * T\n\t\t+ 7.561614E-1)*T2;\n\tArgs[5] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Uranus */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1542481.193933 * T + 1130597.971 )\n\t\t+ (0.00002156*T - 0.0175083)*T2;\n\tArgs[6] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Neptune */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 786550.320744 * T + 1095655.149 )\n\t\t+ (-0.00000895*T + 0.0021103)*T2;\n\tArgs[7] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Copied from cmoon.c, DE404 version.  */\n\t/* Mean elongation of moon = D */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1.6029616009939659e+09 * T + 1.0722612202445078e+06 );\n\tx += (((((-3.207663637426e-013 * T\n\t\t+ 2.555243317839e-011) * T\n\t\t+ 2.560078201452e-009) * T\n\t\t- 3.702060118571e-005) * T\n\t\t+ 6.9492746836058421e-03) * T /* D, t^3 */\n\t\t- 6.7352202374457519e+00) * T2; /* D, t^2 */\n\tArgs[9] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Mean distance of moon from its ascending node = F */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1.7395272628437717e+09 * T + 3.3577951412884740e+05 );\n\tx += ((((( 4.474984866301e-013 * T\n\t\t+ 4.189032191814e-011) * T\n\t\t- 2.790392351314e-009) * T\n\t\t- 2.165750777942e-006) * T\n\t\t- 7.5311878482337989e-04) * T /* F, t^3 */\n\t\t- 1.3117809789650071e+01) * T2; /* F, t^2 */\n\tArgs[10] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Mean anomaly of sun = l' (J. Laskar) */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600(1.2959658102304320e+08 * T + 1.2871027407441526e+06);\n\tx += ((((((((\n\t\t1.62e-20 * T\n\t\t\t- 1.0390e-17 ) * T\n\t\t- 3.83508e-15 ) * T\n\t\t+ 4.237343e-13 ) * T\n\t\t+ 8.8555011e-11 ) * T\n\t\t- 4.77258489e-8 ) * T\n\t\t- 1.1297037031e-5 ) * T\n\t\t+ 8.7473717367324703e-05) * T\n\t\t- 5.5281306421783094e-01) * T2;\n\tArgs[11] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Mean anomaly of moon = l */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1.7179159228846793e+09 * T + 4.8586817465825332e+05 );\n\tx += (((((-1.755312760154e-012 * T\n\t\t+ 3.452144225877e-011) * T\n\t\t- 2.506365935364e-008) * T\n\t\t- 2.536291235258e-004) * T\n\t\t+ 5.2099641302735818e-02) * T /* l, t^3 */\n\t\t+ 3.1501359071894147e+01) * T2; /* l, t^2 */\n\tArgs[12] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Mean longitude of moon, re mean ecliptic and equinox of date = L  */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1.7325643720442266e+09 * T + 7.8593980921052420e+05);\n\tx += ((((( 7.200592540556e-014 * T\n\t\t+ 2.235210987108e-010) * T\n\t\t- 1.024222633731e-008) * T\n\t\t- 6.073960534117e-005) * T\n\t\t+ 6.9017248528380490e-03) * T /* L, t^3 */\n\t\t- 5.6550460027471399e+00) * T2; /* L, t^2 */\n\n\tArgs[13] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* Precession of the equinox  */\n\tx = ((((((((( -8.66e-20*T - 4.759e-17)*T\n\t\t+ 2.424e-15)*T\n\t\t+ 1.3095e-12)*T\n\t\t+ 1.7451e-10)*T\n\t\t- 1.8055e-8)*T\n\t\t- 0.0000235316)*T\n\t\t+ 0.000076)*T\n\t\t+ 1.105414)*T\n\t\t+ 5028.791959)*T;\n\t/* Moon's longitude re fixed J2000 equinox.  */\n\t/*\n\t Args[13] -= x;\n\t */\n\t// gplan.pA_precession = STR * x;\n\n\t/* Free librations.  */\n\t/* longitudinal libration 2.891725 years */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 4.48175409e7 * T + 8.060457e5 );\n\tArgs[14] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\t/* libration P, 24.2 years */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600(  5.36486787e6 * T - 391702.8 );\n\tArgs[15] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n\t/* libration W, 74.7 years. */\n\tx = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].mods3600( 1.73573e6 * T );\n\tArgs[17] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\n  return Args\n};\n\n\n/* Generic program to accumulate sum of trigonometric series\n in three variables (e.g., longitude, latitude, radius)\n of the same list of arguments.  */\nconst gPlanCalc3 = (julianDate, body_ptable, polar, body_number) => {\n\tvar i, j, k, m, n, k1, ip, np, nt; // int\n\tvar p; // int array\n\tvar pl; // double array\n\tvar pb; // double array\n\tvar pr; // double array\n\n\tvar su, cu, sv, cv; // double\n\tvar T, t, sl, sb, sr; // double\n\n\tconst Args = meanElements(julianDate);\n\n\tT = (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / body_ptable.timescale;\n\tn = body_ptable.maxargs;\n\n  let sscc = { ss: [], cc: [] }\n  /* Calculate sin( i*MM ), etc. for needed multiple angles.  */\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif ((j = body_ptable.max_harmonic [i]) > 0)\n\t\t{\n\t\t\tsscc = gplanSSCC(i, Args[i], j, sscc);\n\t\t}\n\t}\n\n\t/* Point to start of table of arguments. */\n\tp = body_ptable.arg_tbl;\n\t/* Point to tabulated cosine and sine amplitudes.  */\n\tpl = body_ptable.lon_tbl;\n\tpb = body_ptable.lat_tbl;\n\tpr = body_ptable.rad_tbl;\n\n\tsl = 0.0;\n\tsb = 0.0;\n\tsr = 0.0;\n\n\tvar p_i = 0;\n\tvar pl_i = 0;\n\tvar pb_i = 0;\n\tvar pr_i = 0;\n\n\tfor (;;)\n\t{\n\t\t/* argument of sine and cosine */\n\t\t/* Number of periodic arguments. */\n\t\tnp = p [p_i ++]; //*p++;\n\t\tif (np < 0)\n\t\t\tbreak;\n\t\tif (np == 0)\n\t\t{\t\t\t/* It is a polynomial term.  */\n\t\t\tnt = p [p_i ++]; //*p++;\n\t\t\t/* \"Longitude\" polynomial (phi). */\n\t\t\tcu = pl [pl_i ++]; //*pl++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\t}\n\t\t\t/*\t  sl +=  mods3600 (cu); */\n\t\t\tsl += cu;\n\t\t\t/* \"Latitude\" polynomial (theta). */\n\t\t\tcu = pb [pb_i ++]; //*pb++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pb [pb_i ++]; //*pb++;\n\t\t\t}\n\t\t\tsb += cu;\n\t\t\t/* Radius polynomial (psi). */\n\t\t\tcu = pr [pr_i ++]; //*pr++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\t}\n\t\t\tsr += cu;\n\t\t\tcontinue;\n\t\t}\n\t\tk1 = 0;\n\t\tcv = 0.0;\n\t\tsv = 0.0;\n\t\tfor (ip = 0; ip < np; ip++) {\n\t\t\t/* What harmonic.  */\n\t\t\tj = p [p_i ++]; //*p++;\n\t\t\t/* Which planet.  */\n\t\t\tm = p [p_i ++] - 1; //*p++ - 1;\n\t\t\tif (j) {\n\t\t\t\t/*\t      k = abs (j); */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tk = -j;\n\t\t\t\telse\n\t\t\t\t\tk = j;\n\t\t\t\tk -= 1;\n\t\t\t\tsu =sscc.ss[m][k];\t/* sin(k*angle) */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tsu = -su;\n\t\t\t\tcu = sscc.cc[m][k];\n\t\t\t\tif (k1 == 0)\n\t\t\t\t{\t\t/* set first angle */\n\t\t\t\t\tsv = su;\n\t\t\t\t\tcv = cu;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t/* combine angles */\n\t\t\t\t\tt = su * cv + cu * sv;\n\t\t\t\t\tcv = cu * cv - su * sv;\n\t\t\t\t\tsv = t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* Highest power of T.  */\n\t\tnt = p [p_i ++]; //*p++;\n\t\t/* Longitude. */\n\t\tcu = pl [pl_i ++]; //*pl++;\n\t\tsu = pl [pl_i ++]; //*pl++;\n\t\tfor (ip = 0; ip < nt; ip++) {\n\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\tsu = su * T + pl [pl_i ++]; //*pl++;\n\t\t}\n\t\tsl += cu * cv + su * sv;\n\t\t/* Latitiude. */\n\t\tcu = pb [pb_i ++]; //*pb++;\n\t\tsu = pb [pb_i ++]; //*pb++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pb [pb_i ++]; //*pb++;\n\t\t\tsu = su * T + pb [pb_i ++]; //*pb++;\n\t\t}\n\t\tsb += cu * cv + su * sv;\n\t\t/* Radius. */\n\t\tcu = pr [pr_i ++]; //*pr++;\n\t\tsu = pr [pr_i ++]; //*pr++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\tsu = su * T + pr [pr_i ++]; //*pr++;\n\t\t}\n\t\tsr += cu * cv + su * sv;\n\t}\n\tt = body_ptable.trunclvl;\n\tpolar[0] = Args[body_number - 1] + _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * t * sl;\n\tpolar[1] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * t * sb;\n\tpolar[2] = body_ptable.distance * (1.0 + _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * t * sr);\n\n  return polar\n};\n\n/* Generic program to accumulate sum of trigonometric series\n in two variables (e.g., longitude, radius)\n of the same list of arguments.  */\nconst gPlanCalc2 = (julianDate, body_ptable, polar) => {\n\tvar i, j, k, m, n, k1, ip, np, nt; // int\n\tvar p; // int array\n\tvar pl; // double array\n\tvar pr; // double array\n\n\tvar su, cu, sv, cv; // double\n\tvar T, t, sl, sr; // double\n\n\tconst Args = meanElements(julianDate);\n\n\tT = (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / body_ptable.timescale;\n\tn = body_ptable.maxargs;\n\n  let sscc = { ss: [], cc: [] }\n  /* Calculate sin( i*MM ), etc. for needed multiple angles.  */\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif ((j = body_ptable.max_harmonic[i]) > 0)\n\t\t{\n\t\t\tsscc = gplanSSCC(i, Args[i], j, sscc);\n\t\t}\n\t}\n\n\t/* Point to start of table of arguments. */\n\tp = body_ptable.arg_tbl;\n\t/* Point to tabulated cosine and sine amplitudes.  */\n\tpl = body_ptable.lon_tbl;\n\tpr = body_ptable.rad_tbl;\n\n\tvar p_i = 0;\n\tvar pl_i = 0;\n\tvar pr_i = 0;\n\n\tsl = 0.0;\n\tsr = 0.0;\n\n\tfor (;;)\n\t{\n\t\t/* argument of sine and cosine */\n\t\t/* Number of periodic arguments. */\n\t\tnp = p [p_i ++]; //*p++;\n\t\tif (np < 0)\n\t\t\tbreak;\n\t\tif (np == 0)\n\t\t{\t\t\t/* It is a polynomial term.  */\n\t\t\tnt = p [p_i ++]; //*p++;\n\t\t\t/* Longitude polynomial. */\n\t\t\tcu = pl [pl_i ++]; //*pl++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\t}\n\t\t\t/*\t  sl +=  mods3600 (cu); */\n\t\t\tsl += cu;\n\t\t\t/* Radius polynomial. */\n\t\t\tcu = pr [pr_i ++]; //*pr++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\t}\n\t\t\tsr += cu;\n\t\t\tcontinue;\n\t\t}\n\t\tk1 = 0;\n\t\tcv = 0.0;\n\t\tsv = 0.0;\n\t\tfor (ip = 0; ip < np; ip++)\n\t\t{\n\t\t\t/* What harmonic.  */\n\t\t\tj = p [p_i ++]; //*p++;\n\t\t\t/* Which planet.  */\n\t\t\tm = p [p_i ++] - 1; //*p++ - 1;\n\t\t\tif (j)\n\t\t\t{\n\t\t\t\t/*\t      k = abs (j); */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tk = -j;\n\t\t\t\telse\n\t\t\t\t\tk = j;\n\t\t\t\tk -= 1;\n\t\t\t\tsu =sscc.ss[m][k];\t/* sin(k*angle) */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tsu = -su;\n\t\t\t\tcu = sscc.cc[m][k];\n\t\t\t\tif (k1 == 0)\n\t\t\t\t{\t\t/* set first angle */\n\t\t\t\t\tsv = su;\n\t\t\t\t\tcv = cu;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t/* combine angles */\n\t\t\t\t\tt = su * cv + cu * sv;\n\t\t\t\t\tcv = cu * cv - su * sv;\n\t\t\t\t\tsv = t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* Highest power of T.  */\n\t\tnt = p [p_i ++]; //*p++;\n\t\t/* Longitude. */\n\t\tcu = pl [pl_i ++]; //*pl++;\n\t\tsu = pl [pl_i ++]; //*pl++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\tsu = su * T + pl [pl_i ++]; //*pl++;\n\t\t}\n\t\tsl += cu * cv + su * sv;\n\t\t/* Radius. */\n\t\tcu = pr [pr_i ++]; //*pr++;\n\t\tsu = pr [pr_i ++]; //*pr++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pr [pr_i ++]; //*pr++;\n\t\t\tsu = su * T + pr [pr_i ++]; //*pr++;\n\t\t}\n\t\tsr += cu * cv + su * sv;\n\t}\n\tt = body_ptable.trunclvl;\n\tpolar[0] = t * sl;\n\tpolar[2] = t * sr;\n\n  return polar\n};\n\n/* Generic program to accumulate sum of trigonometric series\n in one variable.  */\nconst gPlanCalc1 = (julianDate, body_ptable) => {\n\tvar i, j, k, m, k1, ip, np, nt; // int\n\tvar p; // int array\n\tvar pl; // double array\n\n\tvar su, cu, sv, cv; // double\n\tvar T, t, sl; // double\n\n\tT = (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / body_ptable.timescale;\n\tconst Args = meanElements(julianDate);\n\n  let sscc = { ss: [], cc: [] }\n  /* Calculate sin( i*MM ), etc. for needed multiple angles.  */\n\tfor (i = 0; i < Args.length; i++)\n\t{\n\t\tif ((j = body_ptable.max_harmonic[i]) > 0)\n\t\t{\n\t\t\tsscc = gplanSSCC(i, Args[i], j, sscc);\n\t\t}\n\t}\n\n\t/* Point to start of table of arguments. */\n\tp = body_ptable.arg_tbl;\n\t/* Point to tabulated cosine and sine amplitudes.  */\n\tpl = body_ptable.lon_tbl;\n\n\tsl = 0.0;\n\n\tvar p_i = 0;\n\tvar pl_i = 0;\n\n\tfor (;;) {\n\t\t/* argument of sine and cosine */\n\t\t/* Number of periodic arguments. */\n\t\tnp = p [p_i ++]; //*p++;\n\t\tif (np < 0)\n\t\t\tbreak;\n\t\tif (np == 0)\n\t\t{\t\t\t/* It is a polynomial term.  */\n\t\t\tnt = p [p_i ++]; //*p++;\n\t\t\tcu = pl [pl_i ++]; //*pl++;\n\t\t\tfor (ip = 0; ip < nt; ip++)\n\t\t\t{\n\t\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\t}\n\t\t\t/*\t  sl +=  mods3600 (cu); */\n\t\t\tsl += cu;\n\t\t\tcontinue;\n\t\t}\n\t\tk1 = 0;\n\t\tcv = 0.0;\n\t\tsv = 0.0;\n\t\tfor (ip = 0; ip < np; ip++)\n\t\t{\n\t\t\t/* What harmonic.  */\n\t\t\tj = p [p_i ++]; //*p++;\n\t\t\t/* Which planet.  */\n\t\t\tm = p [p_i ++] - 1; //*p++ - 1;\n\t\t\tif (j)\n\t\t\t{\n\t\t\t\t/*\t      k = abs (j); */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tk = -j;\n\t\t\t\telse\n\t\t\t\t\tk = j;\n\t\t\t\tk -= 1;\n\t\t\t\tsu =sscc.ss[m][k];\t/* sin(k*angle) */\n\t\t\t\tif (j < 0)\n\t\t\t\t\tsu = -su;\n\t\t\t\tcu = sscc.cc[m][k];\n\t\t\t\tif (k1 == 0)\n\t\t\t\t{\t\t/* set first angle */\n\t\t\t\t\tsv = su;\n\t\t\t\t\tcv = cu;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t/* combine angles */\n\t\t\t\t\tt = su * cv + cu * sv;\n\t\t\t\t\tcv = cu * cv - su * sv;\n\t\t\t\t\tsv = t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* Highest power of T.  */\n\t\tnt = p [p_i ++]; //*p++;\n\t\t/* Cosine and sine coefficients.  */\n\t\tcu = pl [pl_i ++]; //*pl++;\n\t\tsu = pl [pl_i ++]; //*pl++;\n\t\tfor (ip = 0; ip < nt; ip++)\n\t\t{\n\t\t\tcu = cu * T + pl [pl_i ++]; //*pl++;\n\t\t\tsu = su * T + pl [pl_i ++]; //*pl++;\n\t\t}\n\t\tsl += cu * cv + su * sv;\n\t}\n\treturn body_ptable.trunclvl * sl;\n};\n\n/* Compute geocentric moon.  */\nconst gPlanMoon = (julianDate, rect, pol, lp_equinox) => {\n\tvar x, cosB, sinB, cosL, sinL; // double\n\n\tpol = gPlanCalc2(julianDate, _ptables_moonlr__WEBPACK_IMPORTED_MODULE_1__[\"moonlr\"], pol);\n\n\tx = pol[0];\n\tx += lp_equinox;\n\tif (x < -6.48e5) {\n\t\tx += 1.296e6;\n\t}\n\tif (x > 6.48e5) {\n\t\tx -= 1.296e6;\n\t}\n\tpol[0] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\tx = gPlanCalc1(julianDate, _ptables_moonlat__WEBPACK_IMPORTED_MODULE_2__[\"moonlat\"]);\n\tpol[1] = _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * x;\n\tx = (1.0 + _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * pol[2]) * _ptables_moonlr__WEBPACK_IMPORTED_MODULE_1__[\"moonlr\"].distance;\n\tpol[2] = x;\n\t/* Convert ecliptic polar to equatorial rectangular coordinates.  */\n\tconst epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_4__[\"default\"](julianDate);\n\tcosB = Math.cos(pol[1]);\n\tsinB = Math.sin(pol[1]);\n\tcosL = Math.cos(pol[0]);\n\tsinL = Math.sin(pol[0]);\n\trect[0] = cosB * cosL * x;\n\trect[1] = (epsilonObject.coseps * cosB * sinL - epsilonObject.sineps * sinB) * x;\n\trect[2] = (epsilonObject.sineps * cosB * sinL + epsilonObject.coseps * sinB) * x;\n\n  return rect\n\n};\n\nconst get_lp_equinox = julianDate => {\n  const Args = meanElements(julianDate);\n  const lp_equinox = Args[13] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]\n  return lp_equinox\n}\n\nconst get_nf_arcsec = julianDate => {\n  const Args = meanElements(julianDate);\n  const nf_arcsec = Args[10] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]\n  return nf_arcsec\n}\n\nconst get_ea_arcsec = julianDate => {\n  const Args = meanElements(julianDate);\n  const ea_arcsec = Args[2] * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"]\n  return ea_arcsec\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/gplan.js?");

/***/ }),

/***/ "./src/utilities/julian.js":
/*!*********************************!*\
  !*** ./src/utilities/julian.js ***!
  \*********************************/
/*! exports provided: julian */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"julian\", function() { return julian; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\nconst julian = {\n  calcJulianDate: ({year=0, month=0, day=0, hours=0, minutes=0, seconds=0}={}) => {\n    //////////\n    // * int year (1...)\n    // * int month (1...12)\n    // * int date = (1...31)\n    // * float ut = universal time\n    // => Returns Float || the Julian Date given the specific Gregorian calendar date\n    year = year + 4800;\n    if (year < 0) { year += 1; }\n\n    if (month <= 2) {\n      month += 12;\n      year -= 1;\n    }\n\n\n    const centuries = Math.floor (year / 100);\n    const e = Math.floor ((306 * (month + 1)) / 10);\n    const c = Math.floor ((36525 * year) / 100); // Julian calendar years and leap years\n    let b = 0;\n\n  \t/* The origin should be chosen to be a century year\n  \t * that is also a leap year.  We pick 4801 B.C.\n  \t */\n\n  \t/* The following magic arithmetic calculates a sequence\n  \t * whose successive terms differ by the correct number of\n  \t * days per calendar month.  It starts at 122 = March; January\n  \t * and February come after December.\n  \t */\n\n  \tif (year <= 1582) {\n  \t\tif (year == 1582) {\n  \t\t\tif (month < 10) {\n  \t\t\t\tb = -38;\n  \t\t\t}\n  \t\t\tif (month > 10 || day >= 15) {\n  \t\t\t\t// number of century years that are not leap years\n  \t\t\t\tb = Math.floor ((centuries / 4) - centuries);\n  \t\t\t}\n  \t\t}\n  \t\telse { b = -38; } //**** additional line to fix the bug *****\n  \t} else {\n  \t\tb = Math.floor ((centuries / 4) - centuries);\n  \t}\n\n  \t/* Add up these terms, plus offset from J 0 to 1 Jan 4801 B.C.\n  \t * Also fudge for the 122 days from the month algorithm.\n  \t */\n  \tconst julianDate = b + c + e + day - 32167.5;\n\n  \t// Add time\n  \tconst julianTime = (3600.0 * hours + 60.0 * minutes + seconds) / 86400.0;\n\n  \treturn julianDate + julianTime;\n  },\n  calcJ2000: julianDate => {\n    return 2000.0 + (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / 365.25;\n  },\n  calcB1950: julianDate => {\n    return 1950.0 + (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"B1950\"]) / 365.25;\n  },\n  calcJ1900: julianDate => {\n    return  1900.0 + (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J1900\"]) / 365.25;\n  },\n\n  calcUniversalDate: universalJulian => {\n    const gregorian = julian.toGregorian(universalJulian);\n\n    const date = new Date(Date.UTC(gregorian.year, (gregorian.month - 1), gregorian.day, gregorian.hours, gregorian.minutes, gregorian.seconds, gregorian.milliseconds))\n\n    return date\n  },\n\n  toGregorian: julianDate => {\n    let date = {}\n  \tvar month, day; // int\n  \tvar year, a, c, d, x, y, jd; // int\n  \tvar BC; // int\n  \tvar dd; // double\n\n  \t/* January 1.0, 1 A.D. */\n  \tif( julianDate < 1721423.5 ) {\n  \t\tBC = 1;\n  \t} else {\n  \t\tBC = 0;\n  \t}\n\n  \tjd = Math.floor (julianDate + 0.5); /* round Julian date up to integer */\n\n  \t/* Find the number of Gregorian centuries\n  \t * since March 1, 4801 B.C.\n  \t */\n  \ta = Math.floor ((100 * jd + 3204500)/3652425);\n\n  \t/* Transform to Julian calendar by adding in Gregorian century years\n  \t * that are not leap years.\n  \t * Subtract 97 days to shift origin of JD to March 1.\n  \t * Add 122 days for magic arithmetic algorithm.\n  \t * Add four years to ensure the first leap year is detected.\n  \t */\n  \tc = jd + 1486;\n  \tif( jd >= 2299160.5 ) {\n  \t\tc += a - Math.floor (a / 4);\n  \t} else {\n  \t\tc += 38;\n  \t}\n  \t/* Offset 122 days, which is where the magic arithmetic\n  \t * month formula sequence starts (March 1 = 4 * 30.6 = 122.4).\n  \t */\n  \td = Math.floor ((100 * c - 12210)/36525);\n  \t/* Days in that many whole Julian years */\n  \tx = Math.floor ((36525 * d) / 100);\n\n  \t/* Find month and day. */\n  \ty = Math.floor (((c-x) * 100) / 3061);\n  \tday = Math.floor (c - x - Math.floor ((306 * y) / 10));\n  \tmonth = Math.floor (y - 1);\n  \tif ( y > 13 ) {\n  \t\tmonth -= 12;\n  \t}\n\n  \t/* Get the year right. */\n  \tyear = d - 4715;\n  \tif (month > 2 ) {\n  \t\tyear -= 1;\n  \t}\n\n  \t/* Fractional part of day. */\n  \tdd = day + julianDate - jd + 0.5;\n\n  \tif (BC) {\n  \t\tyear = year - 1;\n  \t}\n\n  \tdate.year = year;\n  \tdate.month = month;\n\n  \tdate.day = Math.floor (dd);\n\n  \t/* Display fraction of calendar day\n  \t * as clock time.\n  \t */\n  \ta = Math.floor (dd);\n  \tdd = dd - a;\n  \tx = 2.0 * Math.PI * dd;\n    date = {...date, ..._util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].hms(x)}\n\n  \treturn date;\n  }\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/julian.js?");

/***/ }),

/***/ "./src/utilities/kepler.js":
/*!*********************************!*\
  !*** ./src/utilities/kepler.js ***!
  \*********************************/
/*! exports provided: kepler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"kepler\", function() { return kepler; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n/* harmony import */ var _gplan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gplan */ \"./src/utilities/gplan.js\");\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _precess__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./precess */ \"./src/utilities/precess.js\");\n\n\n\n\n\n\nconst kepler = {};\n\nkepler.calc = (julianDate, body, rect, polar) => {\n  const definePosition = !(rect && polar)\n\tvar alat, E, M, W, temp; // double\n\tvar epoch, inclination, ascnode, argperih; // double\n\tvar meandistance, dailymotion, eccent, meananomaly; // double\n\tvar r, coso, sino, cosa; // double\n\n\trect = rect || [];\n\tpolar = polar || [];\n\n\t/* Call program to compute position, if one is supplied.  */\n\tif ( body.ptable ) {\n\t\tif ( body.key == 'earth' ) {\n\t\t\tpolar = Object(_gplan__WEBPACK_IMPORTED_MODULE_2__[\"gPlanCalc3\"])(julianDate, body.ptable, polar, 3);\n\t\t} else {\n\t\t\tpolar = Object(_gplan__WEBPACK_IMPORTED_MODULE_2__[\"gPlanCalc\"])(julianDate, body.ptable, polar);\n\t\t}\n\t\tE = polar[0]; /* longitude */\n\t\tbody.longitude = E;\n\t\tW = polar[1]; /* latitude */\n\t\tr = polar[2]; /* radius */\n\t\tbody.distance = r;\n\t\tbody.epoch = julianDate;\n\t\tbody.equinox = _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"];\n\t\t// goto kepdon;\n\t} else {\n\t\t/* Decant the parameters from the data structure\n\t\t */\n\t\tepoch = body.epoch;\n\t\tinclination = body.inclination;\n\t\tascnode = body.node * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\t\targperih = body.perihelion;\n\t\tmeandistance = body.semiAxis; /* semimajor axis */\n\t\tdailymotion = body.dailyMotion;\n\t\teccent = body.eccentricity;\n\t\tmeananomaly = body.anomaly;\n\t\t/* Check for parabolic orbit. */\n\t\tif( eccent == 1.0 ) {\n\t\t\t/* meandistance = perihelion distance, q\n\t\t\t * epoch = perihelion passage date\n\t\t\t */\n\t\t\ttemp = meandistance * Math.sqrt (meandistance);\n\t\t\tW = (julianDate - epoch ) * 0.0364911624 / temp;\n\t\t\t/* The constant above is 3 k / sqrt(2),\n\t\t\t * k = Gaussian gravitational constant = 0.01720209895 . */\n\t\t\tE = 0.0;\n\t\t\tM = 1.0;\n\t\t\twhile (Math.abs(M) > 1.0e-11) {\n\t\t\t\ttemp = E * E;\n\t\t\t\ttemp = (2.0 * E * temp + W)/( 3.0 * (1.0 + temp));\n\t\t\t\tM = temp - E;\n\t\t\t\tif( temp != 0.0 ) {\n\t\t\t\t\tM /= temp;\n\t\t\t\t}\n\t\t\t\tE = temp;\n\t\t\t}\n\t\t\tr = meandistance * (1.0 + E * E );\n\t\t\tM = Math.atan (E);\n\t\t\tM = 2.0 * M;\n\t\t\talat = M + _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"]*argperih;\n\t\t\t// goto parabcon;\n\t\t} else {\n\t\t\tif( eccent > 1.0 ) {\n\t\t\t\t/* The equation of the hyperbola in polar coordinates r, theta\n\t\t\t\t * is r = a(e^2 - 1)/(1 + e cos(theta))\n\t\t\t\t * so the perihelion distance q = a(e-1),\n\t\t\t\t * the \"mean distance\"  a = q/(e-1).\n\t\t\t\t */\n\t\t\t\tmeandistance = meandistance/(eccent - 1.0);\n\t\t\t\ttemp = meandistance * Math.sqrt(meandistance);\n\t\t\t\tW = (julianDate - epoch ) * 0.01720209895 / temp;\n\t\t\t\t/* solve M = -E + e sinh E */\n\t\t\t\tE = W/(eccent - 1.0);\n\t\t\t\tM = 1.0;\n\t\t\t\twhile( Math.abs(M) > 1.0e-11 )\n\t\t\t\t{\n\t\t\t\t\tM = -E + eccent * _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].sinh(E) - W;\n\t\t\t\t\tE += M/(1.0 - eccent * _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].cosh(E));\n\t\t\t\t}\n\t\t\t\tr = meandistance * (-1.0 + eccent * _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].cosh(E));\n\t\t\t\ttemp = (eccent + 1.0)/(eccent - 1.0);\n\t\t\t\tM = Math.sqrt(temp) * _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].tanh( 0.5*E );\n\t\t\t\tM = 2.0 * Math.atan(M);\n\t\t\t\talat = M + _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * argperih;\n\t\t\t\t// goto parabcon;\n\t\t\t} else {\n\t\t\t\t/* Calculate the daily motion, if it is not given.\n\t\t\t\t */\n\t\t\t\tif( dailymotion == 0.0 )\n\t\t\t\t{\n\t\t\t\t\t/* The constant is 180 k / pi, k = Gaussian gravitational body.\n\t\t\t\t\t * Assumes object in heliocentric orbit is massless.\n\t\t\t\t\t */\n\t\t\t\t\tdailymotion = 0.9856076686 / (body.semiAxis * Math.sqrt(body.semiAxis));\n\t\t\t\t}\n\t\t\t\tdailymotion *= julianDate - epoch;\n\t\t\t\t/* M is proportional to the area swept out by the radius\n\t\t\t\t * vector of a circular orbit during the time between\n\t\t\t\t * perihelion passage and Julian date J.\n\t\t\t\t * It is the mean anomaly at time J.\n\t\t\t\t */\n\t\t\t\tM = _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * ( meananomaly + dailymotion );\n\t\t\t\tM = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].modtp(M);\n\t\t\t\t/* If mean longitude was calculated, adjust it also\n\t\t\t\t * for motion since epoch of elements.\n\t\t\t\t */\n\t\t\t\tif( body.longitude )\n\t\t\t\t{\n\t\t\t\t\tbody.longitude += dailymotion;\n\t\t\t\t\tbody.longitude = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].mod360 (body.longitude);\n\t\t\t\t}\n\n\t\t\t\t/* By Kepler's second law, M must be equal to\n\t\t\t\t * the area swept out in the same time by an\n\t\t\t\t * elliptical orbit of same total area.\n\t\t\t\t * Integrate the ellipse expressed in polar coordinates\n\t\t\t\t *     r = a(1-e^2)/(1 + e cosW)\n\t\t\t\t * with respect to the angle W to get an expression for the\n\t\t\t\t * area swept out by the radius vector.  The area is given\n\t\t\t\t * by the mean anomaly; the angle is solved numerically.\n\t\t\t\t *\n\t\t\t\t * The answer is obtained in two steps.  We first solve\n\t\t\t\t * Kepler's equation\n\t\t\t\t *    M = E - eccent*sin(E)\n\t\t\t\t * for the eccentric anomaly E.  Then there is a\n\t\t\t\t * closed form solution for W in terms of E.\n\t\t\t\t */\n\n\t\t\t\tE = M; /* Initial guess is same as circular orbit. */\n\t\t\t\ttemp = 1.0;\n\t\t\t\tdo {\n\t\t\t\t\t/* The approximate area swept out in the ellipse */\n\t\t\t\t\ttemp = E - eccent * Math.sin(E)\n\t\t\t\t\t\t/* ...minus the area swept out in the circle */\n\t\t\t\t\t\t- M;\n\t\t\t\t\t/* ...should be zero.  Use the derivative of the error\n\t\t\t\t\t * to converge to solution by Newton's method.\n\t\t\t\t\t */\n\t\t\t\t\tE -= temp/(1.0 - eccent * Math.cos(E));\n\t\t\t\t} while ( Math.abs(temp) > 1.0e-11 );\n\n\t\t\t\t/* The exact formula for the area in the ellipse is\n\t\t\t\t *    2.0*atan(c2*tan(0.5*W)) - c1*eccent*sin(W)/(1+e*cos(W))\n\t\t\t\t * where\n\t\t\t\t *    c1 = sqrt( 1.0 - eccent*eccent )\n\t\t\t\t *    c2 = sqrt( (1.0-eccent)/(1.0+eccent) ).\n\t\t\t\t * Substituting the following value of W\n\t\t\t\t * yields the exact solution.\n\t\t\t\t */\n\t\t\t\ttemp = Math.sqrt( (1.0+eccent)/(1.0-eccent) );\n\t\t\t\tW = 2.0 * Math.atan( temp * Math.tan(0.5*E) );\n\n\t\t\t\t/* The true anomaly.\n\t\t\t\t */\n\t\t\t\tW = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].modtp(W);\n\n\t\t\t\tmeananomaly *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\t\t\t\t/* Orbital longitude measured from node\n\t\t\t\t * (argument of latitude)\n\t\t\t\t */\n\t\t\t\tif( body.longitude ) {\n\t\t\t\t\talat = (body.longitude) * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] + W - meananomaly - ascnode;\n\t\t\t\t} else {\n\t\t\t\t\talat = W + _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * argperih; /* mean longitude not given */\n\t\t\t\t}\n\n\t\t\t\t/* From the equation of the ellipse, get the\n\t\t\t\t * radius from central focus to the object.\n\t\t\t\t */\n\t\t\t\tr = meandistance*(1.0-eccent*eccent)/(1.0+eccent*Math.cos(W));\n\t\t\t}\n\t\t}\n    // parabcon:\n\t\t/* The heliocentric ecliptic longitude of the object\n\t\t * is given by\n\t\t *   tan( longitude - ascnode )  =  cos( inclination ) * tan( alat ).\n\t\t */\n\t\tcoso = Math.cos( alat );\n\t\tsino = Math.sin( alat );\n\t\tinclination *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\t\tW = sino * Math.cos( inclination );\n\t\tE = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].zatan2 ( coso, W ) + ascnode;\n\n\t\t/* The ecliptic latitude of the object\n\t\t */\n\t\tW = sino * Math.sin( inclination );\n\t\tW = Math.asin (W);\n\t}\n  // kepdon:\n\n\t/* Convert to rectangular coordinates,\n\t * using the perturbed latitude.\n\t */\n\trect[2] = r * Math.sin(W);\n\tcosa = Math.cos(W);\n\trect[1] = r * cosa * Math.sin(E);\n\trect[0] = r * cosa * Math.cos(E);\n\n\t/* Convert from heliocentric ecliptic rectangular\n\t * to heliocentric equatorial rectangular coordinates\n\t * by rotating eps radians about the x axis.\n\t */\n\tlet epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_3__[\"default\"](body.equinox);\n\tW = epsilonObject.coseps*rect[1] - epsilonObject.sineps*rect[2];\n\tM = epsilonObject.sineps*rect[1] + epsilonObject.coseps*rect[2];\n\trect[1] = W;\n\trect[2] = M;\n\n\t/* Precess the position\n\t * to ecliptic and equinox of J2000.0\n\t * if not already there.\n\t */\n\trect = _precess__WEBPACK_IMPORTED_MODULE_4__[\"precess\"].calc(rect, body.equinox, 1);\n\t/* If earth, adjust from earth-moon barycenter to earth\n\t * by AA page E2.\n\t */\n\tif( body.key == 'earth' ) {\n\t\tr = kepler.embofs(julianDate, rect); /* see below */\n\t}\n\n\t/* Rotate back into the ecliptic.  */\n  epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]);\n\tW = epsilonObject.coseps*rect[1] + epsilonObject.sineps*rect[2];\n\tM = -epsilonObject.sineps*rect[1] + epsilonObject.coseps*rect[2];\n\n\t/* Convert to polar coordinates */\n\tE = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].zatan2( rect[0], W );\n\tW = Math.asin( M/r );\n\n\t/* Output the polar cooordinates\n\t */\n\tpolar[0] = E; /* longitude */\n\tpolar[1] = W; /* latitude */\n\tpolar[2] = r; /* radius */\n\n\t// fill the body.position only if rect and polar are\n\t// not defined\n\tif (definePosition) {\n\t\tbody.position = {\n\t\t\trect: rect,\n\t\t\tpolar: polar\n\t\t};\n\t}\n\n  return body\n};\n\n/* Adjust position from Earth-Moon barycenter to Earth\n *\n * J = Julian day number\n * emb = Equatorial rectangular coordinates of EMB.\n * return = Earth's distance to the Sun (au)\n */\nkepler.embofs = (julianDate, ea) => {\n\tvar pm = [], polm = []; // double\n\tvar a, b; // double\n\tvar i; // int\n\n\t/* Compute the vector Moon - Earth.  */\n  const lp_equinox = Object(_gplan__WEBPACK_IMPORTED_MODULE_2__[\"get_lp_equinox\"])(julianDate)\n\tpm = Object(_gplan__WEBPACK_IMPORTED_MODULE_2__[\"gPlanMoon\"])(julianDate, pm, polm, lp_equinox); // TODO - investigate how this mutates the data.\n\n\t/* Precess the lunar position\n\t * to ecliptic and equinox of J2000.0\n\t */\n\tpm = _precess__WEBPACK_IMPORTED_MODULE_4__[\"precess\"].calc(pm, julianDate, 1);\n\n\t/* Adjust the coordinates of the Earth\n\t */\n\ta = 1.0 / (_constants__WEBPACK_IMPORTED_MODULE_0__[\"EMRAT\"] +  1.0);\n\tb = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tea[i] = ea[i] - a * pm[i];\n\t\tb = b + ea[i] * ea[i];\n\t}\n\t/* Sun-Earth distance.  */\n\treturn Math.sqrt(b);\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/kepler.js?");

/***/ }),

/***/ "./src/utilities/light.js":
/*!********************************!*\
  !*** ./src/utilities/light.js ***!
  \********************************/
/*! exports provided: light */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"light\", function() { return light; });\n/* harmony import */ var _kepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kepler */ \"./src/utilities/kepler.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n/* harmony import */ var _VelocityEarth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VelocityEarth */ \"./src/utilities/VelocityEarth.js\");\n\n\n\n\nconst light = {};\n\nlight.calc = function (body, q, e, earthBody, observer) {\n  const p0 = light.getP0(q, e)\n\tvar p = [], ptemp = []; // double\n\tvar P, Q, E, t, x, y; // double\n\n\tE = 0.0;\n\tfor(let i=0; i<3; i++ ) {\n\t\tE += e[i]*e[i];\n\t}\n\tE = Math.sqrt(E);\n\n\tfor(let k=0; k<2; k++ ) {\n\t\tP = 0.0;\n\t\tQ = 0.0;\n\t\tfor(let i=0; i<3; i++ ) {\n\t\t\ty = q[i];\n\t\t\tx = y - e[i];\n\t\t\tp[i] = x;\n\t\t\tQ += y * y;\n\t\t\tP += x * x;\n\t\t}\n\t\tP = Math.sqrt(P);\n\t\tQ = Math.sqrt(Q);\n\t\t/* Note the following blows up if object equals sun. */\n\t\tt = (P + 1.97e-8 * Math.log( (E+P+Q)/(E-P+Q) ) )/173.1446327;\n\t\tbody = _kepler__WEBPACK_IMPORTED_MODULE_0__[\"kepler\"].calc(observer.Date.julian - t, body, q, ptemp );\n\t}\n\n\tbody.lightTime = 1440.0 * t;\n\n\t/* Final object-earth vector and the amount by which it changed.\n\t */\n\tfor(let i=0; i<3; i++ ) {\n\t\tx = q[i] - e[i];\n\t\tp[i] = x;\n\t\tbody.locals.dp [i] = x - p0[i];\n\t}\n\n\tbody.aberration = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].showcor(p0, body.locals.dp );\n\n\t/* Calculate dRA/dt and dDec/dt.\n\t * The desired correction of apparent coordinates is relative\n\t * to the equinox of date, but the coordinates here are\n\t * for J2000.  This introduces a slight error.\n\t *\n\t * Estimate object-earth vector t days ago.  We have\n\t * p(?) = q(J-t) - e(J), and must adjust to\n\t * p(J-t)  =  q(J-t) - e(J-t)  =  q(J-t) - (e(J) - Vearth * t)\n\t *         =  p(?) + Vearth * t.\n\t */\n  const velocityEarth = new _VelocityEarth__WEBPACK_IMPORTED_MODULE_2__[\"default\"](observer.Date.julian, earthBody);\n\n\tfor(let i=0; i<3; i++ ) {\n\t\tp[i] += velocityEarth.vearth[i]*t;\n\t}\n\n\tvar d = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].deltap( p, p0);  /* see dms.c */\n\tbody.locals.dradt = d.dr;\n\tbody.locals.ddecdt = d.dd;\n\tbody.locals.dradt /= t;\n\tbody.locals.ddecdt /= t;\n};\n\nlight.getP0 = (q, e) => {\n  let p0 = []\n  /* save initial q-e vector for display */\n  for(let i=0; i<3; i++ ) {\n\t\tp0[i] = q[i] - e[i];\n\t}\n\n  return p0\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/light.js?");

/***/ }),

/***/ "./src/utilities/lonlat.js":
/*!*********************************!*\
  !*** ./src/utilities/lonlat.js ***!
  \*********************************/
/*! exports provided: lonlat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lonlat\", function() { return lonlat; });\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _precess__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./precess */ \"./src/utilities/precess.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\nconst lonlat = {};\n\nlonlat.calc = (pp, date, polar, ofdate, result) => {\n  // NOTE mutates polar\n  // returns => polar as result\n\tvar s = [], x, y, z, yy, zz, r; // double\n\tvar i; // int\n\n\tresult = result || {};\n\n\t/* Make local copy of position vector\n\t * and calculate radius.\n\t */\n\tr = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tx = pp [i];\n\t\ts [i] = x;\n\t\tr += x * x;\n\t}\n\tr = Math.sqrt(r);\n\n\t/* Precess to equinox of date J\n\t */\n\tif( ofdate ) {\n\t\ts = _precess__WEBPACK_IMPORTED_MODULE_1__[\"precess\"].calc( s, date.julian, -1 );\n\t}\n\n\t/* Convert from equatorial to ecliptic coordinates\n\t */\n\tlet epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_0__[\"default\"](date.julian);\n\tyy = s[1];\n\tzz = s[2];\n\tx  = s[0];\n\ty  =  epsilonObject.coseps * yy  +  epsilonObject.sineps * zz;\n\tz  = -epsilonObject.sineps * yy  +  epsilonObject.coseps * zz;\n\n\tyy = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].zatan2( x, y );\n\tzz = Math.asin( z / r );\n\n\t// longitude and latitude in decimal\n\tpolar[0] = yy;\n\tpolar[1] = zz;\n\tpolar[2] = r;\n\n\t// longitude and latitude in h,m,s\n\tpolar[3] = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].dms(polar[0]);\n\tpolar[4] = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].dms(polar[1]);\n\n\tresult[0] = polar[0];\n\tresult[1] = polar[1];\n\tresult[2] = polar[2];\n\tresult[3] = polar[3];\n\tresult[4] = polar[4];\n\n\treturn result;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/lonlat.js?");

/***/ }),

/***/ "./src/utilities/luna.js":
/*!*******************************!*\
  !*** ./src/utilities/luna.js ***!
  \*******************************/
/*! exports provided: getMeanAscendingNode, getMeanPerigee */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMeanAscendingNode\", function() { return getMeanAscendingNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMeanPerigee\", function() { return getMeanPerigee; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\nconst getMeanAscendingNode = julianDate => {\n  // * t float = julianDate\n  // returns => longitude of node in decimal degrees\n  //////////\n  // A.K.A - North Node / Right Ascension Ascending Node\n  // Source: Astronomical Algorithims by Jean Meeus\n  // pg 313 example 45.7\n\n  const t = _util__WEBPACK_IMPORTED_MODULE_0__[\"util\"].timeInJulianCenturies(julianDate)\n\n  const result = 125.0445550 -\n                 1934.1361849 * t +\n                 0.0020762 * Math.pow(t, 2) +\n                 Math.pow(t, 3) / 467410 -\n                 Math.pow(t, 4) / 60616000\n\n  return _util__WEBPACK_IMPORTED_MODULE_0__[\"util\"].mod(result, 360)\n}\n\nconst getMeanPerigee = julianDate => {\n  // * t float = julianDate\n  // returns => longitude of perigee in decimal degrees\n  //////////\n  // Source: Astronomical Algorithims by Jean Meeus\n  // pg 313 example 45.7\n\n  const t = _util__WEBPACK_IMPORTED_MODULE_0__[\"util\"].timeInJulianCenturies(julianDate)\n\n  const result = 83.3532430 +\n                 4069.0137111 * t -\n                 0.0103238 * Math.pow(t, 2) -\n                 Math.pow(t, 3) / 80053 +\n                 Math.pow(t, 4) / 18999000\n\n  return _util__WEBPACK_IMPORTED_MODULE_0__[\"util\"].mod(result, 360)\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/luna.js?");

/***/ }),

/***/ "./src/utilities/motion.js":
/*!*********************************!*\
  !*** ./src/utilities/motion.js ***!
  \*********************************/
/*! exports provided: calculateCenturyAverageMotion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateCenturyAverageMotion\", function() { return calculateCenturyAverageMotion; });\n/* harmony import */ var _Ephemeris__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Ephemeris */ \"./src/Ephemeris.js\");\n\n\nconst calculateCenturyAverageMotion = (bodyKey) => {\n  const startDate = new Date(Date.UTC(2019, 9, 31, 0, 0))// jan 1 1900 : midnight\n\n  const endDate = new Date(Date.UTC(2019, 10, 1, 0, 0)) // jan 1, 2000 : midnight\n  const datesArray = []\n\n  let currentDate = new Date(startDate)\n  while(currentDate <= endDate) {\n    datesArray.push(new Date(currentDate))\n    currentDate = new Date(currentDate.setUTCMinutes(currentDate.getUTCMinutes() + 1))\n  }\n\n  let centuryAverageMotion = 0\n  datesArray.forEach(date => {\n\n    parseFloat(new _Ephemeris__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({ year: date.getUTCFullYear(),\n                    month: date.getUTCMonth(),\n                    day: date.getUTCDate(),\n                    hours: date.getUTCHours(),\n                    minutes: date.getUTCMinutes(),\n                    key: bodyKey,\n                    calculateMotion: true,\n                    calculateCenturyAverageMotion:false\n                  }))\n\n  })\n\n  return centuryAverageMotion / datesArray.length\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/motion.js?");

/***/ }),

/***/ "./src/utilities/nutation.js":
/*!***********************************!*\
  !*** ./src/utilities/nutation.js ***!
  \***********************************/
/*! exports provided: nutation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nutation\", function() { return nutation; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\n\nconst nutation = {}\n\nnutation.nutationObject = {\n\t/* The answers are posted here by nutlo():\n\t */\n\tjdnut: {},\t/* time to which the nutation applies */\n\tnutl: 0.0,\t/* nutation in longitude (radians) */\n\tnuto: 0.0,\t/* nutation in obliquity (radians) */\n\n\t/* Each term in the expansion has a trigonometric\n\t * argument given by\n\t *   W = i*MM + j*MS + k*FF + l*DD + m*OM\n\t * where the variables are defined below.\n\t * The nutation in longitude is a sum of terms of the\n\t * form (a + bT) * sin(W). The terms for nutation in obliquity\n\t * are of the form (c + dT) * cos(W).  The coefficients\n\t * are arranged in the tabulation as follows:\n\t *\n\t * Coefficient:\n\t * i  j  k  l  m      a      b      c     d\n\t * 0, 0, 0, 0, 1, -171996, -1742, 92025, 89,\n\t * The first line of the table, above, is done separately\n\t * since two of the values do not fit into 16 bit integers.\n\t * The values a and c are arc seconds times 10000.  b and d\n\t * are arc seconds per Julian century times 100000.  i through m\n\t * are integers.  See the program for interpretation of MM, MS,\n\t * etc., which are mean orbital elements of the Sun and Moon.\n\t *\n\t * If terms with coefficient less than X are omitted, the peak\n\t * errors will be:\n\t *\n\t *   omit\terror,\t\t  omit\terror,\n\t *   a <\tlongitude\t  c <\tobliquity\n\t * .0005\"\t.0100\"\t\t.0008\"\t.0094\"\n\t * .0046\t.0492\t\t.0095\t.0481\n\t * .0123\t.0880\t\t.0224\t.0905\n\t * .0386\t.1808\t\t.0895\t.1129\n\t */\n\tnt: [\n\t\t0, 0, 0, 0, 2, 2062, 2,-895, 5,\n\t\t-2, 0, 2, 0, 1, 46, 0,-24, 0,\n\t\t2, 0,-2, 0, 0, 11, 0, 0, 0,\n\t\t-2, 0, 2, 0, 2,-3, 0, 1, 0,\n\t\t1,-1, 0,-1, 0,-3, 0, 0, 0,\n\t\t0,-2, 2,-2, 1,-2, 0, 1, 0,\n\t\t2, 0,-2, 0, 1, 1, 0, 0, 0,\n\t\t0, 0, 2,-2, 2,-13187,-16, 5736,-31,\n\t\t0, 1, 0, 0, 0, 1426,-34, 54,-1,\n\t\t0, 1, 2,-2, 2,-517, 12, 224,-6,\n\t\t0,-1, 2,-2, 2, 217,-5,-95, 3,\n\t\t0, 0, 2,-2, 1, 129, 1,-70, 0,\n\t\t2, 0, 0,-2, 0, 48, 0, 1, 0,\n\t\t0, 0, 2,-2, 0,-22, 0, 0, 0,\n\t\t0, 2, 0, 0, 0, 17,-1, 0, 0,\n\t\t0, 1, 0, 0, 1,-15, 0, 9, 0,\n\t\t0, 2, 2,-2, 2,-16, 1, 7, 0,\n\t\t0,-1, 0, 0, 1,-12, 0, 6, 0,\n\t\t-2, 0, 0, 2, 1,-6, 0, 3, 0,\n\t\t0,-1, 2,-2, 1,-5, 0, 3, 0,\n\t\t2, 0, 0,-2, 1, 4, 0,-2, 0,\n\t\t0, 1, 2,-2, 1, 4, 0,-2, 0,\n\t\t1, 0, 0,-1, 0,-4, 0, 0, 0,\n\t\t2, 1, 0,-2, 0, 1, 0, 0, 0,\n\t\t0, 0,-2, 2, 1, 1, 0, 0, 0,\n\t\t0, 1,-2, 2, 0,-1, 0, 0, 0,\n\t\t0, 1, 0, 0, 2, 1, 0, 0, 0,\n\t\t-1, 0, 0, 1, 1, 1, 0, 0, 0,\n\t\t0, 1, 2,-2, 0,-1, 0, 0, 0,\n\t\t0, 0, 2, 0, 2,-2274,-2, 977,-5,\n\t\t1, 0, 0, 0, 0, 712, 1,-7, 0,\n\t\t0, 0, 2, 0, 1,-386,-4, 200, 0,\n\t\t1, 0, 2, 0, 2,-301, 0, 129,-1,\n\t\t1, 0, 0,-2, 0,-158, 0,-1, 0,\n\t\t-1, 0, 2, 0, 2, 123, 0,-53, 0,\n\t\t0, 0, 0, 2, 0, 63, 0,-2, 0,\n\t\t1, 0, 0, 0, 1, 63, 1,-33, 0,\n\t\t-1, 0, 0, 0, 1,-58,-1, 32, 0,\n\t\t-1, 0, 2, 2, 2,-59, 0, 26, 0,\n\t\t1, 0, 2, 0, 1,-51, 0, 27, 0,\n\t\t0, 0, 2, 2, 2,-38, 0, 16, 0,\n\t\t2, 0, 0, 0, 0, 29, 0,-1, 0,\n\t\t1, 0, 2,-2, 2, 29, 0,-12, 0,\n\t\t2, 0, 2, 0, 2,-31, 0, 13, 0,\n\t\t0, 0, 2, 0, 0, 26, 0,-1, 0,\n\t\t-1, 0, 2, 0, 1, 21, 0,-10, 0,\n\t\t-1, 0, 0, 2, 1, 16, 0,-8, 0,\n\t\t1, 0, 0,-2, 1,-13, 0, 7, 0,\n\t\t-1, 0, 2, 2, 1,-10, 0, 5, 0,\n\t\t1, 1, 0,-2, 0,-7, 0, 0, 0,\n\t\t0, 1, 2, 0, 2, 7, 0,-3, 0,\n\t\t0,-1, 2, 0, 2,-7, 0, 3, 0,\n\t\t1, 0, 2, 2, 2,-8, 0, 3, 0,\n\t\t1, 0, 0, 2, 0, 6, 0, 0, 0,\n\t\t2, 0, 2,-2, 2, 6, 0,-3, 0,\n\t\t0, 0, 0, 2, 1,-6, 0, 3, 0,\n\t\t0, 0, 2, 2, 1,-7, 0, 3, 0,\n\t\t1, 0, 2,-2, 1, 6, 0,-3, 0,\n\t\t0, 0, 0,-2, 1,-5, 0, 3, 0,\n\t\t1,-1, 0, 0, 0, 5, 0, 0, 0,\n\t\t2, 0, 2, 0, 1,-5, 0, 3, 0,\n\t\t0, 1, 0,-2, 0,-4, 0, 0, 0,\n\t\t1, 0,-2, 0, 0, 4, 0, 0, 0,\n\t\t0, 0, 0, 1, 0,-4, 0, 0, 0,\n\t\t1, 1, 0, 0, 0,-3, 0, 0, 0,\n\t\t1, 0, 2, 0, 0, 3, 0, 0, 0,\n\t\t1,-1, 2, 0, 2,-3, 0, 1, 0,\n\t\t-1,-1, 2, 2, 2,-3, 0, 1, 0,\n\t\t-2, 0, 0, 0, 1,-2, 0, 1, 0,\n\t\t3, 0, 2, 0, 2,-3, 0, 1, 0,\n\t\t0,-1, 2, 2, 2,-3, 0, 1, 0,\n\t\t1, 1, 2, 0, 2, 2, 0,-1, 0,\n\t\t-1, 0, 2,-2, 1,-2, 0, 1, 0,\n\t\t2, 0, 0, 0, 1, 2, 0,-1, 0,\n\t\t1, 0, 0, 0, 2,-2, 0, 1, 0,\n\t\t3, 0, 0, 0, 0, 2, 0, 0, 0,\n\t\t0, 0, 2, 1, 2, 2, 0,-1, 0,\n\t\t-1, 0, 0, 0, 2, 1, 0,-1, 0,\n\t\t1, 0, 0,-4, 0,-1, 0, 0, 0,\n\t\t-2, 0, 2, 2, 2, 1, 0,-1, 0,\n\t\t-1, 0, 2, 4, 2,-2, 0, 1, 0,\n\t\t2, 0, 0,-4, 0,-1, 0, 0, 0,\n\t\t1, 1, 2,-2, 2, 1, 0,-1, 0,\n\t\t1, 0, 2, 2, 1,-1, 0, 1, 0,\n\t\t-2, 0, 2, 4, 2,-1, 0, 1, 0,\n\t\t-1, 0, 4, 0, 2, 1, 0, 0, 0,\n\t\t1,-1, 0,-2, 0, 1, 0, 0, 0,\n\t\t2, 0, 2,-2, 1, 1, 0,-1, 0,\n\t\t2, 0, 2, 2, 2,-1, 0, 0, 0,\n\t\t1, 0, 0, 2, 1,-1, 0, 0, 0,\n\t\t0, 0, 4,-2, 2, 1, 0, 0, 0,\n\t\t3, 0, 2,-2, 2, 1, 0, 0, 0,\n\t\t1, 0, 2,-2, 0,-1, 0, 0, 0,\n\t\t0, 1, 2, 0, 1, 1, 0, 0, 0,\n\t\t-1,-1, 0, 2, 1, 1, 0, 0, 0,\n\t\t0, 0,-2, 0, 1,-1, 0, 0, 0,\n\t\t0, 0, 2,-1, 2,-1, 0, 0, 0,\n\t\t0, 1, 0, 2, 0,-1, 0, 0, 0,\n\t\t1, 0,-2,-2, 0,-1, 0, 0, 0,\n\t\t0,-1, 2, 0, 1,-1, 0, 0, 0,\n\t\t1, 1, 0,-2, 1,-1, 0, 0, 0,\n\t\t1, 0,-2, 2, 0,-1, 0, 0, 0,\n\t\t2, 0, 0, 2, 0, 1, 0, 0, 0,\n\t\t0, 0, 2, 4, 2,-1, 0, 0, 0,\n\t\t0, 1, 0, 1, 0, 1, 0, 0, 0\n\t],\n\n\tss: [],\n\tcc: []\n};\n\n/* Nutation -- AA page B20\n * using nutation in longitude and obliquity from nutlo()\n * and obliquity of the ecliptic from epsiln()\n * both calculated for Julian date J.\n *\n * p[] = equatorial rectangular position vector of object for\n * mean ecliptic and equinox of date.\n */\nnutation.calc = (date, p) => {\n  // NOTE mutates p\n  // returns => nutation {} object\n\n\tvar ce, se, cl, sl, sino, f; // double\n\tvar dp = [], p1 = []; // double\n\tvar i; // int\n\tvar result;\n\n\tconst nutationObject = nutation.getObject(date); /* be sure we calculated nutl and nuto */\n\tconst epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](date.julian); /* and also the obliquity of date */\n\n\tf = epsilonObject.eps + nutationObject.nuto;\n\tce = Math.cos( f );\n\tse = Math.sin( f );\n\tsino = Math.sin(nutationObject.nuto);\n\tcl = Math.cos( nutationObject.nutl );\n\tsl = Math.sin( nutationObject.nutl );\n\n\t/* Apply adjustment\n\t * to equatorial rectangular coordinates of object.\n\t *\n\t * This is a composite of three rotations: rotate about x axis\n\t * to ecliptic of date; rotate about new z axis by the nutation\n\t * in longitude; rotate about new x axis back to equator of date\n\t * plus nutation in obliquity.\n\t */\n\tp1[0] =   cl*p[0]\n\t\t- sl*epsilonObject.coseps*p[1]\n\t\t- sl*epsilonObject.sineps*p[2];\n\n\tp1[1] =   sl*ce*p[0]\n\t\t+ ( cl*epsilonObject.coseps*ce + epsilonObject.sineps*se )*p[1]\n\t\t- ( sino + (1.0-cl)*epsilonObject.sineps*ce )*p[2];\n\n\tp1[2] =   sl*se*p[0]\n\t\t+ ( sino + (cl-1.0)*se*epsilonObject.coseps )*p[1]\n\t\t+ ( cl*epsilonObject.sineps*se + epsilonObject.coseps*ce )*p[2];\n\n\tfor( i=0; i<3; i++ ) {\n\t\tdp[i] = p1[i] - p[i];\n\t}\n\n\tresult = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].showcor(p, dp);\n\n\tfor( i=0; i<3; i++ ) {\n\t\tp[i] = p1[i];\n\t}\n\n\treturn result;\n};\n\nnutation.getObject = date => {\n  return nutation.calclo(date, {...nutation.nutationObject})\n}\n\n/* Nutation in longitude and obliquity\n * computed at Julian date J.\n */\nnutation.calclo = (date, nutationObject) => {\n  // returns => nutationObject {}\n\tvar f, g, T, T2, T10; // double\n\tvar MM, MS, FF, DD, OM; // double\n\tvar cu, su, cv, sv, sw; // double\n\tvar C, D; // double\n\tvar i, j, k, k1, m; // int\n\tvar p; // short array\n\n\tif( nutationObject.jdnut.julian == date.julian )\n\t\treturn(0);\n\tnutationObject.jdnut = date;\n\n\t/* Julian centuries from 2000 January 1.5,\n\t * barycentric dynamical time\n\t */\n\tT = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].timeInJulianCenturies(date.julian)\n\tT2 = T * T;\n\tT10 = T / 10.0;\n\n\t/* Fundamental arguments in the FK5 reference system.  */\n\n\t/* longitude of the mean ascending node of the lunar orbit\n\t * on the ecliptic, measured from the mean equinox of date\n\t */\n\tOM = (_util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].mods3600 (-6962890.539 * T + 450160.280) + (0.008 * T + 7.455) * T2)\n\t\t* _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n\t/* mean longitude of the Sun minus the\n\t * mean longitude of the Sun's perigee\n\t */\n\tMS = (_util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].mods3600 (129596581.224 * T + 1287099.804) - (0.012 * T + 0.577) * T2)\n\t\t* _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n\t/* mean longitude of the Moon minus the\n\t * mean longitude of the Moon's perigee\n\t */\n\tMM = (_util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].mods3600 (1717915922.633 * T + 485866.733) + (0.064 * T + 31.310) * T2)\n\t\t* _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n\t/* mean longitude of the Moon minus the\n\t * mean longitude of the Moon's node\n\t */\n\tFF = (_util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].mods3600 (1739527263.137 * T + 335778.877) + (0.011 * T - 13.257) * T2)\n\t\t* _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n\t/* mean elongation of the Moon from the Sun.\n\t */\n\tDD = (_util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].mods3600 (1602961601.328 * T + 1072261.307) + (0.019 * T - 6.891) * T2)\n\t\t* _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"];\n\n\t/* Calculate sin( i*MM ), etc. for needed multiple angles\n\t */\n\tnutationObject = nutation.sscc(nutationObject, 0, MM, 3 );\n\tnutationObject = nutation.sscc(nutationObject, 1, MS, 2 );\n\tnutationObject = nutation.sscc(nutationObject, 2, FF, 4 );\n\tnutationObject = nutation.sscc(nutationObject, 3, DD, 4 );\n\tnutationObject = nutation.sscc(nutationObject, 4, OM, 2 );\n\n\tC = 0.0;\n\tD = 0.0;\n\tp = nutationObject.nt; /* point to start of table */\n\n\tvar p_i = 0;\n\n\tfor( i=0; i<105; i++ ) {\n\t\t/* argument of sine and cosine */\n\t\tk1 = 0;\n\t\tcv = 0.0;\n\t\tsv = 0.0;\n\t\tfor( m=0; m<5; m++ ) {\n\t\t\tj = p [p_i ++]; //*p++;\n\t\t\tif( j ) {\n\t\t\t\tk = j;\n\t\t\t\tif( j < 0 ) {\n\t\t\t\t\tk = -k;\n\t\t\t\t}\n\t\t\t\tsu = nutationObject.ss[m][k-1]; /* sin(k*angle) */\n\t\t\t\tif( j < 0 ) {\n\t\t\t\t\tsu = -su;\n\t\t\t\t}\n\t\t\t\tcu = nutationObject.cc[m][k-1];\n\t\t\t\tif( k1 == 0 ) { /* set first angle */\n\t\t\t\t\tsv = su;\n\t\t\t\t\tcv = cu;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t} else { /* combine angles */\n\t\t\t\t\tsw = su*cv + cu*sv;\n\t\t\t\t\tcv = cu*cv - su*sv;\n\t\t\t\t\tsv = sw;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* longitude coefficient */\n\t\tf  = p [p_i ++]; //*p++;\n\t\tif( (k = p [p_i ++] /* *p++ */) != 0 ) {\n\t\t\tf += T10 * k;\n\t\t}\n\n\t\t/* obliquity coefficient */\n\t\tg = p [p_i ++]; //*p++;\n\t\tif( (k = p [p_i ++] /* *p++ */) != 0 )\n\t\tg += T10 * k;\n\n\t\t/* accumulate the terms */\n\t\tC += f * sv;\n\t\tD += g * cv;\n\t}\n\t/* first terms, not in table: */\n\tC += (-1742.*T10 - 171996.)*nutationObject.ss[4][0];\t/* sin(OM) */\n\tD += (   89.*T10 +  92025.)*nutationObject.cc[4][0];\t/* cos(OM) */\n\t/*\n\t printf( \"nutation: in longitude %.3f\\\", in obliquity %.3f\\\"\\n\", C, D );\n\t */\n\t/* Save answers, expressed in radians */\n\tnutationObject.nutl = 0.0001 * _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * C;\n\tnutationObject.nuto = 0.0001 * _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * D;\n  return nutationObject\n};\n\n/* Prepare lookup table of sin and cos ( i*Lj )\n * for required multiple angles\n */\nnutation.sscc = (nutationObject, k, arg, n) => {\n\tvar cu, su, cv, sv, s; // double\n\tvar i; // int\n\n\tsu = Math.sin (arg);\n\tcu = Math.cos (arg);\n\tnutationObject.ss[k] = [];\n\tnutationObject.cc[k] = [];\n\n\tnutationObject.ss[k][0] = su;\t\t/* sin(L) */\n\tnutationObject.cc[k][0] = cu;\t\t/* cos(L) */\n\tsv = 2.0 * su * cu;\n\tcv = cu * cu - su * su;\n\tnutationObject.ss[k][1] = sv;\t\t/* sin(2L) */\n\tnutationObject.cc[k][1] = cv;\n\tfor (i = 2; i < n; i++)\n\t{\n\t\ts = su * cv + cu * sv;\n\t\tcv = cu * cv - su * sv;\n\t\tsv = s;\n\t\tnutationObject.ss[k][i] = sv;\t\t/* sin( i+1 L ) */\n\t\tnutationObject.cc[k][i] = cv;\n\t}\n\n  return nutationObject\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/nutation.js?");

/***/ }),

/***/ "./src/utilities/precess.js":
/*!**********************************!*\
  !*** ./src/utilities/precess.js ***!
  \**********************************/
/*! exports provided: precess */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"precess\", function() { return precess; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\nconst precess = {\n\t/* In WILLIAMS and SIMON, Laskar's terms of order higher than t^4\n\t have been retained, because Simon et al mention that the solution\n\t is the same except for the lower order terms.  */\n\tpAcof: [\n\t\t/* Corrections to Williams (1994) introduced in DE403.  */\n\t\t-8.66e-10, -4.759e-8, 2.424e-7, 1.3095e-5, 1.7451e-4, -1.8055e-3,\n\t\t-0.235316, 0.076, 110.5414, 50287.91959\n\t],\n\t/* Pi from Williams' 1994 paper, in radians.  No change in DE403.  */\n\tnodecof: [\n\t\t6.6402e-16, -2.69151e-15, -1.547021e-12, 7.521313e-12, 1.9e-10,\n\t\t-3.54e-9, -1.8103e-7,  1.26e-7,  7.436169e-5,\n\t\t-0.04207794833,  3.052115282424\n\t],\n\t/* pi from Williams' 1994 paper, in radians.  No change in DE403.  */\n\tinclcof: [\n\t\t1.2147e-16, 7.3759e-17, -8.26287e-14, 2.503410e-13, 2.4650839e-11,\n\t\t-5.4000441e-11, 1.32115526e-9, -6.012e-7, -1.62442e-5,\n\t\t0.00227850649, 0.0\n\t]\n};\n\n/* Precession of the equinox and ecliptic\n * from epoch Julian date J to or from J2000.0\n *\n * Subroutine arguments:\n *\n * R = rectangular equatorial coordinate vector to be precessed.\n *     The result is written back into the input vector.\n * J = Julian date\n * direction =\n *      Precess from J to J2000: direction = 1\n *      Precess from J2000 to J: direction = -1\n * Note that if you want to precess from J1 to J2, you would\n * first go from J1 to J2000, then call the program again\n * to go from J2000 to J2.\n */\nprecess.calc = (R, julianDate, direction) => {\n  // returns => R [] - mutates R\n\tvar A, B, T, pA, W, z; // double\n\tvar x = []; // double\n\tvar p; // double array\n\tvar p_i = 0;\n\tvar i; // int\n\n\tif( julianDate == _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"] ) {\n\t\treturn R;\n\t}\n\t/* Each precession angle is specified by a polynomial in\n\t * T = Julian centuries from J2000.0.  See AA page B18.\n\t */\n\tT = _util__WEBPACK_IMPORTED_MODULE_2__[\"util\"].timeInJulianCenturies(julianDate)\n\n\t/* Implementation by elementary rotations using Laskar's expansions.\n\t * First rotate about the x axis from the initial equator\n\t * to the ecliptic. (The input is equatorial.)\n\t */\n  let epsilonObject\n\tif (direction == 1) {\n\t\tepsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](julianDate); /* To J2000 */\n\t} else {\n\t\tepsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](_constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]); /* From J2000 */\n\t}\n\n\tx[0] = R[0];\n\tz = epsilonObject.coseps*R[1] + epsilonObject.sineps*R[2];\n\tx[2] = -epsilonObject.sineps*R[1] + epsilonObject.coseps*R[2];\n\tx[1] = z;\n\n\t/* Precession in longitude\n\t */\n\tT /= 10.0; /* thousands of years */\n\tp = precess.pAcof;\n\tpA = p [p_i ++]; //*p++;\n\tfor( i=0; i<9; i++ ) {\n\t\tpA = pA * T + p [p_i ++]; //*p++;\n\t}\n\tpA *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"STR\"] * T;\n\n\t/* Node of the moving ecliptic on the J2000 ecliptic.\n\t */\n\tp = precess.nodecof;\n\tp_i = 0;\n\tW = p [p_i ++]; //*p++;\n\tfor( i=0; i<10; i++ ) {\n\t\tW = W * T + p [p_i ++]; //*p++;\n\t}\n\n\t/* Rotate about z axis to the node.\n\t */\n\tif( direction == 1 ) {\n\t\tz = W + pA;\n\t} else {\n\t\tz = W;\n\t}\n\tB = Math.cos(z);\n\tA = Math.sin(z);\n\tz = B * x[0] + A * x[1];\n\tx[1] = -A * x[0] + B * x[1];\n\tx[0] = z;\n\n\t/* Rotate about new x axis by the inclination of the moving\n\t * ecliptic on the J2000 ecliptic.\n\t */\n\tp = precess.inclcof;\n\tp_i = 0;\n\tz = p [p_i ++]; //*p++;\n\tfor( i=0; i<10; i++ ) {\n\t\tz = z * T + p [p_i ++]; //*p++;\n\t}\n\tif( direction == 1 ) {\n\t\tz = -z;\n\t}\n\tB = Math.cos(z);\n\tA = Math.sin(z);\n\tz = B * x[1] + A * x[2];\n\tx[2] = -A * x[1] + B * x[2];\n\tx[1] = z;\n\n\t/* Rotate about new z axis back from the node.\n\t */\n\tif( direction == 1 ) {\n\t\tz = -W;\n\t} else {\n\t\tz = -W - pA;\n\t}\n\tB = Math.cos(z);\n\tA = Math.sin(z);\n\tz = B * x[0] + A * x[1];\n\tx[1] = -A * x[0] + B * x[1];\n\tx[0] = z;\n\n\t/* Rotate about x axis to final equator.\n\t */\n\n\tif( direction == 1 ) {\n\t\tepsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](_constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]);\n\t} else {\n\t\tepsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](julianDate);\n\t}\n\n\tz = epsilonObject.coseps * x[1] - epsilonObject.sineps * x[2];\n\tx[2] = epsilonObject.sineps * x[1] + epsilonObject.coseps * x[2];\n\tx[1] = z;\n\n\tfor( i=0; i<3; i++ ) {\n\t\tR[i] = x[i];\n\t}\n\n  return R\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/precess.js?");

/***/ }),

/***/ "./src/utilities/refraction.js":
/*!*************************************!*\
  !*** ./src/utilities/refraction.js ***!
  \*************************************/
/*! exports provided: refraction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"refraction\", function() { return refraction; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n\n\nconst refraction = {};\n\n/* Atmospheric refraction\n * Returns correction in degrees to be added to true altitude\n * to obtain apparent altitude.\n */\nrefraction.calc = (alt, observer) => {\n\tvar y, y0, D0, N, D, P, Q; // double\n\tvar i; // int\n\n\tif( (alt < -2.0) || (alt >= 90.0) ) {\n\t\treturn 0.0;\n\t}\n\n\t/* For high altitude angle, AA page B61\n\t * Accuracy \"usually about 0.1' \".\n\t */\n\tif( alt > 15.0 )\n\t{\n\t\tD = 0.00452*observer.atpress/((273.0+observer.attemp)*Math.tan( _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * alt ));\n\t\treturn D;\n\t}\n\n\t/* Formula for low altitude is from the Almanac for Computers.\n\t * It gives the correction for observed altitude, so has\n\t * to be inverted numerically to get the observed from the true.\n\t * Accuracy about 0.2' for -20C < T < +40C and 970mb < P < 1050mb.\n\t */\n\n\t/* Start iteration assuming correction = 0\n\t */\n\ty = alt;\n\tD = 0.0;\n\t/* Invert Almanac for Computers formula numerically\n\t */\n\tP = (observer.atpress - 80.0)/930.0;\n\tQ = 4.8e-3 * (observer.attemp - 10.0);\n\ty0 = y;\n\tD0 = D;\n\n\tfor( i=0; i<4; i++ ) {\n\t\tN = y + (7.31/(y+4.4));\n\t\tN = 1.0/Math.tan (_constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"] * N);\n\t\tD = N*P/(60.0 + Q * (N + 39.0));\n\t\tN = y - y0;\n\t\ty0 = D - D0 - N; /* denominator of derivative */\n\n\t\tif( (N != 0.0) && (y0 != 0.0) ) {\n\t\t/* Newton iteration with numerically estimated derivative */\n\t\t\tN = y - N*(alt + D - y)/y0;\n\t\t} else {\n\t\t/* Can't do it on first pass */\n\t\t\tN = alt + D;\n\t\t}\n\n\t\ty0 = y;\n\t\tD0 = D;\n\t\ty = N;\n\t}\n\treturn D;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/refraction.js?");

/***/ }),

/***/ "./src/utilities/siderial.js":
/*!***********************************!*\
  !*** ./src/utilities/siderial.js ***!
  \***********************************/
/*! exports provided: siderial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"siderial\", function() { return siderial; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _Epsilon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Epsilon */ \"./src/utilities/Epsilon.js\");\n/* harmony import */ var _nutation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nutation */ \"./src/utilities/nutation.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\n\n\n\nconst siderial = {};\n\nsiderial.calc = (date, tlong) => {\n\tvar jd0; // double    /* Julian day at midnight Universal Time */\n\tvar secs; // double  /* Time of day, UT seconds since UT midnight */\n\tvar eqeq, gmst, jd, T0, msday; // double\n\t/*long il;*/\n\n\t/* Julian day at given UT */\n\tjd = date.universalJulian; // UT\n\tjd0 = Math.floor(jd);\n\tsecs = date.julian - jd0; // UT\n\tif( secs < 0.5 ) {\n\t\tjd0 -= 0.5;\n\t\tsecs += 0.5;\n\t} else {\n\t\tjd0 += 0.5;\n\t\tsecs -= 0.5;\n\t}\n\tsecs *= 86400.0;\n\n\t/* Julian centuries from standard epoch J2000.0 */\n\t/* T = (jd - J2000)/36525.0; */\n\t/* Same but at 0h Universal Time of date */\n\t// T0 = (jd0 - J2000)/36525.0;\n  T0 = _util__WEBPACK_IMPORTED_MODULE_3__[\"util\"].timeInJulianCenturies(jd0)\n\n\t/* The equation of the equinoxes is the nutation in longitude\n\t * times the cosine of the obliquity of the ecliptic.\n\t * We already have routines for these.\n\t */\n\tconst nutationObject = _nutation__WEBPACK_IMPORTED_MODULE_2__[\"nutation\"].getObject(date);\n\tconst epsilonObject = new _Epsilon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](date.julian);\n\t/* nutl is in radians; convert to seconds of time\n\t * at 240 seconds per degree\n\t */\n\teqeq = 240.0 * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"] * nutationObject.nutl * epsilonObject.coseps;\n\t/* Greenwich Mean Sidereal Time at 0h UT of date */\n\t/* Corrections to Williams (1994) introduced in DE403.  */\n\tgmst = (((-2.0e-6*T0 - 3.e-7)*T0 + 9.27701e-2)*T0 + 8640184.7942063)*T0\n\t\t+ 24110.54841;\n\tmsday = (((-(4. * 2.0e-6)*T0 - (3. * 3.e-7))*T0 + (2. * 9.27701e-2))*T0\n\t\t+ 8640184.7942063)/(86400.*36525.) + 1.0;\n\n\t/* Local apparent sidereal time at given UT */\n\tgmst = gmst + msday*secs + eqeq + 240.0*tlong;\n\t/* Sidereal seconds modulo 1 sidereal day */\n\tgmst = gmst - 86400.0 * Math.floor( gmst/86400.0 );\n\t/*\n\t * il = gmst/86400.0;\n\t * gmst = gmst - 86400.0 * il;\n\t * if( gmst < 0.0 )\n\t *\tgmst += 86400.0;\n\t */\n\treturn gmst;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/siderial.js?");

/***/ }),

/***/ "./src/utilities/transit.js":
/*!**********************************!*\
  !*** ./src/utilities/transit.js ***!
  \**********************************/
/*! exports provided: transit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transit\", function() { return transit; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/utilities/util.js\");\n\n\n\nconst transit = {\n\n\t/* Returned transit, rise, and set times in radians (2 pi = 1 day) */\n\tr_trnsit: 0.0,\n\tr_rise: 0.0,\n\tr_set: 0.0,\n\televation_threshold: 0.0,\n\tsemidiameter: 0.0,\n\tf_trnsit: 0, // int\n\tsouthern_hemisphere: 0, // int\n\n\t/* Julian dates of rise, transet and set times.  */\n\tt_rise: 0.0,\n\tt_trnsit: 0.0,\n\televation_trnsit: 0.0,\n\tt_set: 0.0,\n\n\tSTEP_SCALE: 0.5\n};\n\n/* Calculate time of transit\n * assuming RA and Dec change uniformly with time\n */\ntransit.calc = function (date, lha, dec, body, observer, result) {\n\tvar x, y, z, N, D; // double\n\tvar lhay, cosdec, sindec, coslat, sinlat; // double\n\n\tresult = result || {};\n\n\tthis.f_trnsit = 0;\n\t/* Initialize to no-event flag value. */\n\tthis.r_rise = -10.0;\n\tthis.r_set = -10.0;\n\t/* observer's geodetic latitude, in radians */\n\tx = observer.glat * _constants__WEBPACK_IMPORTED_MODULE_0__[\"DTR\"];\n\tcoslat = Math.cos(x);\n\tsinlat = Math.sin(x);\n\n\tcosdec = Math.cos(dec);\n\tsindec = Math.sin(dec);\n\n\tif (sinlat < 0) {\n\t\tthis.southern_hemisphere = 1;\n\t} else {\n\t\tthis.southern_hemisphere = 0;\n\t}\n\n\t/* Refer to same start of date as iter_trnsit,\n\t so r_trnsit means the same thing in both programs.  */\n\tx = Math.floor(date.universalJulian - 0.5) + 0.5; // UT\n\tx = (date.universalJulian - x) * _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"]; // UT\n\t/* adjust local hour angle */\n\ty = lha;\n\t/* printf (\"%.7f,\", lha); */\n\twhile( y < -Math.PI ) {\n\t\ty += _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\twhile( y > Math.PI ) {\n\t\ty -= _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\tlhay = y;\n\ty =  y/( -body.locals.dradt / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"] + 1.00273790934);\n\tthis.r_trnsit = x - y;\n\t/* printf (\"rt %.7f \", r_trnsit); */\n\t/* Ordinarily never print here.  */\n\tresult.approxLocalMeridian = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].hms (this.r_trnsit);\n\tresult.UTdate = this.r_trnsit/_constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\n\tif( !((coslat == 0.0) || (cosdec == 0.0)) ) {\n\t\t/* The time at which the upper limb of the body meets the\n\t\t * horizon depends on the body's angular diameter.\n\t\t */\n\t\tswitch( body.key ) {\n\t\t\t/* Sun */\n\t\t\tcase 'sun':\n\t\t\t\tN = _constants__WEBPACK_IMPORTED_MODULE_0__[\"COSSUN\"];\n\t\t\t\tthis.semidiameter = 0.2666666666666667;\n\t\t\t\tthis.elevation_threshold = -0.8333333333333333;\n\t\t\t\tbreak;\n\n\t\t\t/* Moon, elevation = -34' - semidiameter + parallax\n\t\t\t * semidiameter = 0.272453 * parallax + 0.0799\"\n\t\t\t */\n\t\t\tcase 'moon':\n\t\t\t\tN = 1.0/(_constants__WEBPACK_IMPORTED_MODULE_0__[\"DISFAC\"] * body.position.polar [2]);\n\t\t\t\tD = Math.asin( N ); /* the parallax */\n\t\t\t\tthis.semidiameter = 0.2725076*D + 3.874e-7;\n\t\t\t\tN =  -9.890199094634534e-3 - this.semidiameter + D;\n\t\t\t\tthis.semidiameter *= _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"];\n\t\t\t\tthis.elevation_threshold = -34.0/60.0 - this.semidiameter;\n\t\t\t\tN = Math.sin(N);\n\t\t\t\tbreak;\n\n\t\t\t/* Other object */\n\t\t\tdefault:\n\t\t\t\tN = _constants__WEBPACK_IMPORTED_MODULE_0__[\"COSZEN\"];\n\t\t\t\tthis.semidiameter = 0.0;\n\t\t\t\tthis.elevation_threshold = -0.5666666666666666;\n\t\t\t\tbreak;\n\t\t}\n\t\ty = (N - sinlat*sindec)/(coslat*cosdec);\n\n\t\tif( (y < 1.0) && (y > -1.0) ) {\n\t\t\tthis.f_trnsit = 1;\n\t\t\t/* Derivative of y with respect to declination\n\t\t\t * times rate of change of declination:\n\t\t\t */\n\t\t\tz = -body.locals.ddecdt * (sinlat + _constants__WEBPACK_IMPORTED_MODULE_0__[\"COSZEN\"] * sindec);\n\t\t\tz /= _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"]*coslat*cosdec*cosdec;\n\t\t\t/* Derivative of acos(y): */\n\t\t\tz /= Math.sqrt( 1.0 - y*y);\n\t\t\ty = Math.acos(y);\n\t\t\tD = -body.locals.dradt / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"] + 1.00273790934;\n\t\t\tthis.r_rise = x - (lhay + y)*(1.0 + z)/D;\n\t\t\tthis.r_set = x - (lhay - y)*(1.0 - z)/D;\n\t\t\t/* Ordinarily never print here.  */\n\n\t\t\tresult.dApproxRiseUT = this.r_rise;\n\t\t\tresult.dApproxSetUT = this.r_set;\n\t\t\tresult.approxRiseUT = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].hms (this.r_rise);\n\t\t\tresult.approxSetUT = _util__WEBPACK_IMPORTED_MODULE_1__[\"util\"].hms (this.r_set);\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Compute estimate of lunar rise and set times for iterative solution.  */\ntransit.iterator = function (julian, callback) {\n\tvar date = {\n\t\tjulian: julian\n\t};\n\n\t$moshier.toGregorian (date);\n\t$moshier.julian.calc (date);\n\t$moshier.delta.calc (date);\n\n\t$moshier.kepler (date, $moshier.body.earth);\n\n\tcallback ();\n};\n\n/* Iterative computation of rise, transit, and set times.  */\ntransit.iterateTransit = function (callback, result) {\n\t//var JDsave, TDTsave, UTsave; // double\n\tvar date, date_trnsit, t0, t1; // double\n\tvar rise1, set1, trnsit1, loopctr, retry; // double\n\tvar isPrtrnsit = false;\n\n\tresult = result || {};\n\n\tloopctr = 0;\n\t//JDsave = JD;\n\t//TDTsave = TDT;\n\t//UTsave = UT;\n\tretry = 0;\n\t/* Start iteration at time given by the user.  */\n\tt1 = $moshier.body.earth.position.date.universalJulian; // UT\n\n\t/* Find transit time. */\n\tdo {\n\t\tt0 = t1;\n\t\tdate = Math.floor (t0 - 0.5) + 0.5;\n\t\tthis.iterator (t0, callback);\n\t\tt1 = date + this.r_trnsit / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\tif (++loopctr > 10) {\n\t\t\tbreak;\n\t\t\t// goto no_trnsit;\n\t\t}\n\t} while (Math.abs (t1 - t0) > .0001);\n\n\tif (!(loopctr > 10)) {\n\t\tthis.t_trnsit = t1;\n\t\tthis.elevation_trnsit = $moshier.altaz.elevation;\n\t\ttrnsit1 = this.r_trnsit;\n\t\tset1 = this.r_set;\n\t\tif (this.f_trnsit == 0) {\n\t\t\t/* Rise or set time not found.  Apply a search technique to\n\t\t\t check near inferior transit if object is above horizon now.  */\n\t\t\tthis.t_rise = -1.0;\n\t\t\tthis.t_set = -1.0;\n\t\t\tif ($moshier.altaz.elevation > this.elevation_threshold) {\n\t\t\t\tthis.noRiseSet (this.t_trnsit, callback);\n\t\t\t}\n\t\t\t// goto prtrnsit;\n\t\t} else {\n\t\t\t/* Set current date to be that of the transit just found.  */\n\t\t\tdate_trnsit = date;\n\t\t\tt1 = date + this.r_rise / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t/* Choose rising no later than transit.  */\n\t\t\tif (t1 >= this.t_trnsit) {\n\t\t\t\tdate -= 1.0;\n\t\t\t\tt1 = date + this.r_rise / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t}\n\t\t\tloopctr = 0;\n\t\t\tdo {\n\t\t\t\tt0 = t1;\n\t\t\t\tthis.iterator (t0, callback);\n\t\t\t\t/* Skip out if no event found.  */\n\t\t\t\tif (this.f_trnsit == 0) {\n\t\t\t\t\t/* Rise or set time not found.  Apply search technique.  */\n\t\t\t\t\tthis.t_rise = -1.0;\n\t\t\t\t\tthis.t_set = -1.0;\n\t\t\t\t\tthis.noRiseSet (this.t_trnsit, callback);\n\t\t\t\t\tisPrtrnsit = true;\n\t\t\t\t\t// goto prtrnsit;\n\t\t\t\t} else {\n\t\t\t\t\tif (++loopctr > 10) {\n\t\t\t\t\t\t// Rise time did not converge\n\t\t\t\t\t\tthis.f_trnsit = 0;\n\t\t\t\t\t\tisPrtrnsit = true;\n\t\t\t\t\t\t// goto prtrnsit;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt1 = date + this.r_rise / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\t\t\tif (t1 > this.t_trnsit) {\n\t\t\t\t\t\t\tdate -= 1;\n\t\t\t\t\t\t\tt1 = date + this.r_rise / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (Math.abs (t1 - t0) > .0001);\n\n\t\t\tif (!isPrtrnsit) {\n\t\t\t\tisPrtrnsit = false;\n\t\t\t\trise1 = this.r_rise;\n\t\t\t\tthis.t_rise = t1;\n\n\t\t\t\t/* Set current date to be that of the transit.  */\n\t\t\t\tdate = date_trnsit;\n\t\t\t\tthis.r_set = set1;\n\t\t\t\t/* Choose setting no earlier than transit.  */\n\t\t\t\tt1 = date + this.r_set / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\tif (t1 <= this.t_trnsit) {\n\t\t\t\t\tdate += 1.0;\n\t\t\t\t\tt1 = date + this.r_set / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\t}\n\t\t\t\tloopctr = 0;\n\t\t\t\tdo {\n\t\t\t\t\tt0 = t1;\n\t\t\t\t\tthis.iterator (t0, callback);\n\t\t\t\t\tif (this.f_trnsit == 0) {\n\t\t\t\t\t\t/* Rise or set time not found.  Apply search technique.  */\n\t\t\t\t\t\tthis.t_rise = -1.0;\n\t\t\t\t\t\tthis.t_set = -1.0;\n\t\t\t\t\t\tthis.noRiseSet (this.t_trnsit, callback);\n\t\t\t\t\t\tisPrtrnsit = true;\n\t\t\t\t\t\t//goto prtrnsit;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (++loopctr > 10) {\n\t\t\t\t\t\t\t// Set time did not converge\n\t\t\t\t\t\t\tthis.f_trnsit = 0;\n\t\t\t\t\t\t\tisPrtrnsit = true;\n\t\t\t\t\t\t\t//goto prtrnsit;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt1 = date + this.r_set / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\t\t\t\tif (t1 < this.t_trnsit) {\n\t\t\t\t\t\t\t\tdate += 1.0;\n\t\t\t\t\t\t\t\tt1 = date + this.r_set / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (fabs(t1 - t0) > .0001);\n\n\t\t\t\tif (!isPrtrnsit) {\n\t\t\t\t\tthis.t_set = t1;\n\t\t\t\t\tthis.r_trnsit = trnsit1;\n\t\t\t\t\tthis.r_rise = rise1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n// prtrnsit:\n\t\tresult.localMeridianTransit = $moshier.julian.toGregorian ({julian: this.t_trnsit});\n\t\tif (this.t_rise != -1.0) {\n\t\t\tresult.riseDate = $moshier.julian.toGregorian ({julian: this.t_rise});\n\t\t}\n\t\tif (this.t_set != -1.0) {\n\t\t\tresult.setDate = $moshier.julian.toGregorian ({julian: this.t_set});\n\t\t\tif (this.t_rise != -1.0) {\n\t\t\t\tt0 = this.t_set - this.t_rise;\n\t\t\t\tif ((t0 > 0.0) && (t0 < 1.0)) {\n\t\t\t\t\tresult.visibleHaours = 24.0 * t0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t(Math.abs($moshier.body.earth.position.date.julian - this.t_rise) > 0.5) &&\n\t\t\t(Math.abs($moshier.body.earth.position.date.julian - this.t_trnsit) > 0.5) &&\n\t\t\t(Math.abs($moshier.body.earth.position.date.julian - this.t_set) > 0.5)\n\t\t) {\n\t\t\t// wrong event date\n\t\t\tresult.wrongEventDate = true;\n\t\t}\n\t}\n// no_trnsit:\n\t//JD = JDsave;\n\t//TDT = TDTsave;\n\t//UT = UTsave;\n\t/* Reset to original input date entry.  */\n\t// update();\n\t//prtflg = prtsave;\n\tthis.f_trnsit = 1;\n\treturn result;\n};\n\n/* If the initial approximation fails to locate a rise or set time,\n this function steps between the transit time and the previous\n or next inferior transits to find an event more reliably.  */\ntransit.noRiseSet = function (t0, callback) {\n\tvar t_trnsit0 = this.t_trnsit; // double\n\tvar el_trnsit0 = this.elevation_trnsit; // double\n\tvar t, e; // double\n\tvar t_above, el_above, t_below, el_below; // double\n\n\t/* Step time toward previous inferior transit to find\n\t whether a rise event was missed.  The step size is a function\n\t of the azimuth and decreases near the transit time.  */\n\tt_above = t_trnsit0;\n\tel_above = el_trnsit0;\n\tt_below = -1.0;\n\tel_below = el_above;\n\tt = t_trnsit0 - 0.25;\n\te = 1.0;\n\twhile (e > 0.005) {\n\t\tthis.iterator (t, callback);\n\t\tif ($moshier.altaz.elevation > this.elevation_threshold) {\n\t\t\t/* Object still above horizon.  */\n\t\t\tt_above = t;\n\t\t\tel_above = $moshier.altaz.elevation;\n\t\t} else {\n\t\t\t/* Object is below horizon.  Rise event is bracketed.\n\t\t\t Proceed to interval halving search.  */\n\t\t\tt_below = t;\n\t\t\tel_below = $moshier.altaz.elevation;\n\t\t\tbreak; // goto search_rise;\n\t\t}\n\t\t/* Step time by an amount proportional to the azimuth deviation.  */\n\t\te = azimuth/360.0;\n\t\tif (azimuth < 180.0)\n\t\t{\n\t\t\tif (this.southern_hemisphere == 0) {\n\t\t\t\tt -= this.STEP_SCALE * e;\n\t\t\t} else {\n\t\t\t\tt += this.STEP_SCALE * e;\n\t\t\t}\n\t\t} else {\n\t\t\te = 1.0 - e;\n\t\t\tif (this.southern_hemisphere == 0) {\n\t\t\t\tt += this.STEP_SCALE * e;\n\t\t\t} else {\n\t\t\t\tt -= this.STEP_SCALE * e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* No rise event detected.  */\n\tif ($moshier.altaz.elevation > this.elevation_threshold) {\n\t\t/* printf (\"Previous inferior transit is above horizon.\\n\"); */\n\t\tthis.t_rise = -1.0;\n\t\t// goto next_midnight;\n\t} else {\n\t/* Find missed rise time. */\n// search_rise:\n\t\tthis.t_rise = this.searchHalve (t_below, el_below, t_above, el_above, callback);\n\t\tthis.f_trnsit = 1;\n\t}\n\n// next_midnight:\n\t/* Step forward in time toward the next inferior transit.  */\n\tt_above = t_trnsit0;\n\tel_above = el_trnsit0;\n\tt_below = -1.0;\n\tel_below = el_above;\n\tt = t_trnsit0 + 0.25;\n\te = 1.0;\n\twhile (e > 0.005) {\n\t\tthis.iterator (t, callback);\n\t\tif ($moshier.altaz.elevation > this.elevation_threshold) {\n\t\t\t/* Object still above horizon.  */\n\t\t\tt_above = t;\n\t\t\tel_above = $moshier.altaz.elevation;\n\t\t} else {\n\t\t\t/* Object is below horizon.  Event is bracketed.\n\t\t\t Proceed to interval halving search.  */\n\t\t\tt_below = t;\n\t\t\tel_below = $moshier.altaz.elevation;\n\t\t\tbreak; // goto search_set;\n\t\t}\n\t\t/* Step time by an amount proportional to the azimuth deviation.  */\n\t\te = $moshier.altaz.azimuth/360.0;\n\t\tif ($moshier.altaz.azimuth < 180.0) {\n\t\t\tif (this.southern_hemisphere == 0) {\n\t\t\t\tt -= this.STEP_SCALE * e;\n\t\t\t} else {\n\t\t\t\tt += this.STEP_SCALE * e;  /* Southern hemisphere observer.  */\n\t\t\t}\n\t\t} else {\n\t\t\te = 1.0 - e;\n\t\t\tif (this.southern_hemisphere == 0) {\n\t\t\t\tt += this.STEP_SCALE * e;\n\t\t\t} else {\n\t\t\t\tt -= this.STEP_SCALE * e;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($moshier.altaz.elevation > this.elevation_threshold) {\n\t\t/* printf (\"Next inferior transit is above horizon.\\n\"); */\n\t\tthis.t_set = -1.0;\n\t\t// return 0;\n\t} else {\n\t/* Find missed set time. */\n// search_set:\n\t\tthis.t_set = search_halve (t, elevation, this.t_trnsit, this.elevation_trnsit, callback);\n\t\tthis.f_trnsit = 1;\n\t}\n};\n\n/* Search rise or set time by simple interval halving\n after the event has been bracketed in time.  */\ntransit.searchHalve = function (t1, y1, t2, y2, callback) {\n\tvar e2, e1, em, tm, ym; // double\n\n\te2 = y2 - this.elevation_threshold;\n\te1 = y1 - this.elevation_threshold;\n\ttm = 0.5 * (t1 + t2);\n\n\twhile( Math.abs(t2 - t1) > .00001 ) {\n\t\t/* Evaluate at middle of current interval.  */\n\t\ttm = 0.5 * (t1 + t2);\n\t\tthis.iterator (tm, callback);\n\t\tym = $moshier.altaz.elevation;\n\t\tem = ym - this.elevation_threshold;\n\t\t/* Replace the interval boundary whose error has the same sign as em.  */\n\t\tif( em * e2 > 0 ) {\n\t\t\ty2 = ym;\n\t\t\tt2 = tm;\n\t\t\te2 = em;\n\t\t} else {\n\t\t\ty1 = ym;\n\t\t\tt1 = tm;\n\t\t\te1 = em;\n\t\t}\n\t}\n\treturn tm;\n};\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/transit.js?");

/***/ }),

/***/ "./src/utilities/util.js":
/*!*******************************!*\
  !*** ./src/utilities/util.js ***!
  \*******************************/
/*! exports provided: util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"util\", function() { return util; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants/index.js\");\n\n\nconst util = {};\n\nutil.hourTimeToDecimal = ({hour=0, minute=0}={}) => {\n  // HH:MM time format => Float\n  // ex: 1:30 => 1.5\n  // ex: 23.25 => 23.25\n  return moment.duration(`${hour}:${minute}`).asHours()\n}\n\nutil.mods3600 = function (value) {\n\tvar result;\n\n\tresult = (value - 1.296e6 * Math.floor (value / 1.296e6));\n\n\treturn result;\n};\n\n/* Reduce x modulo 2 pi\n */\nutil.modtp = function (x) {\n\tvar y; // double\n\n\ty = Math.floor ( x / _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"] );\n\ty = x - y * _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\twhile( y < 0.0 ) {\n\t\ty += _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\twhile( y >= _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"] ) {\n\t\ty -= _constants__WEBPACK_IMPORTED_MODULE_0__[\"TPI\"];\n\t}\n\treturn y;\n};\n\n/* Reduce x modulo 360 degrees\n */\nutil.mod360 = function (x) {\n\tvar k; // int\n\tvar y; // double\n\n\tk = Math.floor (x / 360.0);\n\ty = x  -  k * 360.0;\n\twhile( y < 0.0 ) {\n\t\ty += 360.0;\n\t}\n\twhile( y > 360.0 ) {\n\t\ty -= 360.0;\n\t}\n\treturn y;\n};\n\n/* Reduce x modulo 30 degrees\n */\nutil.mod30 = function (x) {\n\tvar k; // int\n\tvar y; // double\n\n\tk = Math.floor (x / 30.0);\n\ty = x  -  k * 30.0;\n\twhile( y < 0.0 ) {\n\t\ty += 30.0;\n\t}\n\twhile( y > 30.0 ) {\n\t\ty -= 30.0;\n\t}\n\treturn y;\n};\n\nutil.zatan2 = function ( x, y ) {\n\tvar z, w; // double\n\tvar code; // short\n\n\tcode = 0;\n\n\tif( x < 0.0 ) {\n\t\tcode = 2;\n\t}\n\tif( y < 0.0 ) {\n\t\tcode |= 1;\n\t}\n\n\tif( x == 0.0 ) {\n\t\tif( code & 1 ) {\n\t\t\treturn 1.5 * Math.PI ;\n\t\t}\n\t\tif( y == 0.0 ) {\n\t\t\treturn  0.0;\n\t\t}\n\t\treturn 0.5 * Math.PI;\n\t}\n\n\tif( y == 0.0 ) {\n\t\tif( code & 2 ) {\n\t\t\treturn Math.PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\n\tswitch( code ) {\n\t\tdefault:\n\t\tcase 0: w = 0.0; break;\n\t\tcase 1: w = 2.0 * Math.PI; break;\n\t\tcase 2:\n\t\tcase 3: w = Math.PI; break;\n\t}\n\n\tz = Math.atan (y / x);\n\n\treturn w + z;\n};\n\nutil.sinh = function (x) {\n\treturn (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\nutil.cosh = function (x) {\n\treturn (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\nutil.tanh = function (x) {\n\treturn (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));\n};\n\nutil.hms = function (x) {\n\tvar h, m; // int\n\tvar sint, sfrac; // long\n\tvar s; // double\n\tvar result = {};\n\n\ts = x * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTOH\"];\n\tif (s < 0.0) {\n\t\ts += 24.0;\n\t}\n\th = Math.floor (s);\n\ts -= h;\n\ts *= 60;\n\tm = Math.floor (s);\n\ts -= m;\n\ts *= 60;\n\t/* Handle shillings and pence roundoff. */\n\tsfrac = Math.floor (1000.0 * s + 0.5);\n\tif ( sfrac >= 60000 ) {\n\t\tsfrac -= 60000;\n\t\tm += 1;\n\t\tif( m >= 60 ) {\n\t\t\tm -= 60;\n\t\t\th += 1;\n\t\t}\n\t}\n\tsint = Math.floor (sfrac / 1000);\n\tsfrac -= Math.floor (sint * 1000);\n\n\tresult.hours = h;\n\tresult.minutes = m;\n\tresult.seconds = sint;\n\tresult.milliseconds = sfrac;\n\n\treturn result;\n};\n\nutil.dms = function (x) {\n\tvar s; // double\n\tvar d, m; // int\n\tvar result = {};\n\n\ts = x * _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTD\"];\n\tif( s < 0.0 ) {\n\t\ts = -s;\n\t}\n\td = Math.floor (s);\n\ts -= d;\n\ts *= 60;\n\tm = Math.floor (s);\n\ts -= m;\n\ts *= 60;\n\n\tresult.degree = d;\n\tresult.minutes = m;\n\tresult.seconds = s;\n\n\treturn result;\n};\n\n/* Display magnitude of correction vector\n * in arc seconds\n */\nutil.showcor = function (p, dp, result) {\n\tvar p1 = []; // dr, dd; // double\n\tvar i; // int\n\tvar d;\n\n\tfor( i=0; i<3; i++ ) {\n\t\tp1[i] = p[i] + dp[i];\n\t}\n\n\td = util.deltap ( p, p1);\n\n\tresult = result || {};\n\tresult.dRA = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * d.dr/15.0;\n\tresult.dDec = _constants__WEBPACK_IMPORTED_MODULE_0__[\"RTS\"] * d.dd;\n\n\treturn result;\n};\n\n/* Display Right Ascension and Declination\n * from input equatorial rectangular unit vector.\n * Output vector pol[] contains R.A., Dec., and radius.\n */\nutil.showrd = (p, pol, result) => {\n\tvar x, y, r; // double\n\tvar i; // int\n\n\tr = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tx = p[i];\n\t\tr += x * x;\n\t}\n\tr = Math.sqrt(r);\n\n\tx = util.zatan2( p[0], p[1] );\n\tpol[0] = x;\n\n\ty = Math.asin( p[2]/r );\n\tpol[1] = y;\n\n\tpol[2] = r;\n\n\tresult = result || {};\n\n\tresult = {...result, ...{\n\t\tdRA: x,\n\t\tdDec: y,\n\t\tra: util.hms(x),\n\t\tdec: util.dms(y)\n\t}}\n\n\treturn result;\n};\n\n/*\n * Convert change in rectangular coordinatates to change\n * in right ascension and declination.\n * For changes greater than about 0.1 degree, the\n * coordinates are converted directly to R.A. and Dec.\n * and the results subtracted.  For small changes,\n * the change is calculated to first order by differentiating\n *   tan(R.A.) = y/x\n * to obtain\n *    dR.A./cos**2(R.A.) = dy/x  -  y dx/x**2\n * where\n *    cos**2(R.A.)  =  1/(1 + (y/x)**2).\n *\n * The change in declination arcsin(z/R) is\n *   d asin(u) = du/sqrt(1-u**2)\n *   where u = z/R.\n *\n * p0 is the initial object - earth vector and\n * p1 is the vector after motion or aberration.\n *\n */\nutil.deltap = function (p0, p1, d) {\n\tvar dp = [], A, B, P, Q, x, y, z; // double\n\tvar i; // int\n\n\td = d || {};\n\n\tP = 0.0;\n\tQ = 0.0;\n\tz = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\tx = p0[i];\n\t\ty = p1[i];\n\t\tP += x * x;\n\t\tQ += y * y;\n\t\ty = y - x;\n\t\tdp[i] = y;\n\t\tz += y*y;\n\t}\n\n\tA = Math.sqrt(P);\n\tB = Math.sqrt(Q);\n\n\tif( (A < 1.e-7) || (B < 1.e-7) || (z/(P+Q)) > 5.e-7 ) {\n\t\tP = util.zatan2( p0[0], p0[1] );\n\t\tQ = util.zatan2( p1[0], p1[1] );\n\t\tQ = Q - P;\n\t\twhile( Q < -Math.PI ) {\n\t\t\tQ += 2.0*Math.PI;\n\t\t}\n\t\twhile( Q > Math.PI ) {\n\t\t\tQ -= 2.0*Math.PI;\n\t\t}\n\t\td.dr = Q;\n\t\tP = Math.asin( p0[2]/A );\n\t\tQ = Math.asin( p1[2]/B );\n\t\td.dd = Q - P;\n\t\treturn d;\n\t}\n\n\n\tx = p0[0];\n\ty = p0[1];\n\tif( x == 0.0 ) {\n\t\td.dr = 1.0e38;\n\t} else {\n\t\tQ = y/x;\n\t\tQ = (dp[1]  -  dp[0]*y/x)/(x * (1.0 + Q*Q));\n\t\td.dr = Q;\n\t}\n\n\tx = p0[2] / A;\n\tP = Math.sqrt( 1.0 - x*x );\n\td.dd = (p1[2] / B - x) / P;\n\n\treturn d;\n};\n\n/* Sun - object - earth angles and distances.\n * q (object), e (earth), and p (q minus e) are input vectors.\n * The answers are posted in the following global locations:\n */\nutil.angles = function (p, q, e, body) {\n  // NOTE mutates body\n\tvar a, b, s; // double\n\tvar i; // int\n\n\tbody.locals.EO = 0.0;\n\tbody.locals.SE = 0.0;\n\tbody.locals.SO = 0.0;\n\tbody.locals.pq = 0.0;\n\tbody.locals.ep = 0.0;\n\tbody.locals.qe = 0.0;\n\tfor( i=0; i<3; i++ ) {\n\t\ta = e[i];\n\t\tb = q[i];\n\t\ts = p[i];\n\t\tbody.locals.EO += s * s;\n\t\tbody.locals.SE += a * a;\n\t\tbody.locals.SO += b * b;\n\t\tbody.locals.pq += s * b;\n\t\tbody.locals.ep += a * s;\n\t\tbody.locals.qe += b * a;\n\t}\n\tbody.locals.EO = Math.sqrt(body.locals.EO); /* Distance between Earth and object */\n\tbody.locals.SO = Math.sqrt(body.locals.SO); /* Sun - object */\n\tbody.locals.SE = Math.sqrt(body.locals.SE); /* Sun - earth */\n\t/* Avoid fatality: if object equals sun, SO is zero.  */\n\tif( body.locals.SO > 1.0e-12 )\n\t{\n\t\tbody.locals.pq /= body.locals.EO * body.locals.SO;\t/* cosine of sun-object-earth */\n\t\tbody.locals.qe /= body.locals.SO * body.locals.SE;\t/* cosine of earth-sun-object */\n\t}\n\tbody.locals.ep /= body.locals.SE * body.locals.EO;\t/* -cosine of sun-earth-object */\n\n  return body\n};\n\nutil.isInModSetRange = ({setPoint=0, halfRangeLength=0, setMin=0, setMax=1, number=0}={}) => {\n  // Given a point within a wrapping set (between setMin and setMax)\n  // and a halfRangeLength to either side of the point\n  // Returns => boolean if the number\n  //            is within wrapped range\n  //            (setPoint - halfRangeLength)...(setPoint + halfRangeLength)\n  //            example:\n  //            set: 0...1\n  //            setPoint: 0.9\n  //            halfRangeLength: 0.2\n  //            number: 0.05\n  //            returns true => 0.05 is between 0.7...0.1 (wrapped)\n  let low = setPoint - halfRangeLength;\n  let high = setPoint + halfRangeLength - setMax;\n  if (low < setMin) {\n    setPoint -= low;\n    number = (number - low) % setMax;\n  } else if (high > setMin) {\n    setPoint -= high;\n    number = (setMax + number - high) % setMax;\n  }\n\n  return (number >= setPoint - halfRangeLength) && (number < setPoint + halfRangeLength)\n}\n\n// Mods even negative numbers\nutil.mod = (x, mod) => (x % mod + mod) % mod\n\nutil.timeInJulianCenturies = julianDate => {\n  return (julianDate - _constants__WEBPACK_IMPORTED_MODULE_0__[\"J2000\"]) / 36525.0\n}\n\nutil.decimalDegreesToDMSString = (decimalDegrees) => {\n  // converts decimal degrees to degrees / minutes / seconds\n  // https://stackoverflow.com/a/5786627/6826976\n  // * float decimalDegrees\n  // => returns { degrees, minutes, seconds }\n  let degrees = Math.floor(decimalDegrees)\n  let minfloat = (decimalDegrees - degrees) * 60\n  let minutes = Math.floor(minfloat)\n  let secfloat = (minfloat - minutes) * 60\n  let seconds = Math.round(secfloat)\n\n  // After rounding, the seconds might become 60. These two\n  // if-tests are not necessary if no rounding is done.\n  if (seconds === 60) {\n   minutes++\n   seconds = 0\n  }\n\n  if (minutes === 60) {\n   degrees++\n   minutes = 0\n  }\n\n  return degrees + '\\u00B0' +\n         minutes + '\\'' +\n         Math.floor(seconds) + '\"'\n}\n\n\nutil.attachApparentLongitudes = (object, decimalDegrees) => {\n  object.apparentLongitude = decimalDegrees\n  object.apparentLongitudeString = util.decimalDegreesToDMSString(object.apparentLongitude)\n  object.apparentLongitude30String = util.decimalDegreesToDMSString(util.mod(object.apparentLongitude, 30))\n\n  return object\n}\n\nutil.getModuloDifference = (n1, n2, mod) => {\n  // https://gamedev.stackexchange.com/questions/4467/comparing-angles-and-working-out-the-difference\n  // returns the difference between n1 - n2 when these numbers exist in a modular set\n  const halfMod = mod / 2\n  return halfMod - Math.abs(Math.abs(n1 - n2) - halfMod)\n}\n\nutil.correctRealModuloNumber = (absDiff, n1, n2, mod) => {\n  // Applies a negative number to absDiff if n1 < n2 or n1 + mod !== the diff\n  // Use in conjunction with getModuloDifference to get the absolute difference\n  // between n1, n2\n  return (n1 >= n2) || ((n1 + mod) - n2) === absDiff ? absDiff : -absDiff\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/util.js?");

/***/ }),

/***/ "./src/utilities/validators.js":
/*!*************************************!*\
  !*** ./src/utilities/validators.js ***!
  \*************************************/
/*! exports provided: validateYear, validateMonth, validateDate, validateHour, validateMinute, validateSecond, validateLatitude, validateLongitude, validateNumber, validateKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateYear\", function() { return validateYear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateMonth\", function() { return validateMonth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateDate\", function() { return validateDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateHour\", function() { return validateHour; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateMinute\", function() { return validateMinute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateSecond\", function() { return validateSecond; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateLatitude\", function() { return validateLatitude; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateLongitude\", function() { return validateLongitude; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateNumber\", function() { return validateNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateKey\", function() { return validateKey; });\nconst validateYear = (n) => {\n  if (typeof n === 'number' && n > 0) return n\n  else throw new Error(`The year: \"${n}\" - must be an integer and > 0 (C.E.)`)\n}\n\nconst validateMonth = (n) => {\n  if (typeof n === 'number' && n >= 0 && n <= 11) return n\n  else throw new Error(`The month: \"${n}\" - must be an integer and between 0 - 11. (0 = January, 11 = December)`)\n}\n\nconst validateDate = (n) => {\n  if (typeof n === 'number' && n >= 1 && n <= 31) return n\n  else throw new Error(`The day: \"${n} must be between 1 - 31`)\n}\n\nconst validateHour = (n) => {\n  if (typeof n === 'number' && n >= 0 && n <= 23) return n\n  else throw new Error(`The hour: \"${n}\" - must be an integer and between 0 - 23. (0 = midnight 00:00, 23 = 11pm (23:00))`)\n}\n\nconst validateMinute = (n) => {\n  if (typeof n === 'number' && n >= 0 && n <= 59) return n\n  else throw new Error(`The minute: \"${n}\" - must be an integer and between 0 - 59`)\n}\n\nconst validateSecond = (n) => {\n  if (typeof n === 'number' && n >= 0 && n <= 59) return n\n  else throw new Error(`The second: \"${n}\" - must be an integer and between 0 - 59`)\n}\n\nconst validateLatitude = (n) => {\n  if (typeof n === 'number' && n >= -90 && n <= 90) return n\n  else throw new Error(`The latitude: \"${n}\" - must be an float and between -90.00 to 90.00`)\n}\n\nconst validateLongitude = (n) => {\n  if (typeof n === 'number' && n >= -180 && n <= 180) return n\n  else throw new Error(`The longitude: \"${n}\" - must be an float and between -180.00 to 180.00`)\n}\n\nconst validateNumber = n => {\n  if (typeof n === 'number') return n\n  else throw new Error(`Parameter value of: \"${n}\" - must be a number (int or float type).`)\n}\n\nconst validateKey = key => {\n  if (!key) return\n  if (typeof key === 'string') return [key.toLowerCase()]\n  if (Array.isArray(key)) return key.map(k => k.toLowerCase())\n  throw new Error(`Key: ${key} is not a valid type. Please pass in a string: \"mercury\", an array: [\"mercury\", \"venus\", \"mars\"], or leave blank (for all).`)\n}\n\n\n//# sourceURL=webpack://Ephemeris/./src/utilities/validators.js?");

/***/ })

/******/ });
});